%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: scalims-overall-arch.pdf
%%Creator: Adobe Acrobat 10.0.0
%%For: jpduan
%%CreationDate: 9/8/2017, 10:21:01 PM
%%BoundingBox: 0 0 881 397
%%HiResBoundingBox: 0 0 881 397
%%CropBox: 0 0 881 397
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 626 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2017-04-01T07:49:30"
   xmp:CreatorTool=""
   pdf:Producer="Qt 5.3.0"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -397 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 397 li
881 397 li
881 0 li
cp
clp
0 0 mo
881 0 li
881 396 li
0 396 li
cp
false sop
0 0 0 0 cmyk
f
gsave
0 0 mo
881 0 li
881 397 li
0 397 li
0 0 li
cp
eclp
gsave
0 0 mo
881 0 li
881 396 li
0 396 li
0 0 li
cp
eclp
381.79 1 mo
837.52 1 li
860.705 1 879.5 19.7951 879.5 42.98 cv
879.5 238.86 li
879.5 262.045 860.705 280.84 837.52 280.84 cv
381.79 280.84 li
358.605 280.84 339.81 262.045 339.81 238.86 cv
339.81 42.98 li
339.81 19.7951 358.605 1 381.79 1 cv
cp
f
2 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
381.79 1 mo
837.52 1 li
860.705 1 879.5 19.7951 879.5 42.98 cv
879.5 238.86 li
879.5 262.045 860.705 280.84 837.52 280.84 cv
381.79 280.84 li
358.605 280.84 339.81 262.045 339.81 238.86 cv
339.81 42.98 li
339.81 19.7951 358.605 1 381.79 1 cv
cp
0 0 0 1 cmyk
@
341.81 40.98 mo
797.54 40.98 li
820.725 40.98 839.52 59.7751 839.52 82.96 cv
839.52 278.84 li
839.52 302.025 820.725 320.82 797.54 320.82 cv
341.81 320.82 li
318.625 320.82 299.83 302.025 299.83 278.84 cv
299.83 82.96 li
299.83 59.7751 318.625 40.98 341.81 40.98 cv
cp
0 0 0 0 cmyk
f
341.81 40.98 mo
797.54 40.98 li
820.725 40.98 839.52 59.7751 839.52 82.96 cv
839.52 278.84 li
839.52 302.025 820.725 320.82 797.54 320.82 cv
341.81 320.82 li
318.625 320.82 299.83 302.025 299.83 278.84 cv
299.83 82.96 li
299.83 59.7751 318.625 40.98 341.81 40.98 cv
cp
0 0 0 1 cmyk
@
303.33 80.95 mo
756.06 80.95 li
780.073 80.95 799.54 100.417 799.54 124.43 cv
799.54 327.31 li
799.54 351.323 780.073 370.79 756.06 370.79 cv
303.33 370.79 li
279.317 370.79 259.85 351.323 259.85 327.31 cv
259.85 124.43 li
259.85 100.417 279.317 80.95 303.33 80.95 cv
cp
0 0 0 0 cmyk
f
303.33 80.95 mo
756.06 80.95 li
780.073 80.95 799.54 100.417 799.54 124.43 cv
799.54 327.31 li
799.54 351.323 780.073 370.79 756.06 370.79 cv
303.33 370.79 li
279.317 370.79 259.85 351.323 259.85 327.31 cv
259.85 124.43 li
259.85 100.417 279.317 80.95 303.33 80.95 cv
cp
0 0 0 1 cmyk
@
86.45 181.1 mo
178.41 181.1 li
184.203 181.1 188.9 185.797 188.9 191.59 cv
188.9 240.57 li
188.9 246.363 184.203 251.06 178.41 251.06 cv
86.45 251.06 li
80.6565 251.06 75.96 246.363 75.96 240.57 cv
75.96 191.59 li
75.96 185.797 80.6565 181.1 86.45 181.1 cv
cp
.00866712 .221744 .120668 0 cmyk
f
86.45 181.1 mo
178.41 181.1 li
184.203 181.1 188.9 185.797 188.9 191.59 cv
188.9 240.57 li
188.9 246.363 184.203 251.06 178.41 251.06 cv
86.45 251.06 li
80.6565 251.06 75.96 246.363 75.96 240.57 cv
75.96 191.59 li
75.96 185.797 80.6565 181.1 86.45 181.1 cv
cp
.21561 .785061 .669032 .0808728 cmyk
@
111.084 202.084 mo
110.879 201.2 110.378 200.582 109.582 200.231 cv
109.136 200.038 108.642 199.941 108.097 199.941 cv
107.055 199.941 106.198 200.335 105.528 201.123 cv
104.857 201.91 104.522 203.095 104.522 204.676 cv
104.522 206.269 104.885 207.396 105.611 208.058 cv
106.337 208.719 107.163 209.05 108.088 209.05 cv
108.996 209.05 109.74 208.788 110.319 208.264 cv
110.899 207.74 111.256 207.053 111.391 206.204 cv
108.396 206.204 li
108.396 204.043 li
113.789 204.043 li
113.789 210.991 li
111.997 210.991 li
111.725 209.375 li
111.204 209.99 110.735 210.423 110.319 210.675 cv
109.605 211.114 108.727 211.334 107.684 211.334 cv
105.968 211.334 104.563 210.74 103.468 209.551 cv
102.326 208.356 101.755 206.722 101.755 204.649 cv
101.755 202.553 102.332 200.872 103.485 199.607 cv
104.639 198.342 106.164 197.71 108.062 197.71 cv
109.707 197.71 111.029 198.127 112.028 198.962 cv
113.026 199.796 113.599 200.837 113.745 202.084 cv
111.084 202.084 li
cp
118.725 210.991 mo
116.221 210.991 li
116.221 198.044 li
118.725 198.044 li
118.725 210.991 li
cp
127.148 208.444 mo
127.54 207.923 127.736 207.182 127.736 206.222 cv
127.736 205.261 127.54 204.522 127.148 204.004 cv
126.755 203.486 126.193 203.226 125.461 203.226 cv
124.729 203.226 124.166 203.486 123.77 204.004 cv
123.375 204.522 123.177 205.261 123.177 206.222 cv
123.177 207.182 123.375 207.923 123.77 208.444 cv
124.166 208.965 124.729 209.226 125.461 209.226 cv
126.193 209.226 126.755 208.965 127.148 208.444 cv
cp
129.15 209.828 mo
128.342 210.826 127.115 211.325 125.47 211.325 cv
123.824 211.325 122.598 210.826 121.789 209.828 cv
120.981 208.829 120.577 207.627 120.577 206.222 cv
120.577 204.84 120.981 203.642 121.789 202.629 cv
122.598 201.616 123.824 201.109 125.47 201.109 cv
127.115 201.109 128.342 201.616 129.15 202.629 cv
129.959 203.642 130.363 204.84 130.363 206.222 cv
130.363 207.627 129.959 208.829 129.15 209.828 cv
cp
140.274 202.568 mo
140.985 203.475 141.341 204.646 141.341 206.081 cv
141.341 207.569 140.989 208.801 140.287 209.779 cv
139.584 210.757 138.603 211.246 137.344 211.246 cv
136.553 211.246 135.918 211.088 135.438 210.772 cv
135.151 210.585 134.841 210.257 134.507 209.788 cv
134.507 210.991 li
132.056 210.991 li
132.056 198.061 li
134.551 198.061 li
134.551 202.664 li
134.867 202.219 135.215 201.879 135.596 201.645 cv
136.047 201.352 136.621 201.206 137.318 201.206 cv
138.577 201.206 139.562 201.66 140.274 202.568 cv
cp
138.179 208.4 mo
138.536 207.879 138.714 207.194 138.714 206.345 cv
138.714 205.665 138.627 205.103 138.451 204.658 cv
138.117 203.815 137.502 203.393 136.606 203.393 cv
135.699 203.393 135.075 203.806 134.735 204.632 cv
134.56 205.071 134.472 205.639 134.472 206.336 cv
134.472 207.156 134.653 207.835 135.016 208.374 cv
135.379 208.913 135.933 209.182 136.676 209.182 cv
137.321 209.182 137.821 208.921 138.179 208.4 cv
cp
148.401 206.336 mo
148.243 206.435 148.084 206.516 147.923 206.577 cv
147.761 206.639 147.54 206.696 147.259 206.749 cv
146.697 206.854 li
146.17 206.948 145.792 207.062 145.564 207.197 cv
145.178 207.425 144.984 207.779 144.984 208.26 cv
144.984 208.687 145.103 208.996 145.34 209.186 cv
145.577 209.377 145.866 209.472 146.205 209.472 cv
146.744 209.472 147.24 209.314 147.694 208.998 cv
148.148 208.681 148.384 208.104 148.401 207.267 cv
148.401 206.336 li
cp
146.882 205.168 mo
147.344 205.109 147.675 205.036 147.874 204.948 cv
148.231 204.796 148.41 204.559 148.41 204.237 cv
148.41 203.844 148.274 203.573 148.002 203.424 cv
147.729 203.275 147.33 203.2 146.803 203.2 cv
146.211 203.2 145.792 203.346 145.546 203.639 cv
145.371 203.856 145.254 204.149 145.195 204.518 cv
142.779 204.518 li
142.832 203.68 143.066 202.992 143.482 202.453 cv
144.144 201.61 145.28 201.188 146.89 201.188 cv
147.939 201.188 148.87 201.396 149.684 201.812 cv
150.498 202.228 150.905 203.013 150.905 204.166 cv
150.905 208.558 li
150.905 208.863 150.911 209.232 150.922 209.665 cv
150.94 209.993 150.99 210.216 151.072 210.333 cv
151.154 210.45 151.277 210.546 151.441 210.623 cv
151.441 210.991 li
148.717 210.991 li
148.641 210.798 148.589 210.617 148.559 210.447 cv
148.53 210.277 148.507 210.084 148.489 209.867 cv
148.144 210.242 147.745 210.561 147.294 210.825 cv
146.756 211.135 146.147 211.29 145.467 211.29 cv
144.601 211.29 143.885 211.043 143.32 210.548 cv
142.755 210.053 142.472 209.352 142.472 208.444 cv
142.472 207.267 142.926 206.415 143.834 205.888 cv
144.331 205.601 145.063 205.396 146.03 205.273 cv
146.882 205.168 li
cp
155.673 210.991 mo
153.169 210.991 li
153.169 198.044 li
155.673 198.044 li
155.673 210.991 li
cp
0 0 0 1 cmyk
f
91.6259 220.385 mo
92.68 219.319 94.021 218.786 95.649 218.786 cv
97.8274 218.786 99.4203 219.5 100.428 220.929 cv
100.984 221.731 101.283 222.537 101.323 223.345 cv
98.618 223.345 li
98.4423 222.724 98.2169 222.256 97.9416 221.939 cv
97.4497 221.377 96.7206 221.096 95.7544 221.096 cv
94.7706 221.096 93.9946 221.493 93.4266 222.286 cv
92.8586 223.08 92.5746 224.203 92.5746 225.655 cv
92.5746 227.107 92.8747 228.195 93.4749 228.918 cv
94.0752 229.642 94.8379 230.003 95.7632 230.003 cv
96.7119 230.003 97.4351 229.693 97.9328 229.072 cv
98.2081 228.738 98.4365 228.238 98.618 227.57 cv
101.297 227.57 li
101.063 228.981 100.464 230.129 99.5008 231.013 cv
98.5375 231.898 97.3033 232.34 95.7983 232.34 cv
93.9361 232.34 92.4721 231.742 91.4063 230.548 cv
90.3405 229.347 89.8076 227.702 89.8076 225.611 cv
89.8076 223.351 90.4137 221.609 91.6259 220.385 cv
cp
109.127 229.432 mo
109.519 228.911 109.715 228.17 109.715 227.21 cv
109.715 226.249 109.519 225.51 109.127 224.992 cv
108.734 224.474 108.172 224.214 107.44 224.214 cv
106.708 224.214 106.144 224.474 105.749 224.992 cv
105.354 225.51 105.156 226.249 105.156 227.21 cv
105.156 228.17 105.354 228.911 105.749 229.432 cv
106.144 229.953 106.708 230.214 107.44 230.214 cv
108.172 230.214 108.734 229.953 109.127 229.432 cv
cp
111.129 230.816 mo
110.321 231.814 109.094 232.313 107.449 232.313 cv
105.803 232.313 104.577 231.814 103.768 230.816 cv
102.96 229.817 102.556 228.615 102.556 227.21 cv
102.556 225.828 102.96 224.63 103.768 223.617 cv
104.577 222.604 105.803 222.097 107.449 222.097 cv
109.094 222.097 110.321 222.604 111.129 223.617 cv
111.938 224.63 112.342 225.828 112.342 227.21 cv
112.342 228.615 111.938 229.817 111.129 230.816 cv
cp
121.857 222.954 mo
122.487 223.472 122.802 224.332 122.802 225.532 cv
122.802 231.98 li
120.237 231.98 li
120.237 226.156 li
120.237 225.652 120.169 225.266 120.035 224.996 cv
119.789 224.504 119.32 224.258 118.629 224.258 cv
117.78 224.258 117.197 224.619 116.881 225.339 cv
116.717 225.719 116.635 226.206 116.635 226.797 cv
116.635 231.98 li
114.14 231.98 li
114.14 222.423 li
116.556 222.423 li
116.556 223.819 li
116.878 223.327 117.183 222.973 117.47 222.756 cv
117.985 222.37 118.638 222.177 119.428 222.177 cv
120.418 222.177 121.228 222.436 121.857 222.954 cv
cp
124.117 224.276 mo
124.117 222.493 li
125.452 222.493 li
125.452 219.822 li
127.929 219.822 li
127.929 222.493 li
129.484 222.493 li
129.484 224.276 li
127.929 224.276 li
127.929 229.336 li
127.929 229.728 127.979 229.972 128.079 230.069 cv
128.178 230.166 128.483 230.214 128.992 230.214 cv
129.068 230.214 129.149 230.213 129.234 230.21 cv
129.319 230.207 129.402 230.202 129.484 230.196 cv
129.484 232.067 li
128.298 232.111 li
127.115 232.152 126.307 231.947 125.874 231.496 cv
125.593 231.21 125.452 230.767 125.452 230.17 cv
125.452 224.276 li
124.117 224.276 li
cp
136.401 222.181 mo
136.433 222.184 136.505 222.188 136.616 222.194 cv
136.616 224.759 li
136.458 224.742 136.317 224.73 136.194 224.724 cv
136.071 224.718 135.972 224.715 135.896 224.715 cv
134.888 224.715 134.212 225.043 133.867 225.699 cv
133.673 226.068 133.577 226.636 133.577 227.403 cv
133.577 231.98 li
131.056 231.98 li
131.056 222.405 li
133.445 222.405 li
133.445 224.074 li
133.831 223.436 134.168 222.999 134.455 222.765 cv
134.924 222.373 135.533 222.177 136.282 222.177 cv
136.329 222.177 136.369 222.178 136.401 222.181 cv
cp
144.06 229.432 mo
144.452 228.911 144.649 228.17 144.649 227.21 cv
144.649 226.249 144.452 225.51 144.06 224.992 cv
143.668 224.474 143.105 224.214 142.373 224.214 cv
141.641 224.214 141.078 224.474 140.683 224.992 cv
140.287 225.51 140.09 226.249 140.09 227.21 cv
140.09 228.17 140.287 228.911 140.683 229.432 cv
141.078 229.953 141.641 230.214 142.373 230.214 cv
143.105 230.214 143.668 229.953 144.06 229.432 cv
cp
146.063 230.816 mo
145.255 231.814 144.028 232.313 142.382 232.313 cv
140.737 232.313 139.51 231.814 138.702 230.816 cv
137.894 229.817 137.489 228.615 137.489 227.21 cv
137.489 225.828 137.894 224.63 138.702 223.617 cv
139.51 222.604 140.737 222.097 142.382 222.097 cv
144.028 222.097 145.255 222.604 146.063 223.617 cv
146.871 224.63 147.275 225.828 147.275 227.21 cv
147.275 228.615 146.871 229.817 146.063 230.816 cv
cp
151.612 231.98 mo
149.109 231.98 li
149.109 219.032 li
151.612 219.032 li
151.612 231.98 li
cp
156.609 231.98 mo
154.106 231.98 li
154.106 219.032 li
156.609 219.032 li
156.609 231.98 li
cp
161.479 224.759 mo
161.16 225.122 160.96 225.614 160.878 226.235 cv
164.769 226.235 li
164.728 225.573 164.527 225.071 164.167 224.728 cv
163.807 224.386 163.361 224.214 162.828 224.214 cv
162.248 224.214 161.798 224.396 161.479 224.759 cv
cp
164.98 222.598 mo
165.618 222.897 166.145 223.368 166.561 224.012 cv
166.936 224.58 167.179 225.239 167.29 225.989 cv
167.354 226.428 167.381 227.061 167.369 227.886 cv
160.816 227.886 li
160.851 228.847 161.153 229.52 161.721 229.907 cv
162.066 230.147 162.482 230.267 162.968 230.267 cv
163.484 230.267 163.902 230.12 164.224 229.827 cv
164.4 229.669 164.555 229.45 164.69 229.169 cv
167.246 229.169 li
167.182 229.737 166.886 230.314 166.359 230.899 cv
165.539 231.83 164.391 232.296 162.915 232.296 cv
161.697 232.296 160.623 231.903 159.692 231.119 cv
158.761 230.334 158.295 229.057 158.295 227.289 cv
158.295 225.632 158.715 224.361 159.556 223.477 cv
160.396 222.592 161.487 222.15 162.828 222.15 cv
163.624 222.15 164.341 222.3 164.98 222.598 cv
cp
174.364 222.181 mo
174.396 222.184 174.468 222.188 174.579 222.194 cv
174.579 224.759 li
174.421 224.742 174.28 224.73 174.157 224.724 cv
174.034 224.718 173.935 224.715 173.859 224.715 cv
172.851 224.715 172.175 225.043 171.829 225.699 cv
171.636 226.068 171.54 226.636 171.54 227.403 cv
171.54 231.98 li
169.018 231.98 li
169.018 222.405 li
171.408 222.405 li
171.408 224.074 li
171.794 223.436 172.131 222.999 172.418 222.765 cv
172.886 222.373 173.495 222.177 174.245 222.177 cv
174.292 222.177 174.331 222.178 174.364 222.181 cv
cp
f
298.83 175.9 mo
387.79 175.9 li
394.412 175.9 399.78 181.268 399.78 187.89 cv
399.78 243.86 li
399.78 250.482 394.412 255.85 387.79 255.85 cv
298.83 255.85 li
292.208 255.85 286.84 250.482 286.84 243.86 cv
286.84 187.89 li
286.84 181.268 292.208 175.9 298.83 175.9 cv
cp
.124392 .0435798 0 0 cmyk
f
298.83 175.9 mo
387.79 175.9 li
394.412 175.9 399.78 181.268 399.78 187.89 cv
399.78 243.86 li
399.78 250.482 394.412 255.85 387.79 255.85 cv
298.83 255.85 li
292.208 255.85 286.84 250.482 286.84 243.86 cv
286.84 187.89 li
286.84 181.268 292.208 175.9 298.83 175.9 cv
cp
.609766 .380713 .064271 0 cmyk
@
318.375 198.044 mo
321.08 198.044 li
321.08 208.664 li
327.492 208.664 li
327.492 210.991 li
318.375 210.991 li
318.375 198.044 li
cp
335.133 208.444 mo
335.525 207.923 335.721 207.182 335.721 206.222 cv
335.721 205.261 335.525 204.522 335.133 204.004 cv
334.74 203.486 334.178 203.226 333.446 203.226 cv
332.714 203.226 332.15 203.486 331.755 204.004 cv
331.36 204.522 331.162 205.261 331.162 206.222 cv
331.162 207.182 331.36 207.923 331.755 208.444 cv
332.15 208.965 332.714 209.226 333.446 209.226 cv
334.178 209.226 334.74 208.965 335.133 208.444 cv
cp
337.135 209.828 mo
336.327 210.826 335.1 211.325 333.455 211.325 cv
331.809 211.325 330.582 210.826 329.774 209.828 cv
328.966 208.829 328.562 207.627 328.562 206.222 cv
328.562 204.84 328.966 203.642 329.774 202.629 cv
330.582 201.616 331.809 201.109 333.455 201.109 cv
335.1 201.109 336.327 201.616 337.135 202.629 cv
337.944 203.642 338.348 204.84 338.348 206.222 cv
338.348 207.627 337.944 208.829 337.135 209.828 cv
cp
345.847 204.851 mo
345.8 204.494 345.68 204.172 345.487 203.885 cv
345.206 203.499 344.77 203.305 344.178 203.305 cv
343.335 203.305 342.758 203.724 342.448 204.562 cv
342.284 205.007 342.202 205.598 342.202 206.336 cv
342.202 207.039 342.284 207.604 342.448 208.031 cv
342.746 208.828 343.309 209.226 344.134 209.226 cv
344.72 209.226 345.136 209.068 345.382 208.752 cv
345.628 208.435 345.777 208.025 345.83 207.522 cv
348.386 207.522 li
348.327 208.283 348.052 209.003 347.56 209.683 cv
346.775 210.778 345.613 211.325 344.073 211.325 cv
342.533 211.325 341.4 210.869 340.673 209.955 cv
339.947 209.041 339.584 207.856 339.584 206.397 cv
339.584 204.752 339.985 203.472 340.788 202.559 cv
341.59 201.645 342.697 201.188 344.108 201.188 cv
345.309 201.188 346.291 201.458 347.055 201.997 cv
347.819 202.535 348.272 203.487 348.412 204.851 cv
345.847 204.851 li
cp
355.402 206.336 mo
355.244 206.435 355.085 206.516 354.924 206.577 cv
354.763 206.639 354.542 206.696 354.26 206.749 cv
353.698 206.854 li
353.171 206.948 352.794 207.062 352.565 207.197 cv
352.179 207.425 351.985 207.779 351.985 208.26 cv
351.985 208.687 352.104 208.996 352.341 209.186 cv
352.578 209.377 352.867 209.472 353.206 209.472 cv
353.745 209.472 354.241 209.314 354.695 208.998 cv
355.149 208.681 355.385 208.104 355.402 207.267 cv
355.402 206.336 li
cp
353.883 205.168 mo
354.345 205.109 354.676 205.036 354.875 204.948 cv
355.233 204.796 355.411 204.559 355.411 204.237 cv
355.411 203.844 355.275 203.573 355.003 203.424 cv
354.73 203.275 354.331 203.2 353.804 203.2 cv
353.212 203.2 352.794 203.346 352.548 203.639 cv
352.372 203.856 352.255 204.149 352.196 204.518 cv
349.781 204.518 li
349.833 203.68 350.068 202.992 350.483 202.453 cv
351.145 201.61 352.281 201.188 353.892 201.188 cv
354.94 201.188 355.871 201.396 356.685 201.812 cv
357.499 202.228 357.906 203.013 357.906 204.166 cv
357.906 208.558 li
357.906 208.863 357.912 209.232 357.923 209.665 cv
357.941 209.993 357.991 210.216 358.073 210.333 cv
358.155 210.45 358.278 210.546 358.442 210.623 cv
358.442 210.991 li
355.719 210.991 li
355.642 210.798 355.59 210.617 355.561 210.447 cv
355.531 210.277 355.508 210.084 355.49 209.867 cv
355.145 210.242 354.747 210.561 354.296 210.825 cv
353.757 211.135 353.148 211.29 352.469 211.29 cv
351.602 211.29 350.886 211.043 350.321 210.548 cv
349.756 210.053 349.473 209.352 349.473 208.444 cv
349.473 207.267 349.927 206.415 350.835 205.888 cv
351.332 205.601 352.064 205.396 353.031 205.273 cv
353.883 205.168 li
cp
362.674 210.991 mo
360.17 210.991 li
360.17 198.044 li
362.674 198.044 li
362.674 210.991 li
cp
0 0 0 1 cmyk
f
300.626 220.385 mo
301.68 219.319 303.021 218.786 304.649 218.786 cv
306.827 218.786 308.42 219.5 309.428 220.929 cv
309.984 221.731 310.283 222.537 310.323 223.345 cv
307.618 223.345 li
307.442 222.724 307.217 222.256 306.942 221.939 cv
306.45 221.377 305.721 221.096 304.754 221.096 cv
303.771 221.096 302.995 221.493 302.427 222.286 cv
301.859 223.08 301.575 224.203 301.575 225.655 cv
301.575 227.107 301.875 228.195 302.475 228.918 cv
303.075 229.642 303.838 230.003 304.763 230.003 cv
305.712 230.003 306.435 229.693 306.933 229.072 cv
307.208 228.738 307.436 228.238 307.618 227.57 cv
310.297 227.57 li
310.063 228.981 309.464 230.129 308.501 231.013 cv
307.537 231.898 306.303 232.34 304.798 232.34 cv
302.936 232.34 301.472 231.742 300.406 230.548 cv
299.34 229.347 298.808 227.702 298.808 225.611 cv
298.808 223.351 299.414 221.609 300.626 220.385 cv
cp
318.127 229.432 mo
318.519 228.911 318.715 228.17 318.715 227.21 cv
318.715 226.249 318.519 225.51 318.127 224.992 cv
317.734 224.474 317.172 224.214 316.44 224.214 cv
315.708 224.214 315.145 224.474 314.749 224.992 cv
314.354 225.51 314.156 226.249 314.156 227.21 cv
314.156 228.17 314.354 228.911 314.749 229.432 cv
315.145 229.953 315.708 230.214 316.44 230.214 cv
317.172 230.214 317.734 229.953 318.127 229.432 cv
cp
320.129 230.816 mo
319.321 231.814 318.094 232.313 316.449 232.313 cv
314.803 232.313 313.577 231.814 312.768 230.816 cv
311.96 229.817 311.556 228.615 311.556 227.21 cv
311.556 225.828 311.96 224.63 312.768 223.617 cv
313.577 222.604 314.803 222.097 316.449 222.097 cv
318.094 222.097 319.321 222.604 320.129 223.617 cv
320.938 224.63 321.342 225.828 321.342 227.21 cv
321.342 228.615 320.938 229.817 320.129 230.816 cv
cp
330.857 222.954 mo
331.487 223.472 331.802 224.332 331.802 225.532 cv
331.802 231.98 li
329.237 231.98 li
329.237 226.156 li
329.237 225.652 329.169 225.266 329.035 224.996 cv
328.789 224.504 328.32 224.258 327.629 224.258 cv
326.78 224.258 326.197 224.619 325.881 225.339 cv
325.717 225.719 325.635 226.206 325.635 226.797 cv
325.635 231.98 li
323.14 231.98 li
323.14 222.423 li
325.556 222.423 li
325.556 223.819 li
325.878 223.327 326.183 222.973 326.47 222.756 cv
326.985 222.37 327.638 222.177 328.428 222.177 cv
329.418 222.177 330.228 222.436 330.857 222.954 cv
cp
333.117 224.276 mo
333.117 222.493 li
334.452 222.493 li
334.452 219.822 li
336.929 219.822 li
336.929 222.493 li
338.484 222.493 li
338.484 224.276 li
336.929 224.276 li
336.929 229.336 li
336.929 229.728 336.979 229.972 337.079 230.069 cv
337.178 230.166 337.483 230.214 337.992 230.214 cv
338.068 230.214 338.149 230.213 338.234 230.21 cv
338.319 230.207 338.402 230.202 338.484 230.196 cv
338.484 232.067 li
337.298 232.111 li
336.116 232.152 335.307 231.947 334.874 231.496 cv
334.593 231.21 334.452 230.767 334.452 230.17 cv
334.452 224.276 li
333.117 224.276 li
cp
345.401 222.181 mo
345.433 222.184 345.505 222.188 345.616 222.194 cv
345.616 224.759 li
345.458 224.742 345.317 224.73 345.194 224.724 cv
345.071 224.718 344.972 224.715 344.896 224.715 cv
343.888 224.715 343.212 225.043 342.867 225.699 cv
342.673 226.068 342.577 226.636 342.577 227.403 cv
342.577 231.98 li
340.056 231.98 li
340.056 222.405 li
342.445 222.405 li
342.445 224.074 li
342.831 223.436 343.168 222.999 343.455 222.765 cv
343.924 222.373 344.533 222.177 345.282 222.177 cv
345.329 222.177 345.369 222.178 345.401 222.181 cv
cp
353.06 229.432 mo
353.452 228.911 353.649 228.17 353.649 227.21 cv
353.649 226.249 353.452 225.51 353.06 224.992 cv
352.668 224.474 352.105 224.214 351.373 224.214 cv
350.641 224.214 350.078 224.474 349.682 224.992 cv
349.287 225.51 349.09 226.249 349.09 227.21 cv
349.09 228.17 349.287 228.911 349.682 229.432 cv
350.078 229.953 350.641 230.214 351.373 230.214 cv
352.105 230.214 352.668 229.953 353.06 229.432 cv
cp
355.063 230.816 mo
354.255 231.814 353.028 232.313 351.382 232.313 cv
349.737 232.313 348.51 231.814 347.702 230.816 cv
346.894 229.817 346.49 228.615 346.49 227.21 cv
346.49 225.828 346.894 224.63 347.702 223.617 cv
348.51 222.604 349.737 222.097 351.382 222.097 cv
353.028 222.097 354.255 222.604 355.063 223.617 cv
355.871 224.63 356.275 225.828 356.275 227.21 cv
356.275 228.615 355.871 229.817 355.063 230.816 cv
cp
360.612 231.98 mo
358.109 231.98 li
358.109 219.032 li
360.612 219.032 li
360.612 231.98 li
cp
365.609 231.98 mo
363.106 231.98 li
363.106 219.032 li
365.609 219.032 li
365.609 231.98 li
cp
370.479 224.759 mo
370.16 225.122 369.96 225.614 369.878 226.235 cv
373.769 226.235 li
373.728 225.573 373.527 225.071 373.167 224.728 cv
372.807 224.386 372.361 224.214 371.828 224.214 cv
371.248 224.214 370.798 224.396 370.479 224.759 cv
cp
373.98 222.598 mo
374.618 222.897 375.145 223.368 375.561 224.012 cv
375.936 224.58 376.179 225.239 376.29 225.989 cv
376.354 226.428 376.381 227.061 376.369 227.886 cv
369.816 227.886 li
369.851 228.847 370.153 229.52 370.721 229.907 cv
371.066 230.147 371.482 230.267 371.968 230.267 cv
372.484 230.267 372.902 230.12 373.224 229.827 cv
373.4 229.669 373.555 229.45 373.69 229.169 cv
376.246 229.169 li
376.182 229.737 375.886 230.314 375.359 230.899 cv
374.539 231.83 373.391 232.296 371.915 232.296 cv
370.697 232.296 369.623 231.903 368.692 231.119 cv
367.761 230.334 367.295 229.057 367.295 227.289 cv
367.295 225.632 367.715 224.361 368.556 223.477 cv
369.396 222.592 370.487 222.15 371.828 222.15 cv
372.624 222.15 373.341 222.3 373.98 222.598 cv
cp
383.364 222.181 mo
383.396 222.184 383.468 222.188 383.579 222.194 cv
383.579 224.759 li
383.421 224.742 383.28 224.73 383.157 224.724 cv
383.034 224.718 382.935 224.715 382.858 224.715 cv
381.851 224.715 381.175 225.043 380.829 225.699 cv
380.636 226.068 380.539 226.636 380.539 227.403 cv
380.539 231.98 li
378.018 231.98 li
378.018 222.405 li
380.408 222.405 li
380.408 224.074 li
380.794 223.436 381.131 222.999 381.418 222.765 cv
381.886 222.373 382.495 222.177 383.245 222.177 cv
383.292 222.177 383.331 222.178 383.364 222.181 cv
cp
f
493.72 255.85 mo
760.56 255.85 li
763.874 255.85 766.56 258.536 766.56 261.85 cv
766.56 289.83 li
766.56 293.144 763.874 295.83 760.56 295.83 cv
493.72 295.83 li
490.406 295.83 487.72 293.144 487.72 289.83 cv
487.72 261.85 li
487.72 258.536 490.406 255.85 493.72 255.85 cv
cp
0 0 0 .0327459 cmyk
f
493.72 255.85 mo
760.56 255.85 li
763.874 255.85 766.56 258.536 766.56 261.85 cv
766.56 289.83 li
766.56 293.144 763.874 295.83 760.56 295.83 cv
493.72 295.83 li
490.406 295.83 487.72 293.144 487.72 289.83 cv
487.72 261.85 li
487.72 258.536 490.406 255.85 493.72 255.85 cv
cp
0 0 0 .719265 cmyk
@
511.44 270.103 mo
511.44 279.492 li
514.212 279.492 li
515.631 279.492 516.62 278.792 517.179 277.393 cv
517.485 276.626 517.638 275.711 517.638 274.651 cv
517.638 273.187 517.409 272.063 516.95 271.279 cv
516.491 270.495 515.579 270.103 514.212 270.103 cv
511.44 270.103 li
cp
516.945 267.916 mo
517.953 268.248 518.77 268.857 519.395 269.741 cv
519.896 270.457 520.237 271.231 520.42 272.064 cv
520.602 272.897 520.693 273.691 520.693 274.446 cv
520.693 276.359 520.309 277.979 519.541 279.306 cv
518.5 281.096 516.893 281.99 514.72 281.99 cv
508.522 281.99 li
508.522 267.604 li
514.72 267.604 li
515.611 267.617 516.353 267.721 516.945 267.916 cv
cp
528.593 276.818 mo
528.417 276.928 528.24 277.018 528.061 277.086 cv
527.882 277.154 527.636 277.218 527.324 277.276 cv
526.699 277.393 li
526.114 277.497 525.694 277.624 525.44 277.774 cv
525.011 278.028 524.796 278.421 524.796 278.955 cv
524.796 279.43 524.928 279.773 525.191 279.985 cv
525.455 280.196 525.775 280.302 526.153 280.302 cv
526.751 280.302 527.303 280.126 527.807 279.775 cv
528.311 279.423 528.573 278.783 528.593 277.852 cv
528.593 276.818 li
cp
526.904 275.519 mo
527.418 275.454 527.786 275.373 528.007 275.275 cv
528.404 275.106 528.602 274.843 528.602 274.485 cv
528.602 274.049 528.451 273.748 528.149 273.582 cv
527.846 273.416 527.402 273.333 526.816 273.333 cv
526.159 273.333 525.694 273.496 525.421 273.821 cv
525.225 274.062 525.095 274.387 525.03 274.797 cv
522.346 274.797 li
522.405 273.867 522.665 273.102 523.127 272.504 cv
523.862 271.567 525.125 271.098 526.914 271.098 cv
528.079 271.098 529.113 271.329 530.018 271.791 cv
530.922 272.253 531.374 273.125 531.374 274.407 cv
531.374 279.287 li
531.374 279.625 531.381 280.035 531.394 280.517 cv
531.413 280.881 531.469 281.128 531.56 281.258 cv
531.651 281.388 531.787 281.496 531.97 281.58 cv
531.97 281.99 li
528.944 281.99 li
528.859 281.776 528.801 281.574 528.768 281.385 cv
528.736 281.197 528.71 280.982 528.69 280.741 cv
528.306 281.158 527.864 281.512 527.363 281.805 cv
526.764 282.15 526.088 282.322 525.333 282.322 cv
524.37 282.322 523.574 282.047 522.946 281.497 cv
522.319 280.948 522.005 280.168 522.005 279.16 cv
522.005 277.852 522.509 276.905 523.517 276.32 cv
524.07 276.001 524.884 275.773 525.957 275.637 cv
526.904 275.519 li
cp
532.737 273.431 mo
532.737 271.449 li
534.22 271.449 li
534.22 268.482 li
536.973 268.482 li
536.973 271.449 li
538.7 271.449 li
538.7 273.431 li
536.973 273.431 li
536.973 279.053 li
536.973 279.489 537.028 279.76 537.139 279.868 cv
537.249 279.975 537.588 280.029 538.154 280.029 cv
538.238 280.029 538.328 280.027 538.422 280.024 cv
538.516 280.02 538.609 280.016 538.7 280.009 cv
538.7 282.088 li
537.383 282.137 li
536.068 282.182 535.17 281.955 534.689 281.454 cv
534.376 281.135 534.22 280.643 534.22 279.98 cv
534.22 273.431 li
532.737 273.431 li
cp
546.348 276.818 mo
546.172 276.928 545.995 277.018 545.816 277.086 cv
545.637 277.154 545.392 277.218 545.079 277.276 cv
544.455 277.393 li
543.869 277.497 543.449 277.624 543.196 277.774 cv
542.766 278.028 542.552 278.421 542.552 278.955 cv
542.552 279.43 542.683 279.773 542.947 279.985 cv
543.21 280.196 543.531 280.302 543.908 280.302 cv
544.507 280.302 545.058 280.126 545.563 279.775 cv
546.067 279.423 546.329 278.783 546.348 277.852 cv
546.348 276.818 li
cp
544.66 275.519 mo
545.174 275.454 545.541 275.373 545.763 275.275 cv
546.159 275.106 546.358 274.843 546.358 274.485 cv
546.358 274.049 546.207 273.748 545.904 273.582 cv
545.602 273.416 545.157 273.333 544.572 273.333 cv
543.915 273.333 543.449 273.496 543.176 273.821 cv
542.981 274.062 542.851 274.387 542.786 274.797 cv
540.102 274.797 li
540.16 273.867 540.421 273.102 540.883 272.504 cv
541.618 271.567 542.88 271.098 544.669 271.098 cv
545.834 271.098 546.869 271.329 547.773 271.791 cv
548.678 272.253 549.13 273.125 549.13 274.407 cv
549.13 279.287 li
549.13 279.625 549.136 280.035 549.149 280.517 cv
549.169 280.881 549.224 281.128 549.315 281.258 cv
549.406 281.388 549.543 281.496 549.725 281.58 cv
549.725 281.99 li
546.7 281.99 li
546.615 281.776 546.556 281.574 546.524 281.385 cv
546.491 281.197 546.465 280.982 546.446 280.741 cv
546.062 281.158 545.619 281.512 545.118 281.805 cv
544.52 282.15 543.843 282.322 543.088 282.322 cv
542.125 282.322 541.33 282.047 540.702 281.497 cv
540.074 280.948 539.76 280.168 539.76 279.16 cv
539.76 277.852 540.264 276.905 541.273 276.32 cv
541.826 276.001 542.639 275.773 543.713 275.637 cv
544.66 275.519 li
cp
550.746 275.1 mo
556.348 275.1 li
556.348 277.735 li
550.746 277.735 li
550.746 275.1 li
cp
565.007 274.495 mo
564.632 273.863 564.026 273.548 563.186 273.548 cv
562.178 273.548 561.485 274.026 561.107 274.983 cv
560.912 275.49 560.815 276.134 560.815 276.915 cv
560.815 278.151 561.143 279.02 561.8 279.521 cv
562.191 279.814 562.653 279.96 563.186 279.96 cv
563.961 279.96 564.551 279.661 564.958 279.062 cv
565.364 278.464 565.568 277.667 565.568 276.671 cv
565.568 275.851 565.381 275.126 565.007 274.495 cv
cp
567.144 272.494 mo
568.006 273.411 568.437 274.758 568.437 276.534 cv
568.437 278.408 568.016 279.837 567.173 280.819 cv
566.331 281.802 565.246 282.293 563.918 282.293 cv
563.072 282.293 562.37 282.081 561.81 281.659 cv
561.504 281.424 561.205 281.083 560.912 280.634 cv
560.912 286.177 li
558.16 286.177 li
558.16 271.352 li
560.824 271.352 li
560.824 272.923 li
561.124 272.461 561.443 272.097 561.781 271.83 cv
562.399 271.355 563.134 271.118 563.987 271.118 cv
565.229 271.118 566.282 271.576 567.144 272.494 cv
cp
573.274 281.99 mo
570.493 281.99 li
570.493 267.604 li
573.274 267.604 li
573.274 281.99 li
cp
581.844 276.818 mo
581.668 276.928 581.491 277.018 581.312 277.086 cv
581.133 277.154 580.887 277.218 580.575 277.276 cv
579.95 277.393 li
579.365 277.497 578.945 277.624 578.691 277.774 cv
578.262 278.028 578.047 278.421 578.047 278.955 cv
578.047 279.43 578.179 279.773 578.442 279.985 cv
578.706 280.196 579.026 280.302 579.404 280.302 cv
580.002 280.302 580.554 280.126 581.058 279.775 cv
581.562 279.423 581.824 278.783 581.844 277.852 cv
581.844 276.818 li
cp
580.155 275.519 mo
580.669 275.454 581.037 275.373 581.258 275.275 cv
581.655 275.106 581.853 274.843 581.853 274.485 cv
581.853 274.049 581.702 273.748 581.4 273.582 cv
581.097 273.416 580.653 273.333 580.067 273.333 cv
579.41 273.333 578.945 273.496 578.672 273.821 cv
578.476 274.062 578.346 274.387 578.281 274.797 cv
575.597 274.797 li
575.656 273.867 575.916 273.102 576.378 272.504 cv
577.113 271.567 578.376 271.098 580.165 271.098 cv
581.33 271.098 582.364 271.329 583.269 271.791 cv
584.173 272.253 584.625 273.125 584.625 274.407 cv
584.625 279.287 li
584.625 279.625 584.632 280.035 584.645 280.517 cv
584.664 280.881 584.72 281.128 584.811 281.258 cv
584.902 281.388 585.038 281.496 585.221 281.58 cv
585.221 281.99 li
582.195 281.99 li
582.11 281.776 582.052 281.574 582.019 281.385 cv
581.987 281.197 581.961 280.982 581.941 280.741 cv
581.557 281.158 581.115 281.512 580.614 281.805 cv
580.015 282.15 579.339 282.322 578.584 282.322 cv
577.621 282.322 576.825 282.047 576.197 281.497 cv
575.57 280.948 575.256 280.168 575.256 279.16 cv
575.256 277.852 575.76 276.905 576.768 276.32 cv
577.321 276.001 578.135 275.773 579.208 275.637 cv
580.155 275.519 li
cp
595.675 271.962 mo
596.374 272.538 596.724 273.493 596.724 274.826 cv
596.724 281.99 li
593.874 281.99 li
593.874 275.519 li
593.874 274.96 593.799 274.53 593.649 274.231 cv
593.376 273.685 592.856 273.411 592.088 273.411 cv
591.144 273.411 590.497 273.811 590.146 274.612 cv
589.963 275.035 589.872 275.575 589.872 276.232 cv
589.872 281.99 li
587.1 281.99 li
587.1 271.371 li
589.784 271.371 li
589.784 272.923 li
590.142 272.377 590.481 271.983 590.799 271.742 cv
591.372 271.313 592.098 271.098 592.976 271.098 cv
594.076 271.098 594.975 271.386 595.675 271.962 cv
cp
601.976 273.968 mo
601.621 274.371 601.398 274.918 601.307 275.607 cv
605.631 275.607 li
605.585 274.872 605.363 274.314 604.962 273.933 cv
604.562 273.553 604.066 273.362 603.474 273.362 cv
602.83 273.362 602.33 273.564 601.976 273.968 cv
cp
605.865 271.567 mo
606.574 271.898 607.16 272.422 607.622 273.138 cv
608.038 273.769 608.308 274.501 608.432 275.334 cv
608.504 275.822 608.533 276.525 608.52 277.442 cv
601.239 277.442 li
601.278 278.509 601.613 279.258 602.244 279.687 cv
602.628 279.954 603.09 280.087 603.63 280.087 cv
604.203 280.087 604.668 279.924 605.026 279.599 cv
605.221 279.423 605.393 279.179 605.543 278.867 cv
608.383 278.867 li
608.312 279.498 607.983 280.139 607.398 280.79 cv
606.487 281.824 605.211 282.342 603.572 282.342 cv
602.218 282.342 601.024 281.906 599.99 281.034 cv
598.955 280.162 598.438 278.743 598.438 276.778 cv
598.438 274.937 598.905 273.525 599.838 272.543 cv
600.772 271.56 601.984 271.069 603.474 271.069 cv
604.359 271.069 605.156 271.235 605.865 271.567 cv
cp
618.325 277.55 mo
618.416 278.207 618.595 278.698 618.862 279.023 cv
619.35 279.615 620.186 279.911 621.37 279.911 cv
622.079 279.911 622.655 279.833 623.098 279.677 cv
623.937 279.378 624.357 278.822 624.357 278.008 cv
624.357 277.533 624.148 277.166 623.732 276.905 cv
623.316 276.652 622.662 276.427 621.77 276.232 cv
620.248 275.89 li
618.751 275.552 617.717 275.184 617.144 274.787 cv
616.174 274.124 615.69 273.086 615.69 271.674 cv
615.69 270.386 616.158 269.315 617.095 268.463 cv
618.032 267.611 619.408 267.184 621.224 267.184 cv
622.74 267.184 624.033 267.586 625.103 268.39 cv
626.174 269.193 626.735 270.36 626.787 271.889 cv
623.898 271.889 li
623.846 271.023 623.469 270.408 622.766 270.044 cv
622.297 269.803 621.715 269.683 621.019 269.683 cv
620.244 269.683 619.626 269.839 619.164 270.151 cv
618.702 270.464 618.471 270.9 618.471 271.459 cv
618.471 271.973 618.699 272.357 619.155 272.611 cv
619.447 272.78 620.072 272.979 621.028 273.206 cv
623.508 273.802 li
624.594 274.062 625.414 274.41 625.967 274.846 cv
626.826 275.523 627.255 276.502 627.255 277.784 cv
627.255 279.098 626.753 280.19 625.747 281.058 cv
624.742 281.927 623.322 282.361 621.487 282.361 cv
619.613 282.361 618.139 281.933 617.066 281.078 cv
615.992 280.222 615.455 279.046 615.455 277.55 cv
618.325 277.55 li
cp
631.943 273.968 mo
631.589 274.371 631.366 274.918 631.275 275.607 cv
635.598 275.607 li
635.553 274.872 635.33 274.314 634.93 273.933 cv
634.53 273.553 634.033 273.362 633.441 273.362 cv
632.797 273.362 632.298 273.564 631.943 273.968 cv
cp
635.833 271.567 mo
636.542 271.898 637.127 272.422 637.589 273.138 cv
638.006 273.769 638.276 274.501 638.399 275.334 cv
638.471 275.822 638.5 276.525 638.487 277.442 cv
631.206 277.442 li
631.245 278.509 631.58 279.258 632.212 279.687 cv
632.595 279.954 633.057 280.087 633.598 280.087 cv
634.17 280.087 634.635 279.924 634.993 279.599 cv
635.188 279.423 635.361 279.179 635.51 278.867 cv
638.351 278.867 li
638.279 279.498 637.951 280.139 637.365 280.79 cv
636.454 281.824 635.179 282.342 633.539 282.342 cv
632.186 282.342 630.992 281.906 629.957 281.034 cv
628.922 280.162 628.405 278.743 628.405 276.778 cv
628.405 274.937 628.872 273.525 629.806 272.543 cv
630.739 271.56 631.951 271.069 633.441 271.069 cv
634.326 271.069 635.123 271.235 635.833 271.567 cv
cp
646.257 271.103 mo
646.293 271.106 646.373 271.111 646.496 271.118 cv
646.496 273.968 li
646.321 273.948 646.165 273.935 646.028 273.929 cv
645.891 273.922 645.781 273.919 645.696 273.919 cv
644.577 273.919 643.825 274.283 643.442 275.012 cv
643.227 275.422 643.119 276.053 643.119 276.905 cv
643.119 281.99 li
640.318 281.99 li
640.318 271.352 li
642.973 271.352 li
642.973 273.206 li
643.402 272.497 643.777 272.012 644.095 271.752 cv
644.616 271.316 645.293 271.098 646.126 271.098 cv
646.178 271.098 646.222 271.1 646.257 271.103 cv
cp
654.683 271.352 mo
657.67 271.352 li
653.834 281.99 li
650.896 281.99 li
647.08 271.352 li
650.203 271.352 li
652.419 279.199 li
654.683 271.352 li
cp
662.087 270.083 mo
659.267 270.083 li
659.267 267.516 li
662.087 267.516 li
662.087 270.083 li
cp
659.267 271.352 mo
662.087 271.352 li
662.087 281.99 li
659.267 281.99 li
659.267 271.352 li
cp
671.125 275.168 mo
671.073 274.771 670.94 274.413 670.725 274.094 cv
670.413 273.665 669.928 273.45 669.271 273.45 cv
668.334 273.45 667.693 273.916 667.348 274.846 cv
667.166 275.34 667.075 275.998 667.075 276.818 cv
667.075 277.598 667.166 278.226 667.348 278.701 cv
667.68 279.586 668.304 280.029 669.222 280.029 cv
669.872 280.029 670.334 279.853 670.608 279.502 cv
670.881 279.15 671.047 278.695 671.106 278.135 cv
673.946 278.135 li
673.881 278.981 673.575 279.781 673.028 280.536 cv
672.156 281.753 670.865 282.361 669.154 282.361 cv
667.442 282.361 666.183 281.854 665.376 280.839 cv
664.57 279.824 664.166 278.506 664.166 276.886 cv
664.166 275.057 664.612 273.636 665.503 272.621 cv
666.395 271.606 667.624 271.098 669.193 271.098 cv
670.526 271.098 671.618 271.397 672.467 271.996 cv
673.316 272.595 673.819 273.652 673.975 275.168 cv
671.125 275.168 li
cp
678.573 273.968 mo
678.218 274.371 677.995 274.918 677.904 275.607 cv
682.228 275.607 li
682.183 274.872 681.96 274.314 681.56 273.933 cv
681.159 273.553 680.663 273.362 680.071 273.362 cv
679.427 273.362 678.928 273.564 678.573 273.968 cv
cp
682.462 271.567 mo
683.172 271.898 683.757 272.422 684.219 273.138 cv
684.636 273.769 684.906 274.501 685.029 275.334 cv
685.101 275.822 685.13 276.525 685.117 277.442 cv
677.836 277.442 li
677.875 278.509 678.21 279.258 678.841 279.687 cv
679.225 279.954 679.687 280.087 680.227 280.087 cv
680.8 280.087 681.265 279.924 681.623 279.599 cv
681.818 279.423 681.991 279.179 682.14 278.867 cv
684.98 278.867 li
684.909 279.498 684.58 280.139 683.995 280.79 cv
683.084 281.824 681.808 282.342 680.169 282.342 cv
678.815 282.342 677.621 281.906 676.587 281.034 cv
675.552 280.162 675.035 278.743 675.035 276.778 cv
675.035 274.937 675.502 273.525 676.435 272.543 cv
677.369 271.56 678.581 271.069 680.071 271.069 cv
680.956 271.069 681.753 271.235 682.462 271.567 cv
cp
694.141 269.107 mo
695.313 267.923 696.803 267.331 698.611 267.331 cv
701.032 267.331 702.802 268.125 703.921 269.712 cv
704.539 270.604 704.871 271.498 704.916 272.396 cv
701.91 272.396 li
701.715 271.706 701.465 271.186 701.159 270.835 cv
700.612 270.21 699.802 269.898 698.729 269.898 cv
697.635 269.898 696.773 270.338 696.142 271.22 cv
695.511 272.102 695.195 273.349 695.195 274.963 cv
695.195 276.577 695.529 277.785 696.196 278.589 cv
696.863 279.393 697.71 279.794 698.738 279.794 cv
699.792 279.794 700.596 279.449 701.149 278.76 cv
701.455 278.389 701.709 277.833 701.91 277.091 cv
704.887 277.091 li
704.627 278.659 703.962 279.934 702.891 280.917 cv
701.821 281.899 700.45 282.391 698.777 282.391 cv
696.708 282.391 695.081 281.727 693.897 280.399 cv
692.713 279.066 692.121 277.237 692.121 274.914 cv
692.121 272.403 692.794 270.467 694.141 269.107 cv
cp
714.607 271.42 mo
715.144 271.648 715.585 271.996 715.93 272.465 cv
716.222 272.861 716.401 273.27 716.466 273.689 cv
716.532 274.109 716.564 274.794 716.564 275.744 cv
716.564 281.99 li
713.724 281.99 li
713.724 275.519 li
713.724 274.947 713.626 274.485 713.431 274.133 cv
713.177 273.639 712.696 273.392 711.987 273.392 cv
711.251 273.392 710.693 273.637 710.313 274.129 cv
709.932 274.62 709.742 275.321 709.742 276.232 cv
709.742 281.99 li
706.97 281.99 li
706.97 267.653 li
709.742 267.653 li
709.742 272.738 li
710.145 272.12 710.612 271.689 711.142 271.445 cv
711.673 271.201 712.231 271.079 712.816 271.079 cv
713.473 271.079 714.07 271.192 714.607 271.42 cv
cp
725.012 276.818 mo
724.837 276.928 724.659 277.018 724.481 277.086 cv
724.302 277.154 724.056 277.218 723.744 277.276 cv
723.119 277.393 li
722.533 277.497 722.114 277.624 721.86 277.774 cv
721.43 278.028 721.216 278.421 721.216 278.955 cv
721.216 279.43 721.348 279.773 721.611 279.985 cv
721.875 280.196 722.195 280.302 722.572 280.302 cv
723.171 280.302 723.722 280.126 724.227 279.775 cv
724.731 279.423 724.993 278.783 725.012 277.852 cv
725.012 276.818 li
cp
723.324 275.519 mo
723.838 275.454 724.206 275.373 724.427 275.275 cv
724.824 275.106 725.022 274.843 725.022 274.485 cv
725.022 274.049 724.871 273.748 724.568 273.582 cv
724.266 273.416 723.822 273.333 723.236 273.333 cv
722.579 273.333 722.114 273.496 721.84 273.821 cv
721.645 274.062 721.515 274.387 721.45 274.797 cv
718.766 274.797 li
718.825 273.867 719.085 273.102 719.547 272.504 cv
720.282 271.567 721.544 271.098 723.334 271.098 cv
724.498 271.098 725.533 271.329 726.437 271.791 cv
727.342 272.253 727.794 273.125 727.794 274.407 cv
727.794 279.287 li
727.794 279.625 727.801 280.035 727.814 280.517 cv
727.833 280.881 727.888 281.128 727.979 281.258 cv
728.071 281.388 728.207 281.496 728.389 281.58 cv
728.389 281.99 li
725.364 281.99 li
725.279 281.776 725.221 281.574 725.188 281.385 cv
725.156 281.197 725.13 280.982 725.11 280.741 cv
724.726 281.158 724.284 281.512 723.783 281.805 cv
723.184 282.15 722.507 282.322 721.753 282.322 cv
720.79 282.322 719.994 282.047 719.366 281.497 cv
718.738 280.948 718.424 280.168 718.424 279.16 cv
718.424 277.852 718.929 276.905 719.937 276.32 cv
720.49 276.001 721.304 275.773 722.377 275.637 cv
723.324 275.519 li
cp
733.109 270.083 mo
730.289 270.083 li
730.289 267.516 li
733.109 267.516 li
733.109 270.083 li
cp
730.289 271.352 mo
733.109 271.352 li
733.109 281.99 li
730.289 281.99 li
730.289 271.352 li
cp
744.387 271.962 mo
745.087 272.538 745.436 273.493 745.436 274.826 cv
745.436 281.99 li
742.586 281.99 li
742.586 275.519 li
742.586 274.96 742.512 274.53 742.362 274.231 cv
742.089 273.685 741.568 273.411 740.8 273.411 cv
739.857 273.411 739.209 273.811 738.858 274.612 cv
738.676 275.035 738.585 275.575 738.585 276.232 cv
738.585 281.99 li
735.813 281.99 li
735.813 271.371 li
738.497 271.371 li
738.497 272.923 li
738.855 272.377 739.193 271.983 739.512 271.742 cv
740.085 271.313 740.81 271.098 741.688 271.098 cv
742.788 271.098 743.688 271.386 744.387 271.962 cv
cp
0 0 0 1 cmyk
f
493.72 135.92 mo
760.56 135.92 li
763.874 135.92 766.56 138.606 766.56 141.92 cv
766.56 169.9 li
766.56 173.214 763.874 175.9 760.56 175.9 cv
493.72 175.9 li
490.406 175.9 487.72 173.214 487.72 169.9 cv
487.72 141.92 li
487.72 138.606 490.406 135.92 493.72 135.92 cv
cp
0 0 0 .0327459 cmyk
f
493.72 135.92 mo
760.56 135.92 li
763.874 135.92 766.56 138.606 766.56 141.92 cv
766.56 169.9 li
766.56 173.214 763.874 175.9 760.56 175.9 cv
493.72 175.9 li
490.406 175.9 487.72 173.214 487.72 169.9 cv
487.72 141.92 li
487.72 138.606 490.406 135.92 493.72 135.92 cv
cp
0 0 0 .719265 cmyk
@
495.918 149.107 mo
497.089 147.923 498.579 147.331 500.388 147.331 cv
502.808 147.331 504.578 148.125 505.697 149.712 cv
506.315 150.604 506.647 151.498 506.693 152.396 cv
503.687 152.396 li
503.492 151.706 503.241 151.186 502.935 150.835 cv
502.389 150.21 501.579 149.898 500.505 149.898 cv
499.412 149.898 498.55 150.338 497.919 151.22 cv
497.287 152.102 496.972 153.349 496.972 154.963 cv
496.972 156.577 497.305 157.785 497.972 158.589 cv
498.639 159.393 499.487 159.794 500.515 159.794 cv
501.569 159.794 502.372 159.449 502.925 158.76 cv
503.231 158.389 503.485 157.833 503.687 157.091 cv
506.664 157.091 li
506.403 158.659 505.738 159.934 504.668 160.917 cv
503.597 161.899 502.226 162.391 500.554 162.391 cv
498.485 162.391 496.858 161.727 495.674 160.399 cv
494.489 159.066 493.897 157.237 493.897 154.914 cv
493.897 152.403 494.571 150.467 495.918 149.107 cv
cp
515.373 159.16 mo
515.809 158.581 516.027 157.758 516.027 156.691 cv
516.027 155.624 515.809 154.802 515.373 154.226 cv
514.938 153.65 514.313 153.362 513.5 153.362 cv
512.686 153.362 512.06 153.65 511.621 154.226 cv
511.181 154.802 510.962 155.624 510.962 156.691 cv
510.962 157.758 511.181 158.581 511.621 159.16 cv
512.06 159.739 512.686 160.029 513.5 160.029 cv
514.313 160.029 514.938 159.739 515.373 159.16 cv
cp
517.599 160.697 mo
516.701 161.807 515.338 162.361 513.509 162.361 cv
511.681 162.361 510.318 161.807 509.42 160.697 cv
508.522 159.588 508.073 158.252 508.073 156.691 cv
508.073 155.155 508.522 153.824 509.42 152.699 cv
510.318 151.573 511.681 151.01 513.509 151.01 cv
515.338 151.01 516.701 151.573 517.599 152.699 cv
518.497 153.824 518.946 155.155 518.946 156.691 cv
518.946 158.252 518.497 159.588 517.599 160.697 cv
cp
529.517 151.962 mo
530.216 152.538 530.566 153.493 530.566 154.826 cv
530.566 161.99 li
527.716 161.99 li
527.716 155.519 li
527.716 154.96 527.641 154.53 527.492 154.231 cv
527.218 153.685 526.698 153.411 525.93 153.411 cv
524.987 153.411 524.339 153.811 523.988 154.612 cv
523.806 155.035 523.714 155.575 523.714 156.232 cv
523.714 161.99 li
520.943 161.99 li
520.943 151.371 li
523.627 151.371 li
523.627 152.923 li
523.984 152.377 524.323 151.983 524.642 151.742 cv
525.214 151.313 525.94 151.098 526.818 151.098 cv
527.918 151.098 528.817 151.386 529.517 151.962 cv
cp
532.026 153.431 mo
532.026 151.449 li
533.51 151.449 li
533.51 148.482 li
536.262 148.482 li
536.262 151.449 li
537.99 151.449 li
537.99 153.431 li
536.262 153.431 li
536.262 159.053 li
536.262 159.489 536.317 159.76 536.428 159.868 cv
536.539 159.975 536.877 160.029 537.443 160.029 cv
537.528 160.029 537.617 160.027 537.711 160.024 cv
537.806 160.02 537.898 160.016 537.99 160.009 cv
537.99 162.088 li
536.672 162.137 li
535.358 162.182 534.46 161.955 533.978 161.454 cv
533.666 161.135 533.51 160.643 533.51 159.98 cv
533.51 153.431 li
532.026 153.431 li
cp
545.681 151.103 mo
545.717 151.106 545.797 151.111 545.921 151.118 cv
545.921 153.968 li
545.745 153.948 545.589 153.935 545.452 153.929 cv
545.315 153.922 545.205 153.919 545.12 153.919 cv
544.001 153.919 543.25 154.283 542.866 155.012 cv
542.651 155.422 542.544 156.053 542.544 156.905 cv
542.544 161.99 li
539.742 161.99 li
539.742 151.352 li
542.397 151.352 li
542.397 153.206 li
542.827 152.497 543.201 152.012 543.52 151.752 cv
544.04 151.316 544.717 151.098 545.55 151.098 cv
545.602 151.098 545.646 151.1 545.681 151.103 cv
cp
554.195 159.16 mo
554.631 158.581 554.849 157.758 554.849 156.691 cv
554.849 155.624 554.631 154.802 554.195 154.226 cv
553.759 153.65 553.135 153.362 552.321 153.362 cv
551.508 153.362 550.882 153.65 550.442 154.226 cv
550.003 154.802 549.784 155.624 549.784 156.691 cv
549.784 157.758 550.003 158.581 550.442 159.16 cv
550.882 159.739 551.508 160.029 552.321 160.029 cv
553.135 160.029 553.759 159.739 554.195 159.16 cv
cp
556.42 160.697 mo
555.523 161.807 554.159 162.361 552.331 162.361 cv
550.503 162.361 549.139 161.807 548.242 160.697 cv
547.344 159.588 546.895 158.252 546.895 156.691 cv
546.895 155.155 547.344 153.824 548.242 152.699 cv
549.139 151.573 550.503 151.01 552.331 151.01 cv
554.159 151.01 555.523 151.573 556.42 152.699 cv
557.318 153.824 557.767 155.155 557.767 156.691 cv
557.767 158.252 557.318 159.588 556.42 160.697 cv
cp
562.585 161.99 mo
559.803 161.99 li
559.803 147.604 li
562.585 147.604 li
562.585 161.99 li
cp
564.449 155.1 mo
570.051 155.1 li
570.051 157.735 li
564.449 157.735 li
564.449 155.1 li
cp
578.71 154.495 mo
578.335 153.863 577.729 153.548 576.889 153.548 cv
575.881 153.548 575.188 154.026 574.81 154.983 cv
574.615 155.49 574.518 156.134 574.518 156.915 cv
574.518 158.151 574.846 159.02 575.503 159.521 cv
575.894 159.814 576.356 159.96 576.889 159.96 cv
577.664 159.96 578.254 159.661 578.661 159.062 cv
579.067 158.464 579.271 157.667 579.271 156.671 cv
579.271 155.851 579.084 155.126 578.71 154.495 cv
cp
580.847 152.494 mo
581.709 153.411 582.14 154.758 582.14 156.534 cv
582.14 158.408 581.719 159.837 580.876 160.819 cv
580.034 161.802 578.949 162.293 577.621 162.293 cv
576.775 162.293 576.073 162.081 575.513 161.659 cv
575.207 161.424 574.908 161.083 574.615 160.634 cv
574.615 166.177 li
571.863 166.177 li
571.863 151.352 li
574.527 151.352 li
574.527 152.923 li
574.827 152.461 575.146 152.097 575.484 151.83 cv
576.102 151.355 576.837 151.118 577.69 151.118 cv
578.932 151.118 579.985 151.576 580.847 152.494 cv
cp
586.977 161.99 mo
584.196 161.99 li
584.196 147.604 li
586.977 147.604 li
586.977 161.99 li
cp
595.547 156.818 mo
595.371 156.928 595.194 157.018 595.015 157.086 cv
594.836 157.154 594.59 157.218 594.278 157.276 cv
593.653 157.393 li
593.068 157.497 592.648 157.624 592.394 157.774 cv
591.965 158.028 591.75 158.421 591.75 158.955 cv
591.75 159.43 591.882 159.773 592.145 159.985 cv
592.409 160.196 592.729 160.302 593.107 160.302 cv
593.705 160.302 594.257 160.126 594.761 159.775 cv
595.265 159.423 595.527 158.783 595.547 157.852 cv
595.547 156.818 li
cp
593.858 155.519 mo
594.372 155.454 594.74 155.373 594.961 155.275 cv
595.358 155.106 595.556 154.843 595.556 154.485 cv
595.556 154.049 595.405 153.748 595.103 153.582 cv
594.8 153.416 594.356 153.333 593.77 153.333 cv
593.113 153.333 592.648 153.496 592.375 153.821 cv
592.18 154.062 592.049 154.387 591.984 154.797 cv
589.3 154.797 li
589.359 153.867 589.619 153.102 590.081 152.504 cv
590.816 151.567 592.079 151.098 593.868 151.098 cv
595.033 151.098 596.067 151.329 596.972 151.791 cv
597.876 152.253 598.328 153.125 598.328 154.407 cv
598.328 159.287 li
598.328 159.625 598.335 160.035 598.348 160.517 cv
598.367 160.881 598.423 161.128 598.514 161.258 cv
598.605 161.388 598.742 161.496 598.924 161.58 cv
598.924 161.99 li
595.898 161.99 li
595.813 161.776 595.755 161.574 595.722 161.385 cv
595.69 161.197 595.664 160.982 595.644 160.741 cv
595.26 161.158 594.818 161.512 594.317 161.805 cv
593.718 162.15 593.042 162.322 592.287 162.322 cv
591.324 162.322 590.528 162.047 589.901 161.497 cv
589.273 160.948 588.959 160.168 588.959 159.16 cv
588.959 157.852 589.463 156.905 590.471 156.32 cv
591.025 156.001 591.838 155.773 592.911 155.637 cv
593.858 155.519 li
cp
609.378 151.962 mo
610.077 152.538 610.427 153.493 610.427 154.826 cv
610.427 161.99 li
607.577 161.99 li
607.577 155.519 li
607.577 154.96 607.502 154.53 607.352 154.231 cv
607.079 153.685 606.559 153.411 605.791 153.411 cv
604.847 153.411 604.2 153.811 603.849 154.612 cv
603.666 155.035 603.575 155.575 603.575 156.232 cv
603.575 161.99 li
600.803 161.99 li
600.803 151.371 li
603.487 151.371 li
603.487 152.923 li
603.845 152.377 604.184 151.983 604.503 151.742 cv
605.075 151.313 605.801 151.098 606.679 151.098 cv
607.779 151.098 608.678 151.386 609.378 151.962 cv
cp
615.679 153.968 mo
615.324 154.371 615.101 154.918 615.01 155.607 cv
619.334 155.607 li
619.288 154.872 619.066 154.314 618.665 153.933 cv
618.265 153.553 617.769 153.362 617.177 153.362 cv
616.533 153.362 616.033 153.564 615.679 153.968 cv
cp
619.568 151.567 mo
620.277 151.898 620.863 152.422 621.325 153.138 cv
621.741 153.769 622.011 154.501 622.135 155.334 cv
622.207 155.822 622.236 156.525 622.223 157.442 cv
614.942 157.442 li
614.981 158.509 615.316 159.258 615.947 159.687 cv
616.331 159.954 616.793 160.087 617.333 160.087 cv
617.906 160.087 618.371 159.924 618.729 159.599 cv
618.924 159.423 619.096 159.179 619.246 158.867 cv
622.086 158.867 li
622.015 159.498 621.686 160.139 621.101 160.79 cv
620.19 161.824 618.914 162.342 617.275 162.342 cv
615.921 162.342 614.727 161.906 613.693 161.034 cv
612.658 160.162 612.141 158.743 612.141 156.778 cv
612.141 154.937 612.608 153.525 613.541 152.543 cv
614.475 151.56 615.687 151.069 617.177 151.069 cv
618.062 151.069 618.859 151.235 619.568 151.567 cv
cp
632.028 157.55 mo
632.119 158.207 632.298 158.698 632.565 159.023 cv
633.053 159.615 633.889 159.911 635.073 159.911 cv
635.782 159.911 636.358 159.833 636.801 159.677 cv
637.64 159.378 638.06 158.822 638.06 158.008 cv
638.06 157.533 637.852 157.166 637.435 156.905 cv
637.019 156.652 636.365 156.427 635.473 156.232 cv
633.951 155.89 li
632.454 155.552 631.42 155.184 630.847 154.787 cv
629.878 154.124 629.393 153.086 629.393 151.674 cv
629.393 150.386 629.861 149.315 630.798 148.463 cv
631.735 147.611 633.111 147.184 634.927 147.184 cv
636.443 147.184 637.736 147.586 638.806 148.39 cv
639.877 149.193 640.438 150.36 640.49 151.889 cv
637.601 151.889 li
637.549 151.023 637.172 150.408 636.469 150.044 cv
636 149.803 635.418 149.683 634.722 149.683 cv
633.947 149.683 633.329 149.839 632.867 150.151 cv
632.405 150.464 632.174 150.9 632.174 151.459 cv
632.174 151.973 632.402 152.357 632.858 152.611 cv
633.15 152.78 633.775 152.979 634.732 153.206 cv
637.211 153.802 li
638.297 154.062 639.117 154.41 639.67 154.846 cv
640.529 155.523 640.958 156.502 640.958 157.784 cv
640.958 159.098 640.456 160.19 639.451 161.058 cv
638.445 161.927 637.025 162.361 635.19 162.361 cv
633.316 162.361 631.843 161.933 630.769 161.078 cv
629.695 160.222 629.159 159.046 629.159 157.55 cv
632.028 157.55 li
cp
645.646 153.968 mo
645.292 154.371 645.069 154.918 644.978 155.607 cv
649.301 155.607 li
649.256 154.872 649.033 154.314 648.633 153.933 cv
648.233 153.553 647.737 153.362 647.144 153.362 cv
646.5 153.362 646.001 153.564 645.646 153.968 cv
cp
649.536 151.567 mo
650.245 151.898 650.83 152.422 651.292 153.138 cv
651.709 153.769 651.979 154.501 652.102 155.334 cv
652.174 155.822 652.203 156.525 652.19 157.442 cv
644.909 157.442 li
644.948 158.509 645.283 159.258 645.915 159.687 cv
646.299 159.954 646.76 160.087 647.301 160.087 cv
647.873 160.087 648.338 159.924 648.696 159.599 cv
648.891 159.423 649.064 159.179 649.214 158.867 cv
652.054 158.867 li
651.982 159.498 651.654 160.139 651.068 160.79 cv
650.157 161.824 648.882 162.342 647.242 162.342 cv
645.889 162.342 644.695 161.906 643.66 161.034 cv
642.625 160.162 642.108 158.743 642.108 156.778 cv
642.108 154.937 642.575 153.525 643.509 152.543 cv
644.442 151.56 645.654 151.069 647.144 151.069 cv
648.029 151.069 648.826 151.235 649.536 151.567 cv
cp
659.96 151.103 mo
659.996 151.106 660.076 151.111 660.199 151.118 cv
660.199 153.968 li
660.024 153.948 659.868 153.935 659.731 153.929 cv
659.594 153.922 659.484 153.919 659.399 153.919 cv
658.28 153.919 657.528 154.283 657.145 155.012 cv
656.93 155.422 656.822 156.053 656.822 156.905 cv
656.822 161.99 li
654.021 161.99 li
654.021 151.352 li
656.676 151.352 li
656.676 153.206 li
657.106 152.497 657.48 152.012 657.798 151.752 cv
658.319 151.316 658.996 151.098 659.829 151.098 cv
659.881 151.098 659.925 151.1 659.96 151.103 cv
cp
668.386 151.352 mo
671.373 151.352 li
667.537 161.99 li
664.599 161.99 li
660.783 151.352 li
663.906 151.352 li
666.122 159.199 li
668.386 151.352 li
cp
675.79 150.083 mo
672.97 150.083 li
672.97 147.516 li
675.79 147.516 li
675.79 150.083 li
cp
672.97 151.352 mo
675.79 151.352 li
675.79 161.99 li
672.97 161.99 li
672.97 151.352 li
cp
684.828 155.168 mo
684.776 154.771 684.643 154.413 684.428 154.094 cv
684.116 153.665 683.631 153.45 682.974 153.45 cv
682.037 153.45 681.396 153.916 681.051 154.846 cv
680.869 155.34 680.778 155.998 680.778 156.818 cv
680.778 157.598 680.869 158.226 681.051 158.701 cv
681.383 159.586 682.007 160.029 682.925 160.029 cv
683.576 160.029 684.037 159.853 684.311 159.502 cv
684.584 159.15 684.75 158.695 684.809 158.135 cv
687.649 158.135 li
687.584 158.981 687.278 159.781 686.731 160.536 cv
685.859 161.753 684.568 162.361 682.857 162.361 cv
681.145 162.361 679.886 161.854 679.079 160.839 cv
678.273 159.824 677.869 158.506 677.869 156.886 cv
677.869 155.057 678.315 153.636 679.206 152.621 cv
680.098 151.606 681.327 151.098 682.896 151.098 cv
684.229 151.098 685.321 151.397 686.17 151.996 cv
687.019 152.595 687.522 153.652 687.678 155.168 cv
684.828 155.168 li
cp
692.276 153.968 mo
691.921 154.371 691.698 154.918 691.607 155.607 cv
695.931 155.607 li
695.886 154.872 695.663 154.314 695.263 153.933 cv
694.862 153.553 694.366 153.362 693.774 153.362 cv
693.13 153.362 692.631 153.564 692.276 153.968 cv
cp
696.165 151.567 mo
696.875 151.898 697.46 152.422 697.922 153.138 cv
698.339 153.769 698.609 154.501 698.732 155.334 cv
698.804 155.822 698.833 156.525 698.82 157.442 cv
691.539 157.442 li
691.578 158.509 691.913 159.258 692.544 159.687 cv
692.928 159.954 693.39 160.087 693.93 160.087 cv
694.503 160.087 694.968 159.924 695.326 159.599 cv
695.521 159.423 695.694 159.179 695.843 158.867 cv
698.683 158.867 li
698.612 159.498 698.283 160.139 697.698 160.79 cv
696.787 161.824 695.511 162.342 693.872 162.342 cv
692.518 162.342 691.324 161.906 690.29 161.034 cv
689.255 160.162 688.738 158.743 688.738 156.778 cv
688.738 154.937 689.205 153.525 690.139 152.543 cv
691.072 151.56 692.284 151.069 693.774 151.069 cv
694.659 151.069 695.456 151.235 696.165 151.567 cv
cp
707.844 149.107 mo
709.016 147.923 710.506 147.331 712.314 147.331 cv
714.735 147.331 716.505 148.125 717.624 149.712 cv
718.242 150.604 718.574 151.498 718.619 152.396 cv
715.613 152.396 li
715.418 151.706 715.168 151.186 714.862 150.835 cv
714.315 150.21 713.505 149.898 712.432 149.898 cv
711.338 149.898 710.476 150.338 709.845 151.22 cv
709.214 152.102 708.898 153.349 708.898 154.963 cv
708.898 156.577 709.232 157.785 709.899 158.589 cv
710.566 159.393 711.413 159.794 712.441 159.794 cv
713.495 159.794 714.299 159.449 714.852 158.76 cv
715.158 158.389 715.412 157.833 715.613 157.091 cv
718.59 157.091 li
718.33 158.659 717.665 159.934 716.594 160.917 cv
715.524 161.899 714.153 162.391 712.48 162.391 cv
710.411 162.391 708.785 161.727 707.6 160.399 cv
706.416 159.066 705.824 157.237 705.824 154.914 cv
705.824 152.403 706.497 150.467 707.844 149.107 cv
cp
728.31 151.42 mo
728.847 151.648 729.288 151.996 729.633 152.465 cv
729.926 152.861 730.104 153.27 730.169 153.689 cv
730.235 154.109 730.267 154.794 730.267 155.744 cv
730.267 161.99 li
727.427 161.99 li
727.427 155.519 li
727.427 154.947 727.329 154.485 727.134 154.133 cv
726.88 153.639 726.399 153.392 725.69 153.392 cv
724.954 153.392 724.396 153.637 724.016 154.129 cv
723.635 154.62 723.445 155.321 723.445 156.232 cv
723.445 161.99 li
720.673 161.99 li
720.673 147.653 li
723.445 147.653 li
723.445 152.738 li
723.848 152.12 724.315 151.689 724.845 151.445 cv
725.376 151.201 725.934 151.079 726.519 151.079 cv
727.176 151.079 727.773 151.192 728.31 151.42 cv
cp
738.715 156.818 mo
738.54 156.928 738.362 157.018 738.184 157.086 cv
738.005 157.154 737.759 157.218 737.447 157.276 cv
736.822 157.393 li
736.236 157.497 735.817 157.624 735.563 157.774 cv
735.133 158.028 734.919 158.421 734.919 158.955 cv
734.919 159.43 735.051 159.773 735.314 159.985 cv
735.578 160.196 735.898 160.302 736.275 160.302 cv
736.874 160.302 737.425 160.126 737.93 159.775 cv
738.434 159.423 738.696 158.783 738.715 157.852 cv
738.715 156.818 li
cp
737.027 155.519 mo
737.541 155.454 737.909 155.373 738.13 155.275 cv
738.527 155.106 738.725 154.843 738.725 154.485 cv
738.725 154.049 738.574 153.748 738.271 153.582 cv
737.969 153.416 737.525 153.333 736.939 153.333 cv
736.282 153.333 735.817 153.496 735.543 153.821 cv
735.348 154.062 735.218 154.387 735.153 154.797 cv
732.469 154.797 li
732.528 153.867 732.788 153.102 733.25 152.504 cv
733.985 151.567 735.247 151.098 737.037 151.098 cv
738.201 151.098 739.236 151.329 740.14 151.791 cv
741.045 152.253 741.497 153.125 741.497 154.407 cv
741.497 159.287 li
741.497 159.625 741.504 160.035 741.517 160.517 cv
741.536 160.881 741.591 161.128 741.682 161.258 cv
741.774 161.388 741.91 161.496 742.092 161.58 cv
742.092 161.99 li
739.067 161.99 li
738.982 161.776 738.924 161.574 738.891 161.385 cv
738.859 161.197 738.833 160.982 738.813 160.741 cv
738.429 161.158 737.987 161.512 737.486 161.805 cv
736.887 162.15 736.21 162.322 735.456 162.322 cv
734.493 162.322 733.697 162.047 733.069 161.497 cv
732.441 160.948 732.127 160.168 732.127 159.16 cv
732.127 157.852 732.632 156.905 733.64 156.32 cv
734.193 156.001 735.007 155.773 736.08 155.637 cv
737.027 155.519 li
cp
746.812 150.083 mo
743.992 150.083 li
743.992 147.516 li
746.812 147.516 li
746.812 150.083 li
cp
743.992 151.352 mo
746.812 151.352 li
746.812 161.99 li
743.992 161.99 li
743.992 151.352 li
cp
758.09 151.962 mo
758.79 152.538 759.139 153.493 759.139 154.826 cv
759.139 161.99 li
756.289 161.99 li
756.289 155.519 li
756.289 154.96 756.215 154.53 756.065 154.231 cv
755.792 153.685 755.271 153.411 754.503 153.411 cv
753.56 153.411 752.912 153.811 752.561 154.612 cv
752.379 155.035 752.288 155.575 752.288 156.232 cv
752.288 161.99 li
749.516 161.99 li
749.516 151.371 li
752.2 151.371 li
752.2 152.923 li
752.558 152.377 752.896 151.983 753.215 151.742 cv
753.788 151.313 754.513 151.098 755.392 151.098 cv
756.491 151.098 757.391 151.386 758.09 151.962 cv
cp
0 0 0 1 cmyk
f
4 lw
[3.99773 3.99773 ] 0 dsh
557 176 mo
523.473 202.587 475.13 215.917 411.97 215.99 cv
.0300298 .723232 .546319 .00167849 cmyk
@
404.47 215.99 mo
414.46 210.99 li
411.97 215.99 li
414.47 220.98 li
404.47 215.99 li
cp
f
[] 0 dsh
404.47 215.99 mo
414.46 210.99 li
411.97 215.99 li
414.47 220.98 li
404.47 215.99 li
cp
@
[3.99773 3.99773 ] 0 dsh
557 256 mo
530.14 235.913 481.78 222.917 411.92 217.01 cv
@
404.45 216.38 mo
414.83 212.24 li
411.92 217.01 li
413.99 222.2 li
404.45 216.38 li
cp
f
[] 0 dsh
404.45 216.38 mo
414.83 212.24 li
411.92 217.01 li
413.99 222.2 li
404.45 216.38 li
cp
@
533.484 195.604 mo
535.387 203.842 li
535.797 206.135 li
536.217 203.89 li
537.837 195.604 li
541.009 195.604 li
542.717 203.842 li
543.156 206.135 li
543.595 203.929 li
545.518 195.604 li
548.573 195.604 li
544.522 209.99 li
541.653 209.99 li
539.916 201.577 li
539.408 198.796 li
538.901 201.577 li
537.163 209.99 li
534.372 209.99 li
530.292 195.604 li
533.484 195.604 li
cp
556.808 207.16 mo
557.244 206.581 557.462 205.758 557.462 204.691 cv
557.462 203.624 557.244 202.802 556.808 202.226 cv
556.372 201.65 555.748 201.362 554.935 201.362 cv
554.121 201.362 553.495 201.65 553.056 202.226 cv
552.616 202.802 552.397 203.624 552.397 204.691 cv
552.397 205.758 552.616 206.581 553.056 207.16 cv
553.495 207.739 554.121 208.029 554.935 208.029 cv
555.748 208.029 556.372 207.739 556.808 207.16 cv
cp
559.034 208.697 mo
558.136 209.807 556.773 210.361 554.944 210.361 cv
553.116 210.361 551.753 209.807 550.855 208.697 cv
549.957 207.588 549.508 206.252 549.508 204.691 cv
549.508 203.155 549.957 201.824 550.855 200.699 cv
551.753 199.573 553.116 199.01 554.944 199.01 cv
556.773 199.01 558.136 199.573 559.034 200.699 cv
559.932 201.824 560.381 203.155 560.381 204.691 cv
560.381 206.252 559.932 207.588 559.034 208.697 cv
cp
568.268 199.103 mo
568.304 199.106 568.383 199.111 568.507 199.118 cv
568.507 201.968 li
568.331 201.948 568.175 201.935 568.038 201.929 cv
567.902 201.922 567.791 201.919 567.707 201.919 cv
566.587 201.919 565.836 202.283 565.452 203.012 cv
565.237 203.422 565.13 204.053 565.13 204.905 cv
565.13 209.99 li
562.329 209.99 li
562.329 199.352 li
564.983 199.352 li
564.983 201.206 li
565.413 200.497 565.787 200.012 566.106 199.752 cv
566.626 199.316 567.303 199.098 568.136 199.098 cv
568.188 199.098 568.232 199.1 568.268 199.103 cv
cp
570.106 195.653 mo
572.838 195.653 li
572.838 203.402 li
576.303 199.401 li
579.749 199.401 li
576.03 203.471 li
579.895 209.99 li
576.537 209.99 li
573.99 205.442 li
572.838 206.643 li
572.838 209.99 li
570.106 209.99 li
570.106 195.653 li
cp
584.078 209.99 mo
581.297 209.99 li
581.297 195.604 li
584.078 195.604 li
584.078 209.99 li
cp
593.428 207.16 mo
593.864 206.581 594.082 205.758 594.082 204.691 cv
594.082 203.624 593.864 202.802 593.428 202.226 cv
592.992 201.65 592.368 201.362 591.554 201.362 cv
590.741 201.362 590.115 201.65 589.676 202.226 cv
589.236 202.802 589.017 203.624 589.017 204.691 cv
589.017 205.758 589.236 206.581 589.676 207.16 cv
590.115 207.739 590.741 208.029 591.554 208.029 cv
592.368 208.029 592.992 207.739 593.428 207.16 cv
cp
595.654 208.697 mo
594.756 209.807 593.393 210.361 591.564 210.361 cv
589.736 210.361 588.373 209.807 587.475 208.697 cv
586.577 207.588 586.128 206.252 586.128 204.691 cv
586.128 203.155 586.577 201.824 587.475 200.699 cv
588.373 199.573 589.736 199.01 591.564 199.01 cv
593.393 199.01 594.756 199.573 595.654 200.699 cv
596.552 201.824 597 203.155 597 204.691 cv
597 206.252 596.552 207.588 595.654 208.697 cv
cp
604.844 204.818 mo
604.668 204.928 604.491 205.018 604.312 205.086 cv
604.133 205.154 603.887 205.218 603.575 205.276 cv
602.95 205.393 li
602.365 205.497 601.945 205.624 601.691 205.774 cv
601.262 206.028 601.047 206.421 601.047 206.955 cv
601.047 207.43 601.179 207.773 601.442 207.985 cv
601.706 208.196 602.026 208.302 602.404 208.302 cv
603.002 208.302 603.554 208.126 604.058 207.775 cv
604.562 207.423 604.824 206.783 604.844 205.852 cv
604.844 204.818 li
cp
603.155 203.519 mo
603.669 203.454 604.037 203.373 604.258 203.275 cv
604.655 203.106 604.853 202.843 604.853 202.485 cv
604.853 202.049 604.702 201.748 604.4 201.582 cv
604.097 201.416 603.653 201.333 603.067 201.333 cv
602.41 201.333 601.945 201.496 601.672 201.821 cv
601.476 202.062 601.346 202.387 601.281 202.797 cv
598.597 202.797 li
598.656 201.867 598.916 201.102 599.378 200.504 cv
600.113 199.567 601.376 199.098 603.165 199.098 cv
604.33 199.098 605.364 199.329 606.269 199.791 cv
607.173 200.253 607.625 201.125 607.625 202.407 cv
607.625 207.287 li
607.625 207.625 607.632 208.035 607.645 208.517 cv
607.664 208.881 607.72 209.128 607.811 209.258 cv
607.902 209.388 608.038 209.496 608.221 209.58 cv
608.221 209.99 li
605.195 209.99 li
605.11 209.776 605.052 209.574 605.019 209.385 cv
604.987 209.197 604.961 208.982 604.941 208.741 cv
604.557 209.158 604.115 209.512 603.614 209.805 cv
603.015 210.15 602.339 210.322 601.584 210.322 cv
600.621 210.322 599.825 210.047 599.197 209.497 cv
598.57 208.948 598.256 208.168 598.256 207.16 cv
598.256 205.852 598.76 204.905 599.768 204.32 cv
600.321 204.001 601.135 203.773 602.208 203.637 cv
603.155 203.519 li
cp
615.722 199.523 mo
616.223 199.806 616.63 200.198 616.942 200.699 cv
616.942 195.624 li
619.763 195.624 li
619.763 209.99 li
617.059 209.99 li
617.059 208.517 li
616.662 209.148 616.21 209.606 615.703 209.893 cv
615.195 210.179 614.564 210.322 613.809 210.322 cv
612.567 210.322 611.521 209.82 610.671 208.814 cv
609.822 207.809 609.398 206.519 609.398 204.944 cv
609.398 203.129 609.816 201.701 610.652 200.66 cv
611.488 199.619 612.606 199.098 614.005 199.098 cv
614.649 199.098 615.221 199.24 615.722 199.523 cv
cp
616.405 207.101 mo
616.815 206.516 617.02 205.758 617.02 204.827 cv
617.02 203.526 616.692 202.595 616.035 202.036 cv
615.631 201.698 615.163 201.528 614.629 201.528 cv
613.816 201.528 613.219 201.836 612.838 202.451 cv
612.458 203.066 612.267 203.828 612.267 204.739 cv
612.267 205.722 612.461 206.508 612.848 207.096 cv
613.235 207.685 613.822 207.98 614.61 207.98 cv
615.397 207.98 615.996 207.687 616.405 207.101 cv
cp
0 0 0 1 cmyk
f
534.776 229.536 mo
534.867 230.193 535.046 230.684 535.313 231.01 cv
535.801 231.602 536.637 231.898 537.821 231.898 cv
538.53 231.898 539.106 231.82 539.549 231.664 cv
540.388 231.364 540.808 230.808 540.808 229.995 cv
540.808 229.52 540.6 229.152 540.183 228.892 cv
539.767 228.638 539.113 228.413 538.221 228.218 cv
536.699 227.877 li
535.202 227.538 534.168 227.171 533.595 226.774 cv
532.626 226.11 532.141 225.072 532.141 223.66 cv
532.141 222.372 532.609 221.302 533.546 220.449 cv
534.483 219.597 535.859 219.171 537.675 219.171 cv
539.191 219.171 540.484 219.572 541.554 220.376 cv
542.625 221.18 543.186 222.346 543.238 223.875 cv
540.349 223.875 li
540.297 223.01 539.92 222.395 539.217 222.03 cv
538.748 221.79 538.166 221.669 537.47 221.669 cv
536.695 221.669 536.077 221.825 535.615 222.138 cv
535.153 222.45 534.922 222.886 534.922 223.446 cv
534.922 223.96 535.15 224.344 535.606 224.597 cv
535.898 224.766 536.523 224.965 537.48 225.193 cv
539.959 225.788 li
541.045 226.048 541.865 226.396 542.418 226.832 cv
543.277 227.509 543.706 228.488 543.706 229.77 cv
543.706 231.085 543.204 232.176 542.199 233.045 cv
541.193 233.913 539.773 234.348 537.938 234.348 cv
536.064 234.348 534.591 233.92 533.517 233.064 cv
532.443 232.209 531.907 231.032 531.907 229.536 cv
534.776 229.536 li
cp
544.602 225.417 mo
544.602 223.436 li
546.086 223.436 li
546.086 220.469 li
548.838 220.469 li
548.838 223.436 li
550.566 223.436 li
550.566 225.417 li
548.838 225.417 li
548.838 231.039 li
548.838 231.475 548.894 231.747 549.004 231.854 cv
549.115 231.961 549.453 232.015 550.019 232.015 cv
550.104 232.015 550.193 232.013 550.288 232.01 cv
550.382 232.007 550.475 232.002 550.566 231.995 cv
550.566 234.074 li
549.248 234.123 li
547.934 234.169 547.036 233.941 546.555 233.44 cv
546.242 233.121 546.086 232.63 546.086 231.966 cv
546.086 225.417 li
544.602 225.417 li
cp
558.214 228.804 mo
558.038 228.915 557.861 229.004 557.682 229.072 cv
557.503 229.141 557.257 229.204 556.945 229.263 cv
556.32 229.38 li
555.735 229.484 555.315 229.611 555.061 229.76 cv
554.632 230.014 554.417 230.408 554.417 230.941 cv
554.417 231.416 554.549 231.76 554.813 231.971 cv
555.076 232.183 555.396 232.288 555.774 232.288 cv
556.372 232.288 556.924 232.113 557.428 231.761 cv
557.932 231.41 558.194 230.769 558.214 229.838 cv
558.214 228.804 li
cp
556.525 227.506 mo
557.039 227.441 557.407 227.359 557.628 227.262 cv
558.025 227.093 558.224 226.829 558.224 226.471 cv
558.224 226.035 558.072 225.734 557.77 225.568 cv
557.467 225.403 557.023 225.32 556.438 225.32 cv
555.78 225.32 555.315 225.482 555.042 225.808 cv
554.847 226.048 554.717 226.374 554.651 226.784 cv
551.967 226.784 li
552.026 225.853 552.286 225.089 552.748 224.49 cv
553.484 223.553 554.746 223.084 556.535 223.084 cv
557.7 223.084 558.734 223.315 559.639 223.777 cv
560.543 224.239 560.995 225.111 560.995 226.393 cv
560.995 231.273 li
560.995 231.612 561.002 232.021 561.015 232.503 cv
561.035 232.867 561.09 233.115 561.181 233.245 cv
561.272 233.375 561.409 233.482 561.591 233.567 cv
561.591 233.977 li
558.565 233.977 li
558.481 233.762 558.422 233.56 558.39 233.372 cv
558.357 233.183 558.331 232.968 558.311 232.727 cv
557.928 233.144 557.485 233.499 556.984 233.791 cv
556.385 234.136 555.709 234.309 554.954 234.309 cv
553.991 234.309 553.196 234.034 552.568 233.484 cv
551.94 232.934 551.626 232.155 551.626 231.146 cv
551.626 229.838 552.13 228.892 553.139 228.306 cv
553.692 227.987 554.505 227.76 555.579 227.623 cv
556.525 227.506 li
cp
562.358 225.417 mo
562.358 223.436 li
563.842 223.436 li
563.842 220.469 li
566.594 220.469 li
566.594 223.436 li
568.321 223.436 li
568.321 225.417 li
566.594 225.417 li
566.594 231.039 li
566.594 231.475 566.649 231.747 566.76 231.854 cv
566.87 231.961 567.209 232.015 567.775 232.015 cv
567.859 232.015 567.949 232.013 568.043 232.01 cv
568.138 232.007 568.23 232.002 568.321 231.995 cv
568.321 234.074 li
567.004 234.123 li
565.689 234.169 564.792 233.941 564.31 233.44 cv
563.998 233.121 563.842 232.63 563.842 231.966 cv
563.842 225.417 li
562.358 225.417 li
cp
572.963 222.069 mo
570.143 222.069 li
570.143 219.503 li
572.963 219.503 li
572.963 222.069 li
cp
570.143 223.338 mo
572.963 223.338 li
572.963 233.977 li
570.143 233.977 li
570.143 223.338 li
cp
577.814 230.58 mo
577.873 231.075 578 231.426 578.195 231.634 cv
578.54 232.005 579.177 232.191 580.108 232.191 cv
580.654 232.191 581.089 232.109 581.411 231.947 cv
581.733 231.784 581.894 231.54 581.894 231.215 cv
581.894 230.902 581.764 230.665 581.503 230.502 cv
581.243 230.339 580.277 230.06 578.605 229.663 cv
577.401 229.363 576.552 228.989 576.057 228.54 cv
575.563 228.098 575.315 227.46 575.315 226.627 cv
575.315 225.645 575.701 224.801 576.472 224.095 cv
577.243 223.389 578.328 223.036 579.727 223.036 cv
581.054 223.036 582.136 223.301 582.972 223.831 cv
583.808 224.361 584.288 225.277 584.412 226.579 cv
581.63 226.579 li
581.591 226.221 581.49 225.938 581.328 225.729 cv
581.022 225.352 580.501 225.163 579.766 225.163 cv
579.161 225.163 578.73 225.258 578.473 225.446 cv
578.216 225.635 578.087 225.856 578.087 226.11 cv
578.087 226.429 578.224 226.66 578.497 226.803 cv
578.771 226.953 579.737 227.21 581.396 227.574 cv
582.502 227.834 583.332 228.228 583.885 228.755 cv
584.431 229.289 584.705 229.956 584.705 230.756 cv
584.705 231.81 584.313 232.671 583.529 233.337 cv
582.745 234.004 581.533 234.338 579.893 234.338 cv
578.221 234.338 576.986 233.985 576.189 233.279 cv
575.392 232.573 574.993 231.673 574.993 230.58 cv
577.814 230.58 li
cp
585.657 225.417 mo
585.657 223.436 li
587.141 223.436 li
587.141 220.469 li
589.893 220.469 li
589.893 223.436 li
591.621 223.436 li
591.621 225.417 li
589.893 225.417 li
589.893 231.039 li
589.893 231.475 589.948 231.747 590.059 231.854 cv
590.17 231.961 590.508 232.015 591.074 232.015 cv
591.159 232.015 591.248 232.013 591.343 232.01 cv
591.437 232.007 591.53 232.002 591.621 231.995 cv
591.621 234.074 li
590.303 234.123 li
588.989 234.169 588.091 233.941 587.609 233.44 cv
587.297 233.121 587.141 232.63 587.141 231.966 cv
587.141 225.417 li
585.657 225.417 li
cp
596.263 222.069 mo
593.442 222.069 li
593.442 219.503 li
596.263 219.503 li
596.263 222.069 li
cp
593.442 223.338 mo
596.263 223.338 li
596.263 233.977 li
593.442 233.977 li
593.442 223.338 li
cp
605.3 227.154 mo
605.248 226.758 605.115 226.4 604.9 226.081 cv
604.588 225.651 604.103 225.437 603.446 225.437 cv
602.509 225.437 601.868 225.902 601.523 226.832 cv
601.341 227.327 601.25 227.984 601.25 228.804 cv
601.25 229.585 601.341 230.213 601.523 230.688 cv
601.855 231.573 602.48 232.015 603.397 232.015 cv
604.048 232.015 604.51 231.839 604.783 231.488 cv
605.056 231.137 605.222 230.681 605.281 230.122 cv
608.121 230.122 li
608.056 230.967 607.75 231.768 607.204 232.522 cv
606.332 233.739 605.04 234.348 603.329 234.348 cv
601.618 234.348 600.359 233.84 599.552 232.825 cv
598.745 231.81 598.341 230.492 598.341 228.872 cv
598.341 227.044 598.787 225.622 599.679 224.607 cv
600.57 223.592 601.8 223.084 603.368 223.084 cv
604.702 223.084 605.793 223.384 606.642 223.982 cv
607.492 224.581 607.994 225.638 608.15 227.154 cv
605.3 227.154 li
cp
612.216 230.58 mo
612.275 231.075 612.402 231.426 612.597 231.634 cv
612.942 232.005 613.58 232.191 614.51 232.191 cv
615.057 232.191 615.491 232.109 615.813 231.947 cv
616.135 231.784 616.296 231.54 616.296 231.215 cv
616.296 230.902 616.166 230.665 615.906 230.502 cv
615.646 230.339 614.679 230.06 613.007 229.663 cv
611.803 229.363 610.954 228.989 610.46 228.54 cv
609.965 228.098 609.718 227.46 609.718 226.627 cv
609.718 225.645 610.103 224.801 610.874 224.095 cv
611.646 223.389 612.73 223.036 614.129 223.036 cv
615.457 223.036 616.539 223.301 617.375 223.831 cv
618.211 224.361 618.691 225.277 618.814 226.579 cv
616.033 226.579 li
615.994 226.221 615.893 225.938 615.73 225.729 cv
615.424 225.352 614.904 225.163 614.168 225.163 cv
613.563 225.163 613.132 225.258 612.875 225.446 cv
612.618 225.635 612.49 225.856 612.49 226.11 cv
612.49 226.429 612.626 226.66 612.9 226.803 cv
613.173 226.953 614.139 227.21 615.798 227.574 cv
616.905 227.834 617.734 228.228 618.287 228.755 cv
618.834 229.289 619.107 229.956 619.107 230.756 cv
619.107 231.81 618.715 232.671 617.931 233.337 cv
617.147 234.004 615.935 234.338 614.295 234.338 cv
612.623 234.338 611.388 233.985 610.591 233.279 cv
609.794 232.573 609.396 231.673 609.396 230.58 cv
612.216 230.58 li
cp
f
[11.9932 11.9932 ] 0 dsh
372 176 mo
421.833 122.633 479.75 107.937 545.75 131.91 cv
.494392 .266361 0 0 cmyk
@
552.8 134.47 mo
541.7 135.76 li
545.75 131.91 li
545.11 126.36 li
552.8 134.47 li
cp
f
[] 0 dsh
552.8 134.47 mo
541.7 135.76 li
545.75 131.91 li
545.11 126.36 li
552.8 134.47 li
cp
@
[11.9932 11.9932 ] 0 dsh
372 256 mo
415.167 315.867 473.15 330.727 545.95 300.58 cv
@
552.87 297.71 mo
545.55 306.15 li
545.95 300.58 li
541.72 296.92 li
552.87 297.71 li
cp
f
[] 0 dsh
552.87 297.71 mo
545.55 306.15 li
545.95 300.58 li
541.72 296.92 li
552.87 297.71 li
cp
@
445.66 335.55 mo
445.752 336.207 445.93 336.698 446.197 337.023 cv
446.685 337.615 447.521 337.911 448.706 337.911 cv
449.415 337.911 449.991 337.833 450.433 337.677 cv
451.273 337.378 451.692 336.822 451.692 336.008 cv
451.692 335.533 451.484 335.166 451.068 334.905 cv
450.651 334.652 449.997 334.427 449.106 334.232 cv
447.583 333.89 li
446.087 333.552 445.052 333.184 444.479 332.787 cv
443.51 332.124 443.025 331.086 443.025 329.674 cv
443.025 328.386 443.494 327.315 444.431 326.463 cv
445.368 325.611 446.744 325.184 448.559 325.184 cv
450.075 325.184 451.368 325.586 452.439 326.39 cv
453.509 327.193 454.07 328.36 454.122 329.889 cv
451.233 329.889 li
451.181 329.023 450.804 328.408 450.101 328.044 cv
449.633 327.803 449.05 327.683 448.354 327.683 cv
447.58 327.683 446.962 327.839 446.5 328.151 cv
446.038 328.464 445.807 328.9 445.807 329.459 cv
445.807 329.973 446.035 330.357 446.49 330.611 cv
446.783 330.78 447.408 330.979 448.364 331.206 cv
450.843 331.802 li
451.93 332.062 452.75 332.41 453.303 332.846 cv
454.161 333.523 454.591 334.502 454.591 335.784 cv
454.591 337.098 454.088 338.19 453.083 339.058 cv
452.078 339.927 450.658 340.361 448.823 340.361 cv
446.949 340.361 445.475 339.933 444.401 339.078 cv
443.328 338.222 442.791 337.046 442.791 335.55 cv
445.66 335.55 li
cp
462.934 333.168 mo
462.882 332.771 462.748 332.413 462.534 332.094 cv
462.221 331.665 461.737 331.45 461.079 331.45 cv
460.142 331.45 459.502 331.916 459.157 332.846 cv
458.975 333.34 458.883 333.998 458.883 334.818 cv
458.883 335.598 458.975 336.226 459.157 336.701 cv
459.489 337.586 460.113 338.029 461.031 338.029 cv
461.681 338.029 462.143 337.853 462.417 337.502 cv
462.69 337.15 462.856 336.695 462.914 336.135 cv
465.755 336.135 li
465.689 336.981 465.384 337.781 464.837 338.536 cv
463.965 339.753 462.674 340.361 460.962 340.361 cv
459.251 340.361 457.992 339.854 457.185 338.839 cv
456.378 337.824 455.975 336.506 455.975 334.886 cv
455.975 333.057 456.421 331.636 457.312 330.621 cv
458.203 329.606 459.433 329.098 461.001 329.098 cv
462.335 329.098 463.427 329.397 464.276 329.996 cv
465.125 330.595 465.628 331.652 465.784 333.168 cv
462.934 333.168 li
cp
473.549 334.818 mo
473.373 334.928 473.196 335.018 473.017 335.086 cv
472.838 335.154 472.592 335.218 472.28 335.276 cv
471.655 335.393 li
471.07 335.497 470.65 335.624 470.396 335.774 cv
469.967 336.028 469.752 336.421 469.752 336.955 cv
469.752 337.43 469.884 337.773 470.148 337.985 cv
470.411 338.196 470.732 338.302 471.109 338.302 cv
471.708 338.302 472.259 338.126 472.763 337.775 cv
473.268 337.423 473.529 336.783 473.549 335.852 cv
473.549 334.818 li
cp
471.86 333.519 mo
472.374 333.454 472.742 333.373 472.963 333.275 cv
473.36 333.106 473.559 332.843 473.559 332.485 cv
473.559 332.049 473.407 331.748 473.105 331.582 cv
472.802 331.416 472.358 331.333 471.773 331.333 cv
471.115 331.333 470.65 331.496 470.377 331.821 cv
470.182 332.062 470.052 332.387 469.987 332.797 cv
467.302 332.797 li
467.361 331.867 467.621 331.102 468.083 330.504 cv
468.819 329.567 470.081 329.098 471.87 329.098 cv
473.035 329.098 474.069 329.329 474.974 329.791 cv
475.878 330.253 476.331 331.125 476.331 332.407 cv
476.331 337.287 li
476.331 337.625 476.337 338.035 476.35 338.517 cv
476.37 338.881 476.425 339.128 476.516 339.258 cv
476.607 339.388 476.744 339.496 476.926 339.58 cv
476.926 339.99 li
473.9 339.99 li
473.816 339.776 473.757 339.574 473.725 339.385 cv
473.692 339.197 473.666 338.982 473.647 338.741 cv
473.263 339.158 472.82 339.512 472.319 339.805 cv
471.721 340.15 471.044 340.322 470.289 340.322 cv
469.326 340.322 468.531 340.047 467.903 339.497 cv
467.275 338.948 466.961 338.168 466.961 337.16 cv
466.961 335.852 467.465 334.905 468.474 334.32 cv
469.027 334.001 469.84 333.773 470.914 333.637 cv
471.86 333.519 li
cp
481.626 339.99 mo
478.845 339.99 li
478.845 325.604 li
481.626 325.604 li
481.626 339.99 li
cp
487.19 328.083 mo
484.369 328.083 li
484.369 325.516 li
487.19 325.516 li
487.19 328.083 li
cp
484.369 329.352 mo
487.19 329.352 li
487.19 339.99 li
484.369 339.99 li
484.369 329.352 li
cp
498.467 329.962 mo
499.167 330.538 499.517 331.493 499.517 332.826 cv
499.517 339.99 li
496.667 339.99 li
496.667 333.519 li
496.667 332.96 496.592 332.53 496.442 332.231 cv
496.169 331.685 495.648 331.411 494.881 331.411 cv
493.937 331.411 493.29 331.811 492.938 332.612 cv
492.756 333.035 492.665 333.575 492.665 334.232 cv
492.665 339.99 li
489.893 339.99 li
489.893 329.371 li
492.577 329.371 li
492.577 330.923 li
492.935 330.377 493.273 329.983 493.592 329.742 cv
494.165 329.313 494.89 329.098 495.769 329.098 cv
496.868 329.098 497.768 329.386 498.467 329.962 cv
cp
508.287 336.97 mo
508.736 336.478 508.96 335.696 508.96 334.622 cv
508.96 333.614 508.747 332.846 508.321 332.319 cv
507.895 331.792 507.324 331.528 506.608 331.528 cv
505.632 331.528 504.959 331.987 504.588 332.905 cv
504.393 333.393 504.295 333.994 504.295 334.71 cv
504.295 335.328 504.399 335.878 504.607 336.36 cv
504.985 337.258 505.662 337.706 506.638 337.706 cv
507.288 337.706 507.838 337.461 508.287 336.97 cv
cp
507.34 329.342 mo
508.017 329.622 508.564 330.136 508.98 330.884 cv
508.98 329.352 li
511.684 329.352 li
511.684 339.444 li
511.684 340.817 511.453 341.851 510.991 342.547 cv
510.197 343.745 508.674 344.343 506.423 344.343 cv
505.063 344.343 503.954 344.077 503.095 343.543 cv
502.236 343.009 501.761 342.212 501.67 341.152 cv
504.695 341.152 li
504.773 341.477 504.9 341.711 505.076 341.855 cv
505.375 342.108 505.88 342.235 506.589 342.235 cv
507.591 342.235 508.261 341.9 508.599 341.23 cv
508.821 340.8 508.931 340.078 508.931 339.063 cv
508.931 338.38 li
508.664 338.835 508.378 339.177 508.072 339.405 cv
507.519 339.828 506.8 340.039 505.915 340.039 cv
504.549 340.039 503.457 339.559 502.641 338.6 cv
501.824 337.64 501.416 336.34 501.416 334.7 cv
501.416 333.119 501.81 331.79 502.597 330.713 cv
503.384 329.637 504.5 329.098 505.945 329.098 cv
506.478 329.098 506.943 329.179 507.34 329.342 cv
cp
0 0 0 1 cmyk
f
442.16 352.138 mo
434.548 352.138 li
434.548 355.193 li
441.536 355.193 li
441.536 357.691 li
434.548 357.691 li
434.548 361.39 li
442.512 361.39 li
442.512 363.977 li
431.61 363.977 li
431.61 349.59 li
442.16 349.59 li
442.16 352.138 li
cp
443.574 363.977 mo
447.204 358.589 li
443.73 353.358 li
447.136 353.358 li
448.913 356.442 li
450.65 353.358 li
453.958 353.358 li
450.464 358.54 li
454.095 363.977 li
450.63 363.977 li
448.795 360.785 li
446.951 363.977 li
443.574 363.977 li
cp
458.42 355.954 mo
458.065 356.357 457.842 356.904 457.751 357.594 cv
462.075 357.594 li
462.029 356.858 461.807 356.3 461.406 355.92 cv
461.006 355.539 460.51 355.349 459.918 355.349 cv
459.274 355.349 458.774 355.551 458.42 355.954 cv
cp
462.309 353.553 mo
463.018 353.885 463.604 354.409 464.066 355.124 cv
464.482 355.755 464.753 356.488 464.876 357.32 cv
464.948 357.808 464.977 358.511 464.964 359.429 cv
457.683 359.429 li
457.722 360.496 458.057 361.244 458.688 361.673 cv
459.072 361.94 459.534 362.074 460.074 362.074 cv
460.647 362.074 461.112 361.911 461.47 361.586 cv
461.665 361.41 461.837 361.166 461.987 360.854 cv
464.827 360.854 li
464.756 361.485 464.427 362.126 463.842 362.776 cv
462.931 363.811 461.655 364.328 460.016 364.328 cv
458.662 364.328 457.468 363.892 456.434 363.02 cv
455.399 362.148 454.882 360.73 454.882 358.765 cv
454.882 356.923 455.349 355.512 456.282 354.529 cv
457.216 353.546 458.428 353.055 459.918 353.055 cv
460.803 353.055 461.6 353.221 462.309 353.553 cv
cp
473.178 357.154 mo
473.126 356.758 472.993 356.4 472.778 356.081 cv
472.466 355.651 471.981 355.437 471.324 355.437 cv
470.387 355.437 469.746 355.902 469.401 356.832 cv
469.219 357.327 469.128 357.984 469.128 358.804 cv
469.128 359.585 469.219 360.213 469.401 360.688 cv
469.733 361.573 470.357 362.015 471.275 362.015 cv
471.926 362.015 472.387 361.839 472.661 361.488 cv
472.934 361.137 473.1 360.681 473.159 360.122 cv
475.999 360.122 li
475.934 360.967 475.628 361.768 475.081 362.522 cv
474.209 363.739 472.918 364.348 471.207 364.348 cv
469.495 364.348 468.236 363.84 467.429 362.825 cv
466.623 361.81 466.219 360.492 466.219 358.872 cv
466.219 357.044 466.665 355.622 467.556 354.607 cv
468.448 353.592 469.677 353.085 471.246 353.085 cv
472.579 353.085 473.671 353.384 474.52 353.982 cv
475.369 354.581 475.872 355.638 476.028 357.154 cv
473.178 357.154 li
cp
480.699 353.338 mo
480.699 359.751 li
480.699 360.356 480.771 360.811 480.914 361.117 cv
481.168 361.657 481.665 361.927 482.407 361.927 cv
483.357 361.927 484.008 361.543 484.359 360.775 cv
484.541 360.359 484.632 359.809 484.632 359.126 cv
484.632 353.338 li
487.453 353.338 li
487.453 363.977 li
484.75 363.977 li
484.75 362.474 li
484.724 362.506 484.659 362.604 484.554 362.766 cv
484.45 362.929 484.327 363.072 484.184 363.196 cv
483.748 363.586 483.326 363.853 482.92 363.996 cv
482.513 364.139 482.036 364.211 481.49 364.211 cv
479.915 364.211 478.855 363.645 478.308 362.513 cv
478.002 361.888 477.849 360.967 477.849 359.751 cv
477.849 353.338 li
480.699 353.338 li
cp
489.03 355.417 mo
489.03 353.436 li
490.514 353.436 li
490.514 350.469 li
493.266 350.469 li
493.266 353.436 li
494.994 353.436 li
494.994 355.417 li
493.266 355.417 li
493.266 361.039 li
493.266 361.475 493.322 361.747 493.432 361.854 cv
493.543 361.961 493.881 362.015 494.447 362.015 cv
494.532 362.015 494.621 362.013 494.716 362.01 cv
494.81 362.007 494.903 362.002 494.994 361.995 cv
494.994 364.074 li
493.676 364.123 li
492.362 364.169 491.464 363.941 490.982 363.44 cv
490.67 363.121 490.514 362.63 490.514 361.966 cv
490.514 355.417 li
489.03 355.417 li
cp
499.636 352.069 mo
496.815 352.069 li
496.815 349.503 li
499.636 349.503 li
499.636 352.069 li
cp
496.815 353.338 mo
499.636 353.338 li
499.636 363.977 li
496.815 363.977 li
496.815 353.338 li
cp
508.966 361.146 mo
509.402 360.567 509.62 359.744 509.62 358.677 cv
509.62 357.61 509.402 356.788 508.966 356.213 cv
508.53 355.637 507.906 355.349 507.092 355.349 cv
506.279 355.349 505.653 355.637 505.214 356.213 cv
504.774 356.788 504.555 357.61 504.555 358.677 cv
504.555 359.744 504.774 360.567 505.214 361.146 cv
505.653 361.725 506.279 362.015 507.092 362.015 cv
507.906 362.015 508.53 361.725 508.966 361.146 cv
cp
511.192 362.684 mo
510.294 363.793 508.931 364.348 507.102 364.348 cv
505.274 364.348 503.911 363.793 503.013 362.684 cv
502.115 361.574 501.666 360.239 501.666 358.677 cv
501.666 357.141 502.115 355.811 503.013 354.685 cv
503.911 353.559 505.274 352.997 507.102 352.997 cv
508.931 352.997 510.294 353.559 511.192 354.685 cv
512.09 355.811 512.539 357.141 512.539 358.677 cv
512.539 360.239 512.09 361.574 511.192 362.684 cv
cp
523.11 353.948 mo
523.809 354.524 524.159 355.479 524.159 356.813 cv
524.159 363.977 li
521.309 363.977 li
521.309 357.506 li
521.309 356.946 521.234 356.517 521.084 356.217 cv
520.811 355.671 520.291 355.398 519.523 355.398 cv
518.579 355.398 517.932 355.798 517.581 356.598 cv
517.398 357.021 517.307 357.561 517.307 358.218 cv
517.307 363.977 li
514.535 363.977 li
514.535 353.358 li
517.219 353.358 li
517.219 354.91 li
517.577 354.363 517.916 353.969 518.234 353.729 cv
518.807 353.299 519.533 353.085 520.411 353.085 cv
521.511 353.085 522.41 353.372 523.11 353.948 cv
cp
f
669.44 100.103 mo
669.44 109.492 li
672.212 109.492 li
673.631 109.492 674.62 108.792 675.179 107.393 cv
675.485 106.626 675.638 105.711 675.638 104.651 cv
675.638 103.187 675.409 102.063 674.95 101.279 cv
674.491 100.495 673.579 100.103 672.212 100.103 cv
669.44 100.103 li
cp
674.945 97.9163 mo
675.953 98.2482 676.77 98.8565 677.395 99.7414 cv
677.896 100.457 678.237 101.231 678.42 102.064 cv
678.602 102.897 678.693 103.691 678.693 104.446 cv
678.693 106.359 678.309 107.979 677.541 109.306 cv
676.5 111.096 674.893 111.99 672.72 111.99 cv
666.522 111.99 li
666.522 97.604 li
672.72 97.604 li
673.611 97.617 674.353 97.7211 674.945 97.9163 cv
cp
686.593 106.818 mo
686.417 106.928 686.24 107.018 686.061 107.086 cv
685.882 107.154 685.636 107.218 685.324 107.276 cv
684.699 107.393 li
684.114 107.497 683.694 107.624 683.44 107.774 cv
683.011 108.028 682.796 108.421 682.796 108.955 cv
682.796 109.43 682.928 109.773 683.191 109.985 cv
683.455 110.196 683.775 110.302 684.153 110.302 cv
684.751 110.302 685.303 110.126 685.807 109.775 cv
686.311 109.423 686.573 108.783 686.593 107.852 cv
686.593 106.818 li
cp
684.904 105.519 mo
685.418 105.454 685.786 105.373 686.007 105.275 cv
686.404 105.106 686.602 104.843 686.602 104.485 cv
686.602 104.049 686.451 103.748 686.149 103.582 cv
685.846 103.416 685.402 103.333 684.816 103.333 cv
684.159 103.333 683.694 103.496 683.421 103.821 cv
683.225 104.062 683.095 104.387 683.03 104.797 cv
680.346 104.797 li
680.405 103.867 680.665 103.102 681.127 102.504 cv
681.862 101.567 683.125 101.098 684.914 101.098 cv
686.079 101.098 687.113 101.329 688.018 101.791 cv
688.922 102.253 689.374 103.125 689.374 104.407 cv
689.374 109.287 li
689.374 109.625 689.381 110.035 689.394 110.517 cv
689.413 110.881 689.469 111.128 689.56 111.258 cv
689.651 111.388 689.787 111.496 689.97 111.58 cv
689.97 111.99 li
686.944 111.99 li
686.859 111.776 686.801 111.574 686.768 111.385 cv
686.736 111.197 686.71 110.982 686.69 110.741 cv
686.306 111.157 685.864 111.512 685.363 111.805 cv
684.764 112.15 684.088 112.322 683.333 112.322 cv
682.37 112.322 681.574 112.047 680.946 111.497 cv
680.319 110.948 680.005 110.168 680.005 109.16 cv
680.005 107.852 680.509 106.905 681.517 106.32 cv
682.07 106.001 682.884 105.773 683.957 105.637 cv
684.904 105.519 li
cp
690.737 103.431 mo
690.737 101.449 li
692.22 101.449 li
692.22 98.4824 li
694.973 98.4824 li
694.973 101.449 li
696.7 101.449 li
696.7 103.431 li
694.973 103.431 li
694.973 109.053 li
694.973 109.489 695.028 109.76 695.139 109.868 cv
695.249 109.975 695.588 110.029 696.154 110.029 cv
696.238 110.029 696.328 110.027 696.422 110.024 cv
696.516 110.02 696.609 110.016 696.7 110.009 cv
696.7 112.088 li
695.383 112.137 li
694.068 112.182 693.17 111.955 692.689 111.454 cv
692.376 111.135 692.22 110.643 692.22 109.98 cv
692.22 103.431 li
690.737 103.431 li
cp
704.348 106.818 mo
704.172 106.928 703.995 107.018 703.816 107.086 cv
703.637 107.154 703.392 107.218 703.079 107.276 cv
702.455 107.393 li
701.869 107.497 701.449 107.624 701.196 107.774 cv
700.766 108.028 700.552 108.421 700.552 108.955 cv
700.552 109.43 700.683 109.773 700.947 109.985 cv
701.21 110.196 701.531 110.302 701.908 110.302 cv
702.507 110.302 703.058 110.126 703.563 109.775 cv
704.067 109.423 704.329 108.783 704.348 107.852 cv
704.348 106.818 li
cp
702.66 105.519 mo
703.174 105.454 703.541 105.373 703.763 105.275 cv
704.159 105.106 704.358 104.843 704.358 104.485 cv
704.358 104.049 704.207 103.748 703.904 103.582 cv
703.602 103.416 703.157 103.333 702.572 103.333 cv
701.915 103.333 701.449 103.496 701.176 103.821 cv
700.981 104.062 700.851 104.387 700.786 104.797 cv
698.102 104.797 li
698.16 103.867 698.421 103.102 698.883 102.504 cv
699.618 101.567 700.88 101.098 702.669 101.098 cv
703.834 101.098 704.869 101.329 705.773 101.791 cv
706.678 102.253 707.13 103.125 707.13 104.407 cv
707.13 109.287 li
707.13 109.625 707.136 110.035 707.149 110.517 cv
707.169 110.881 707.224 111.128 707.315 111.258 cv
707.406 111.388 707.543 111.496 707.725 111.58 cv
707.725 111.99 li
704.7 111.99 li
704.615 111.776 704.556 111.574 704.524 111.385 cv
704.491 111.197 704.465 110.982 704.446 110.741 cv
704.062 111.157 703.619 111.512 703.118 111.805 cv
702.52 112.15 701.843 112.322 701.088 112.322 cv
700.125 112.322 699.33 112.047 698.702 111.497 cv
698.074 110.948 697.76 110.168 697.76 109.16 cv
697.76 107.852 698.264 106.905 699.273 106.32 cv
699.826 106.001 700.639 105.773 701.713 105.637 cv
702.66 105.519 li
cp
715.939 105.168 mo
715.887 104.771 715.754 104.413 715.539 104.094 cv
715.227 103.665 714.742 103.45 714.085 103.45 cv
713.148 103.45 712.507 103.916 712.162 104.846 cv
711.98 105.34 711.889 105.998 711.889 106.818 cv
711.889 107.598 711.98 108.226 712.162 108.701 cv
712.494 109.586 713.119 110.029 714.036 110.029 cv
714.687 110.029 715.149 109.853 715.422 109.502 cv
715.695 109.15 715.861 108.695 715.92 108.135 cv
718.76 108.135 li
718.695 108.981 718.389 109.781 717.842 110.536 cv
716.971 111.753 715.679 112.361 713.968 112.361 cv
712.256 112.361 710.997 111.854 710.191 110.839 cv
709.384 109.824 708.98 108.506 708.98 106.886 cv
708.98 105.057 709.426 103.636 710.317 102.621 cv
711.209 101.606 712.439 101.098 714.007 101.098 cv
715.341 101.098 716.432 101.397 717.281 101.996 cv
718.13 102.595 718.633 103.652 718.789 105.168 cv
715.939 105.168 li
cp
723.387 103.968 mo
723.033 104.371 722.81 104.918 722.719 105.607 cv
727.042 105.607 li
726.997 104.872 726.774 104.314 726.374 103.933 cv
725.974 103.553 725.477 103.362 724.885 103.362 cv
724.241 103.362 723.742 103.564 723.387 103.968 cv
cp
727.277 101.567 mo
727.986 101.898 728.571 102.422 729.033 103.138 cv
729.45 103.769 729.72 104.501 729.844 105.334 cv
729.915 105.822 729.944 106.525 729.931 107.442 cv
722.65 107.442 li
722.689 108.509 723.024 109.258 723.656 109.687 cv
724.039 109.954 724.501 110.087 725.042 110.087 cv
725.614 110.087 726.079 109.924 726.437 109.599 cv
726.632 109.423 726.805 109.179 726.955 108.867 cv
729.795 108.867 li
729.723 109.498 729.395 110.139 728.809 110.79 cv
727.898 111.824 726.623 112.342 724.983 112.342 cv
723.63 112.342 722.436 111.906 721.401 111.034 cv
720.366 110.162 719.849 108.743 719.849 106.778 cv
719.849 104.937 720.316 103.525 721.25 102.543 cv
722.183 101.56 723.395 101.069 724.885 101.069 cv
725.77 101.069 726.567 101.235 727.277 101.567 cv
cp
740.385 101.962 mo
741.085 102.538 741.435 103.493 741.435 104.826 cv
741.435 111.99 li
738.585 111.99 li
738.585 105.519 li
738.585 104.96 738.51 104.53 738.36 104.231 cv
738.087 103.685 737.566 103.411 736.799 103.411 cv
735.855 103.411 735.208 103.811 734.856 104.612 cv
734.674 105.035 734.583 105.575 734.583 106.232 cv
734.583 111.99 li
731.811 111.99 li
731.811 101.371 li
734.495 101.371 li
734.495 102.923 li
734.853 102.377 735.191 101.983 735.51 101.742 cv
736.083 101.313 736.808 101.098 737.687 101.098 cv
738.786 101.098 739.686 101.386 740.385 101.962 cv
cp
742.895 103.431 mo
742.895 101.449 li
744.378 101.449 li
744.378 98.4824 li
747.131 98.4824 li
747.131 101.449 li
748.858 101.449 li
748.858 103.431 li
747.131 103.431 li
747.131 109.053 li
747.131 109.489 747.186 109.76 747.296 109.868 cv
747.407 109.975 747.745 110.029 748.312 110.029 cv
748.396 110.029 748.486 110.027 748.58 110.024 cv
748.674 110.02 748.767 110.016 748.858 110.009 cv
748.858 112.088 li
747.54 112.137 li
746.226 112.182 745.328 111.955 744.847 111.454 cv
744.534 111.135 744.378 110.643 744.378 109.98 cv
744.378 103.431 li
742.895 103.431 li
cp
753.339 103.968 mo
752.984 104.371 752.761 104.918 752.67 105.607 cv
756.994 105.607 li
756.949 104.872 756.726 104.314 756.326 103.933 cv
755.925 103.553 755.429 103.362 754.837 103.362 cv
754.193 103.362 753.694 103.564 753.339 103.968 cv
cp
757.228 101.567 mo
757.938 101.898 758.523 102.422 758.985 103.138 cv
759.402 103.769 759.672 104.501 759.795 105.334 cv
759.867 105.822 759.896 106.525 759.883 107.442 cv
752.602 107.442 li
752.641 108.509 752.976 109.258 753.607 109.687 cv
753.991 109.954 754.453 110.087 754.993 110.087 cv
755.566 110.087 756.031 109.924 756.389 109.599 cv
756.584 109.423 756.757 109.179 756.906 108.867 cv
759.746 108.867 li
759.675 109.498 759.346 110.139 758.761 110.79 cv
757.85 111.824 756.574 112.342 754.935 112.342 cv
753.581 112.342 752.387 111.906 751.353 111.034 cv
750.318 110.162 749.801 108.743 749.801 106.778 cv
749.801 104.937 750.268 103.525 751.201 102.543 cv
752.135 101.56 753.347 101.069 754.837 101.069 cv
755.722 101.069 756.519 101.235 757.228 101.567 cv
cp
767.653 101.103 mo
767.689 101.106 767.769 101.111 767.892 101.118 cv
767.892 103.968 li
767.717 103.948 767.56 103.935 767.424 103.929 cv
767.287 103.922 767.176 103.919 767.092 103.919 cv
765.973 103.919 765.221 104.283 764.837 105.012 cv
764.623 105.422 764.515 106.053 764.515 106.905 cv
764.515 111.99 li
761.714 111.99 li
761.714 101.352 li
764.369 101.352 li
764.369 103.206 li
764.798 102.497 765.172 102.012 765.491 101.752 cv
766.012 101.316 766.688 101.098 767.521 101.098 cv
767.573 101.098 767.617 101.1 767.653 101.103 cv
cp
f
709.44 55.1026 mo
709.44 64.4918 li
712.212 64.4918 li
713.631 64.4918 714.62 63.7923 715.179 62.3934 cv
715.485 61.6256 715.638 60.7114 715.638 59.6508 cv
715.638 58.1868 715.409 57.0627 714.95 56.2787 cv
714.491 55.4946 713.579 55.1026 712.212 55.1026 cv
709.44 55.1026 li
cp
714.945 52.9163 mo
715.953 53.2482 716.77 53.8565 717.395 54.7415 cv
717.896 55.4572 718.237 56.2315 718.42 57.0644 cv
718.602 57.8972 718.693 58.691 718.693 59.4458 cv
718.693 61.3588 718.309 62.979 717.541 64.3063 cv
716.5 66.0957 714.893 66.9904 712.72 66.9904 cv
706.522 66.9904 li
706.522 52.604 li
712.72 52.604 li
713.611 52.617 714.353 52.7211 714.945 52.9163 cv
cp
726.593 61.8175 mo
726.417 61.9281 726.24 62.0176 726.061 62.0859 cv
725.882 62.1542 725.636 62.2177 725.324 62.2762 cv
724.699 62.3934 li
724.114 62.4975 723.694 62.6243 723.44 62.774 cv
723.011 63.0278 722.796 63.4214 722.796 63.955 cv
722.796 64.43 722.928 64.7732 723.191 64.9847 cv
723.455 65.1961 723.775 65.3019 724.153 65.3019 cv
724.751 65.3019 725.303 65.1262 725.807 64.7748 cv
726.311 64.4235 726.573 63.7825 726.593 62.8521 cv
726.593 61.8175 li
cp
724.904 60.5194 mo
725.418 60.4544 725.786 60.373 726.007 60.2754 cv
726.404 60.1062 726.602 59.8427 726.602 59.4849 cv
726.602 59.0489 726.451 58.748 726.149 58.582 cv
725.846 58.4161 725.402 58.3332 724.816 58.3332 cv
724.159 58.3332 723.694 58.4958 723.421 58.8212 cv
723.225 59.0619 723.095 59.3872 723.03 59.7972 cv
720.346 59.7972 li
720.405 58.8667 720.665 58.1022 721.127 57.5036 cv
721.862 56.5666 723.125 56.0981 724.914 56.0981 cv
726.079 56.0981 727.113 56.3291 728.018 56.7911 cv
728.922 57.253 729.374 58.1249 729.374 59.4068 cv
729.374 64.2868 li
729.374 64.6252 729.381 65.0351 729.394 65.5166 cv
729.413 65.881 729.469 66.1282 729.56 66.2584 cv
729.651 66.3885 729.787 66.4958 729.97 66.5804 cv
729.97 66.9904 li
726.944 66.9904 li
726.859 66.7756 726.801 66.5739 726.768 66.3852 cv
726.736 66.1965 726.71 65.9818 726.69 65.7411 cv
726.306 66.1575 725.864 66.5121 725.363 66.8049 cv
724.764 67.1498 724.088 67.3222 723.333 67.3222 cv
722.37 67.3222 721.574 67.0473 720.946 66.4975 cv
720.319 65.9477 720.005 65.1685 720.005 64.1599 cv
720.005 62.8521 720.509 61.9054 721.517 61.3197 cv
722.07 61.0009 722.884 60.7732 723.957 60.6365 cv
724.904 60.5194 li
cp
730.737 58.4308 mo
730.737 56.4495 li
732.22 56.4495 li
732.22 53.4824 li
734.973 53.4824 li
734.973 56.4495 li
736.7 56.4495 li
736.7 58.4308 li
734.973 58.4308 li
734.973 64.0526 li
734.973 64.4885 735.028 64.7602 735.139 64.8675 cv
735.249 64.9749 735.588 65.0286 736.154 65.0286 cv
736.238 65.0286 736.328 65.027 736.422 65.0237 cv
736.516 65.0204 736.609 65.0156 736.7 65.0091 cv
736.7 67.088 li
735.383 67.1368 li
734.068 67.1823 733.17 66.9546 732.689 66.4536 cv
732.376 66.1347 732.22 65.6435 732.22 64.9798 cv
732.22 58.4308 li
730.737 58.4308 li
cp
744.348 61.8175 mo
744.172 61.9281 743.995 62.0176 743.816 62.0859 cv
743.637 62.1542 743.392 62.2177 743.079 62.2762 cv
742.455 62.3934 li
741.869 62.4975 741.449 62.6243 741.196 62.774 cv
740.766 63.0278 740.552 63.4214 740.552 63.955 cv
740.552 64.43 740.683 64.7732 740.947 64.9847 cv
741.21 65.1961 741.531 65.3019 741.908 65.3019 cv
742.507 65.3019 743.058 65.1262 743.563 64.7748 cv
744.067 64.4235 744.329 63.7825 744.348 62.8521 cv
744.348 61.8175 li
cp
742.66 60.5194 mo
743.174 60.4544 743.541 60.373 743.763 60.2754 cv
744.159 60.1062 744.358 59.8427 744.358 59.4849 cv
744.358 59.0489 744.207 58.748 743.904 58.582 cv
743.602 58.4161 743.157 58.3332 742.572 58.3332 cv
741.915 58.3332 741.449 58.4958 741.176 58.8212 cv
740.981 59.0619 740.851 59.3872 740.786 59.7972 cv
738.102 59.7972 li
738.16 58.8667 738.421 58.1022 738.883 57.5036 cv
739.618 56.5666 740.88 56.0981 742.669 56.0981 cv
743.834 56.0981 744.869 56.3291 745.773 56.7911 cv
746.678 57.253 747.13 58.1249 747.13 59.4068 cv
747.13 64.2868 li
747.13 64.6252 747.136 65.0351 747.149 65.5166 cv
747.169 65.881 747.224 66.1282 747.315 66.2584 cv
747.406 66.3885 747.543 66.4958 747.725 66.5804 cv
747.725 66.9904 li
744.7 66.9904 li
744.615 66.7756 744.556 66.5739 744.524 66.3852 cv
744.491 66.1965 744.465 65.9818 744.446 65.7411 cv
744.062 66.1575 743.619 66.5121 743.118 66.8049 cv
742.52 67.1498 741.843 67.3222 741.088 67.3222 cv
740.125 67.3222 739.33 67.0473 738.702 66.4975 cv
738.074 65.9477 737.76 65.1685 737.76 64.1599 cv
737.76 62.8521 738.264 61.9054 739.273 61.3197 cv
739.826 61.0009 740.639 60.7732 741.713 60.6365 cv
742.66 60.5194 li
cp
755.939 60.1681 mo
755.887 59.7711 755.754 59.4133 755.539 59.0944 cv
755.227 58.665 754.742 58.4503 754.085 58.4503 cv
753.148 58.4503 752.507 58.9155 752.162 59.846 cv
751.98 60.3405 751.889 60.9977 751.889 61.8175 cv
751.889 62.5983 751.98 63.2262 752.162 63.7012 cv
752.494 64.5861 753.119 65.0286 754.036 65.0286 cv
754.687 65.0286 755.149 64.8529 755.422 64.5015 cv
755.695 64.1502 755.861 63.6947 755.92 63.1351 cv
758.76 63.1351 li
758.695 63.981 758.389 64.7813 757.842 65.5361 cv
756.971 66.7529 755.679 67.3612 753.968 67.3612 cv
752.256 67.3612 750.997 66.8537 750.191 65.8387 cv
749.384 64.8236 748.98 63.506 748.98 61.8858 cv
748.98 60.0574 749.426 58.6357 750.317 57.6207 cv
751.209 56.6056 752.439 56.0981 754.007 56.0981 cv
755.341 56.0981 756.432 56.3974 757.281 56.996 cv
758.13 57.5946 758.633 58.652 758.789 60.1681 cv
755.939 60.1681 li
cp
763.387 58.9676 mo
763.033 59.371 762.81 59.9175 762.719 60.6073 cv
767.042 60.6073 li
766.997 59.872 766.774 59.314 766.374 58.9334 cv
765.974 58.5528 765.477 58.3624 764.885 58.3624 cv
764.241 58.3624 763.742 58.5642 763.387 58.9676 cv
cp
767.277 56.5666 mo
767.986 56.8984 768.571 57.4222 769.033 58.138 cv
769.45 58.7691 769.72 59.5011 769.844 60.334 cv
769.915 60.822 769.944 61.5247 769.931 62.4422 cv
762.65 62.4422 li
762.689 63.5093 763.024 64.2575 763.656 64.687 cv
764.039 64.9538 764.501 65.0871 765.042 65.0871 cv
765.614 65.0871 766.079 64.9245 766.437 64.5991 cv
766.632 64.4235 766.805 64.1795 766.955 63.8671 cv
769.795 63.8671 li
769.723 64.4983 769.395 65.1392 768.809 65.7899 cv
767.898 66.8244 766.623 67.3417 764.983 67.3417 cv
763.63 67.3417 762.436 66.9058 761.401 66.0339 cv
760.366 65.162 759.849 63.7435 759.849 61.7785 cv
759.849 59.9371 760.316 58.5251 761.25 57.5426 cv
762.183 56.5601 763.395 56.0688 764.885 56.0688 cv
765.77 56.0688 766.567 56.2347 767.277 56.5666 cv
cp
780.385 56.9619 mo
781.085 57.5377 781.435 58.4926 781.435 59.8265 cv
781.435 66.9904 li
778.585 66.9904 li
778.585 60.5194 li
778.585 59.9598 778.51 59.5304 778.36 59.2311 cv
778.087 58.6845 777.566 58.4112 776.799 58.4112 cv
775.855 58.4112 775.208 58.8114 774.856 59.6117 cv
774.674 60.0347 774.583 60.5747 774.583 61.2319 cv
774.583 66.9904 li
771.811 66.9904 li
771.811 56.3714 li
774.495 56.3714 li
774.495 57.9232 li
774.853 57.3767 775.191 56.983 775.51 56.7423 cv
776.083 56.3128 776.808 56.0981 777.687 56.0981 cv
778.786 56.0981 779.686 56.386 780.385 56.9619 cv
cp
782.895 58.4308 mo
782.895 56.4495 li
784.378 56.4495 li
784.378 53.4824 li
787.131 53.4824 li
787.131 56.4495 li
788.858 56.4495 li
788.858 58.4308 li
787.131 58.4308 li
787.131 64.0526 li
787.131 64.4885 787.186 64.7602 787.296 64.8675 cv
787.407 64.9749 787.745 65.0286 788.312 65.0286 cv
788.396 65.0286 788.486 65.027 788.58 65.0237 cv
788.674 65.0204 788.767 65.0156 788.858 65.0091 cv
788.858 67.088 li
787.54 67.1368 li
786.226 67.1823 785.328 66.9546 784.847 66.4536 cv
784.534 66.1347 784.378 65.6435 784.378 64.9798 cv
784.378 58.4308 li
782.895 58.4308 li
cp
793.339 58.9676 mo
792.984 59.371 792.761 59.9175 792.67 60.6073 cv
796.994 60.6073 li
796.949 59.872 796.726 59.314 796.326 58.9334 cv
795.925 58.5528 795.429 58.3624 794.837 58.3624 cv
794.193 58.3624 793.694 58.5642 793.339 58.9676 cv
cp
797.228 56.5666 mo
797.938 56.8984 798.523 57.4222 798.985 58.138 cv
799.402 58.7691 799.672 59.5011 799.795 60.334 cv
799.867 60.822 799.896 61.5247 799.883 62.4422 cv
792.602 62.4422 li
792.641 63.5093 792.976 64.2575 793.607 64.687 cv
793.991 64.9538 794.453 65.0871 794.993 65.0871 cv
795.566 65.0871 796.031 64.9245 796.389 64.5991 cv
796.584 64.4235 796.757 64.1795 796.906 63.8671 cv
799.746 63.8671 li
799.675 64.4983 799.346 65.1392 798.761 65.7899 cv
797.85 66.8244 796.574 67.3417 794.935 67.3417 cv
793.581 67.3417 792.387 66.9058 791.353 66.0339 cv
790.318 65.162 789.801 63.7435 789.801 61.7785 cv
789.801 59.9371 790.268 58.5251 791.201 57.5426 cv
792.135 56.5601 793.347 56.0688 794.837 56.0688 cv
795.722 56.0688 796.519 56.2347 797.228 56.5666 cv
cp
807.653 56.103 mo
807.689 56.1062 807.769 56.1111 807.892 56.1176 cv
807.892 58.9676 li
807.717 58.948 807.56 58.935 807.424 58.9285 cv
807.287 58.922 807.176 58.9188 807.092 58.9188 cv
805.973 58.9188 805.221 59.2831 804.837 60.0119 cv
804.623 60.4218 804.515 61.053 804.515 61.9054 cv
804.515 66.9904 li
801.714 66.9904 li
801.714 56.3519 li
804.369 56.3519 li
804.369 58.2063 li
804.798 57.497 805.172 57.0123 805.491 56.752 cv
806.012 56.3161 806.688 56.0981 807.521 56.0981 cv
807.573 56.0981 807.617 56.0997 807.653 56.103 cv
cp
f
762.44 15.1026 mo
762.44 24.4918 li
765.212 24.4918 li
766.631 24.4918 767.62 23.7923 768.179 22.3934 cv
768.485 21.6256 768.638 20.7114 768.638 19.6508 cv
768.638 18.1868 768.409 17.0627 767.95 16.2787 cv
767.491 15.4946 766.579 15.1026 765.212 15.1026 cv
762.44 15.1026 li
cp
767.945 12.9163 mo
768.953 13.2482 769.77 13.8565 770.395 14.7414 cv
770.896 15.4572 771.237 16.2315 771.42 17.0644 cv
771.602 17.8972 771.693 18.691 771.693 19.4458 cv
771.693 21.3588 771.309 22.979 770.541 24.3063 cv
769.5 26.0957 767.893 26.9904 765.72 26.9904 cv
759.522 26.9904 li
759.522 12.604 li
765.72 12.604 li
766.611 12.617 767.353 12.7211 767.945 12.9163 cv
cp
779.593 21.8175 mo
779.417 21.9281 779.24 22.0176 779.061 22.0859 cv
778.882 22.1542 778.636 22.2177 778.324 22.2762 cv
777.699 22.3934 li
777.114 22.4975 776.694 22.6243 776.44 22.774 cv
776.011 23.0278 775.796 23.4214 775.796 23.955 cv
775.796 24.43 775.928 24.7732 776.191 24.9847 cv
776.455 25.1961 776.775 25.3019 777.153 25.3019 cv
777.751 25.3019 778.303 25.1262 778.807 24.7748 cv
779.311 24.4235 779.573 23.7825 779.593 22.8521 cv
779.593 21.8175 li
cp
777.904 20.5194 mo
778.418 20.4544 778.786 20.373 779.007 20.2754 cv
779.404 20.1062 779.602 19.8427 779.602 19.4849 cv
779.602 19.0489 779.451 18.748 779.149 18.582 cv
778.846 18.4161 778.402 18.3332 777.816 18.3332 cv
777.159 18.3332 776.694 18.4958 776.421 18.8212 cv
776.225 19.0619 776.095 19.3873 776.03 19.7972 cv
773.346 19.7972 li
773.405 18.8667 773.665 18.1022 774.127 17.5036 cv
774.862 16.5666 776.125 16.0981 777.914 16.0981 cv
779.079 16.0981 780.113 16.3291 781.018 16.7911 cv
781.922 17.253 782.374 18.1249 782.374 19.4068 cv
782.374 24.2868 li
782.374 24.6252 782.381 25.0351 782.394 25.5166 cv
782.413 25.881 782.469 26.1282 782.56 26.2584 cv
782.651 26.3885 782.787 26.4958 782.97 26.5804 cv
782.97 26.9904 li
779.944 26.9904 li
779.859 26.7756 779.801 26.5739 779.768 26.3852 cv
779.736 26.1965 779.71 25.9818 779.69 25.7411 cv
779.306 26.1575 778.864 26.5121 778.363 26.8049 cv
777.764 27.1498 777.088 27.3222 776.333 27.3222 cv
775.37 27.3222 774.574 27.0473 773.946 26.4975 cv
773.319 25.9477 773.005 25.1685 773.005 24.1599 cv
773.005 22.8521 773.509 21.9054 774.517 21.3197 cv
775.07 21.0009 775.884 20.7732 776.957 20.6365 cv
777.904 20.5194 li
cp
783.737 18.4308 mo
783.737 16.4495 li
785.22 16.4495 li
785.22 13.4824 li
787.973 13.4824 li
787.973 16.4495 li
789.7 16.4495 li
789.7 18.4308 li
787.973 18.4308 li
787.973 24.0526 li
787.973 24.4885 788.028 24.7602 788.139 24.8675 cv
788.249 24.9749 788.588 25.0286 789.154 25.0286 cv
789.238 25.0286 789.328 25.027 789.422 25.0237 cv
789.516 25.0204 789.609 25.0156 789.7 25.0091 cv
789.7 27.088 li
788.383 27.1368 li
787.068 27.1823 786.17 26.9546 785.689 26.4536 cv
785.376 26.1347 785.22 25.6435 785.22 24.9798 cv
785.22 18.4308 li
783.737 18.4308 li
cp
797.348 21.8175 mo
797.172 21.9281 796.995 22.0176 796.816 22.0859 cv
796.637 22.1542 796.392 22.2177 796.079 22.2762 cv
795.455 22.3934 li
794.869 22.4975 794.449 22.6243 794.196 22.774 cv
793.766 23.0278 793.552 23.4214 793.552 23.955 cv
793.552 24.43 793.683 24.7732 793.947 24.9847 cv
794.21 25.1961 794.531 25.3019 794.908 25.3019 cv
795.507 25.3019 796.058 25.1262 796.563 24.7748 cv
797.067 24.4235 797.329 23.7825 797.348 22.8521 cv
797.348 21.8175 li
cp
795.66 20.5194 mo
796.174 20.4544 796.541 20.373 796.763 20.2754 cv
797.159 20.1062 797.358 19.8427 797.358 19.4849 cv
797.358 19.0489 797.207 18.748 796.904 18.582 cv
796.602 18.4161 796.157 18.3332 795.572 18.3332 cv
794.915 18.3332 794.449 18.4958 794.176 18.8212 cv
793.981 19.0619 793.851 19.3873 793.786 19.7972 cv
791.102 19.7972 li
791.16 18.8667 791.421 18.1022 791.883 17.5036 cv
792.618 16.5666 793.88 16.0981 795.669 16.0981 cv
796.834 16.0981 797.869 16.3291 798.773 16.7911 cv
799.678 17.253 800.13 18.1249 800.13 19.4068 cv
800.13 24.2868 li
800.13 24.6252 800.136 25.0351 800.149 25.5166 cv
800.169 25.881 800.224 26.1282 800.315 26.2584 cv
800.406 26.3885 800.543 26.4958 800.725 26.5804 cv
800.725 26.9904 li
797.7 26.9904 li
797.615 26.7756 797.556 26.5739 797.524 26.3852 cv
797.491 26.1965 797.465 25.9818 797.446 25.7411 cv
797.062 26.1575 796.619 26.5121 796.118 26.8049 cv
795.52 27.1498 794.843 27.3222 794.088 27.3222 cv
793.125 27.3222 792.33 27.0473 791.702 26.4975 cv
791.074 25.9477 790.76 25.1685 790.76 24.1599 cv
790.76 22.8521 791.264 21.9054 792.273 21.3197 cv
792.826 21.0009 793.639 20.7732 794.713 20.6365 cv
795.66 20.5194 li
cp
808.939 20.1681 mo
808.887 19.7711 808.754 19.4133 808.539 19.0944 cv
808.227 18.665 807.742 18.4503 807.085 18.4503 cv
806.148 18.4503 805.507 18.9155 805.162 19.846 cv
804.98 20.3405 804.889 20.9977 804.889 21.8175 cv
804.889 22.5983 804.98 23.2262 805.162 23.7012 cv
805.494 24.5861 806.119 25.0286 807.036 25.0286 cv
807.687 25.0286 808.149 24.8529 808.422 24.5015 cv
808.695 24.1502 808.861 23.6947 808.92 23.1351 cv
811.76 23.1351 li
811.695 23.981 811.389 24.7813 810.842 25.5361 cv
809.971 26.7529 808.679 27.3612 806.968 27.3612 cv
805.256 27.3612 803.997 26.8537 803.191 25.8387 cv
802.384 24.8236 801.98 23.506 801.98 21.8858 cv
801.98 20.0574 802.426 18.6357 803.317 17.6207 cv
804.209 16.6056 805.439 16.0981 807.007 16.0981 cv
808.341 16.0981 809.432 16.3974 810.281 16.996 cv
811.13 17.5946 811.633 18.652 811.789 20.1681 cv
808.939 20.1681 li
cp
816.387 18.9676 mo
816.033 19.371 815.81 19.9175 815.719 20.6073 cv
820.042 20.6073 li
819.997 19.872 819.774 19.3141 819.374 18.9334 cv
818.974 18.5528 818.477 18.3624 817.885 18.3624 cv
817.241 18.3624 816.742 18.5641 816.387 18.9676 cv
cp
820.277 16.5666 mo
820.986 16.8984 821.571 17.4222 822.033 18.138 cv
822.45 18.7691 822.72 19.5011 822.844 20.334 cv
822.915 20.822 822.944 21.5247 822.931 22.4422 cv
815.65 22.4422 li
815.689 23.5093 816.024 24.2575 816.656 24.687 cv
817.039 24.9538 817.501 25.0871 818.042 25.0871 cv
818.614 25.0871 819.079 24.9245 819.437 24.5991 cv
819.632 24.4235 819.805 24.1795 819.955 23.8671 cv
822.795 23.8671 li
822.723 24.4983 822.395 25.1392 821.809 25.7899 cv
820.898 26.8244 819.623 27.3417 817.983 27.3417 cv
816.63 27.3417 815.436 26.9058 814.401 26.0339 cv
813.366 25.162 812.849 23.7435 812.849 21.7785 cv
812.849 19.9371 813.316 18.5251 814.25 17.5426 cv
815.183 16.5601 816.395 16.0688 817.885 16.0688 cv
818.77 16.0688 819.567 16.2347 820.277 16.5666 cv
cp
833.385 16.9619 mo
834.085 17.5377 834.435 18.4926 834.435 19.8265 cv
834.435 26.9904 li
831.585 26.9904 li
831.585 20.5194 li
831.585 19.9598 831.51 19.5304 831.36 19.2311 cv
831.087 18.6845 830.566 18.4112 829.799 18.4112 cv
828.855 18.4112 828.208 18.8114 827.856 19.6117 cv
827.674 20.0347 827.583 20.5747 827.583 21.2319 cv
827.583 26.9904 li
824.811 26.9904 li
824.811 16.3714 li
827.495 16.3714 li
827.495 17.9232 li
827.853 17.3767 828.191 16.983 828.51 16.7423 cv
829.083 16.3128 829.808 16.0981 830.687 16.0981 cv
831.786 16.0981 832.686 16.386 833.385 16.9619 cv
cp
835.895 18.4308 mo
835.895 16.4495 li
837.378 16.4495 li
837.378 13.4824 li
840.131 13.4824 li
840.131 16.4495 li
841.858 16.4495 li
841.858 18.4308 li
840.131 18.4308 li
840.131 24.0526 li
840.131 24.4885 840.186 24.7602 840.296 24.8675 cv
840.407 24.9749 840.745 25.0286 841.312 25.0286 cv
841.396 25.0286 841.486 25.027 841.58 25.0237 cv
841.674 25.0204 841.767 25.0156 841.858 25.0091 cv
841.858 27.088 li
840.54 27.1368 li
839.226 27.1823 838.328 26.9546 837.847 26.4536 cv
837.534 26.1347 837.378 25.6435 837.378 24.9798 cv
837.378 18.4308 li
835.895 18.4308 li
cp
846.339 18.9676 mo
845.984 19.371 845.761 19.9175 845.67 20.6073 cv
849.994 20.6073 li
849.949 19.872 849.726 19.3141 849.326 18.9334 cv
848.925 18.5528 848.429 18.3624 847.837 18.3624 cv
847.193 18.3624 846.694 18.5641 846.339 18.9676 cv
cp
850.228 16.5666 mo
850.938 16.8984 851.523 17.4222 851.985 18.138 cv
852.402 18.7691 852.672 19.5011 852.795 20.334 cv
852.867 20.822 852.896 21.5247 852.883 22.4422 cv
845.602 22.4422 li
845.641 23.5093 845.976 24.2575 846.607 24.687 cv
846.991 24.9538 847.453 25.0871 847.993 25.0871 cv
848.566 25.0871 849.031 24.9245 849.389 24.5991 cv
849.584 24.4235 849.757 24.1795 849.906 23.8671 cv
852.746 23.8671 li
852.675 24.4983 852.346 25.1392 851.761 25.7899 cv
850.85 26.8244 849.574 27.3417 847.935 27.3417 cv
846.581 27.3417 845.387 26.9058 844.353 26.0339 cv
843.318 25.162 842.801 23.7435 842.801 21.7785 cv
842.801 19.9371 843.268 18.5251 844.201 17.5426 cv
845.135 16.5601 846.347 16.0688 847.837 16.0688 cv
848.722 16.0688 849.519 16.2347 850.228 16.5666 cv
cp
860.653 16.103 mo
860.689 16.1062 860.769 16.1111 860.892 16.1176 cv
860.892 18.9676 li
860.717 18.948 860.56 18.935 860.424 18.9285 cv
860.287 18.922 860.176 18.9188 860.092 18.9188 cv
858.973 18.9188 858.221 19.2831 857.837 20.0119 cv
857.623 20.4218 857.515 21.053 857.515 21.9054 cv
857.515 26.9904 li
854.714 26.9904 li
854.714 16.3519 li
857.369 16.3519 li
857.369 18.2063 li
857.798 17.497 858.172 17.0123 858.491 16.752 cv
859.012 16.3161 859.688 16.0981 860.521 16.0981 cv
860.573 16.0981 860.617 16.0997 860.653 16.103 cv
cp
f
[3.99773 3.99773 ] 0 dsh
260 298 mo
239.913 293.22 210.367 279.55 171.36 256.99 cv
.0300298 .723232 .546319 .00167849 cmyk
@
164.87 253.24 mo
176.02 253.92 li
171.36 256.99 li
171.02 262.57 li
164.87 253.24 li
cp
f
[] 0 dsh
164.87 253.24 mo
176.02 253.92 li
171.36 256.99 li
171.02 262.57 li
164.87 253.24 li
cp
@
111.935 288.604 mo
113.838 296.841 li
114.248 299.135 li
114.668 296.89 li
116.288 288.604 li
119.46 288.604 li
121.168 296.841 li
121.607 299.135 li
122.046 296.929 li
123.969 288.604 li
127.024 288.604 li
122.974 302.99 li
120.104 302.99 li
118.367 294.577 li
117.859 291.796 li
117.352 294.577 li
115.615 302.99 li
112.823 302.99 li
108.743 288.604 li
111.935 288.604 li
cp
135.26 300.16 mo
135.696 299.581 135.914 298.758 135.914 297.691 cv
135.914 296.624 135.696 295.802 135.26 295.226 cv
134.824 294.65 134.199 294.362 133.386 294.362 cv
132.572 294.362 131.946 294.65 131.507 295.226 cv
131.068 295.802 130.848 296.624 130.848 297.691 cv
130.848 298.758 131.068 299.581 131.507 300.16 cv
131.946 300.739 132.572 301.029 133.386 301.029 cv
134.199 301.029 134.824 300.739 135.26 300.16 cv
cp
137.485 301.697 mo
136.587 302.807 135.224 303.361 133.395 303.361 cv
131.567 303.361 130.204 302.807 129.306 301.697 cv
128.408 300.588 127.959 299.252 127.959 297.691 cv
127.959 296.155 128.408 294.824 129.306 293.699 cv
130.204 292.573 131.567 292.01 133.395 292.01 cv
135.224 292.01 136.587 292.573 137.485 293.699 cv
138.383 294.824 138.832 296.155 138.832 297.691 cv
138.832 299.252 138.383 300.588 137.485 301.697 cv
cp
146.719 292.103 mo
146.755 292.106 146.834 292.111 146.958 292.118 cv
146.958 294.968 li
146.782 294.948 146.626 294.935 146.49 294.929 cv
146.353 294.922 146.242 294.919 146.158 294.919 cv
145.039 294.919 144.287 295.283 143.903 296.012 cv
143.688 296.422 143.581 297.053 143.581 297.905 cv
143.581 302.99 li
140.78 302.99 li
140.78 292.352 li
143.435 292.352 li
143.435 294.206 li
143.864 293.497 144.238 293.012 144.557 292.752 cv
145.078 292.316 145.754 292.098 146.587 292.098 cv
146.639 292.098 146.683 292.1 146.719 292.103 cv
cp
148.557 288.653 mo
151.29 288.653 li
151.29 296.402 li
154.754 292.401 li
158.2 292.401 li
154.481 296.471 li
158.346 302.99 li
154.989 302.99 li
152.441 298.442 li
151.29 299.643 li
151.29 302.99 li
148.557 302.99 li
148.557 288.653 li
cp
162.529 302.99 mo
159.748 302.99 li
159.748 288.604 li
162.529 288.604 li
162.529 302.99 li
cp
171.879 300.16 mo
172.315 299.581 172.533 298.758 172.533 297.691 cv
172.533 296.624 172.315 295.802 171.879 295.226 cv
171.444 294.65 170.819 294.362 170.006 294.362 cv
169.192 294.362 168.566 294.65 168.127 295.226 cv
167.688 295.802 167.468 296.624 167.468 297.691 cv
167.468 298.758 167.688 299.581 168.127 300.16 cv
168.566 300.739 169.192 301.029 170.006 301.029 cv
170.819 301.029 171.444 300.739 171.879 300.16 cv
cp
174.105 301.697 mo
173.207 302.807 171.844 303.361 170.015 303.361 cv
168.187 303.361 166.824 302.807 165.926 301.697 cv
165.028 300.588 164.579 299.252 164.579 297.691 cv
164.579 296.155 165.028 294.824 165.926 293.699 cv
166.824 292.573 168.187 292.01 170.015 292.01 cv
171.844 292.01 173.207 292.573 174.105 293.699 cv
175.003 294.824 175.452 296.155 175.452 297.691 cv
175.452 299.252 175.003 300.588 174.105 301.697 cv
cp
183.295 297.818 mo
183.119 297.928 182.942 298.018 182.763 298.086 cv
182.584 298.154 182.338 298.218 182.026 298.276 cv
181.401 298.393 li
180.816 298.497 180.396 298.624 180.142 298.774 cv
179.713 299.028 179.498 299.421 179.498 299.955 cv
179.498 300.43 179.63 300.773 179.893 300.985 cv
180.157 301.196 180.477 301.302 180.855 301.302 cv
181.453 301.302 182.005 301.126 182.509 300.775 cv
183.013 300.423 183.275 299.783 183.295 298.852 cv
183.295 297.818 li
cp
181.606 296.519 mo
182.12 296.454 182.488 296.373 182.709 296.275 cv
183.106 296.106 183.305 295.843 183.305 295.485 cv
183.305 295.049 183.153 294.748 182.851 294.582 cv
182.548 294.416 182.104 294.333 181.519 294.333 cv
180.861 294.333 180.396 294.496 180.123 294.821 cv
179.928 295.062 179.798 295.387 179.732 295.797 cv
177.048 295.797 li
177.107 294.867 177.367 294.102 177.829 293.504 cv
178.564 292.567 179.827 292.098 181.616 292.098 cv
182.781 292.098 183.815 292.329 184.72 292.791 cv
185.624 293.253 186.077 294.125 186.077 295.407 cv
186.077 300.287 li
186.077 300.625 186.083 301.035 186.096 301.517 cv
186.116 301.881 186.171 302.128 186.262 302.258 cv
186.353 302.388 186.49 302.496 186.672 302.58 cv
186.672 302.99 li
183.646 302.99 li
183.562 302.776 183.503 302.574 183.471 302.385 cv
183.438 302.197 183.412 301.982 183.392 301.741 cv
183.009 302.158 182.566 302.512 182.065 302.805 cv
181.466 303.15 180.79 303.322 180.035 303.322 cv
179.072 303.322 178.277 303.047 177.649 302.497 cv
177.021 301.948 176.707 301.168 176.707 300.16 cv
176.707 298.852 177.211 297.905 178.22 297.32 cv
178.773 297.001 179.586 296.773 180.66 296.637 cv
181.606 296.519 li
cp
194.173 292.523 mo
194.674 292.806 195.081 293.198 195.393 293.699 cv
195.393 288.624 li
198.214 288.624 li
198.214 302.99 li
195.511 302.99 li
195.511 301.517 li
195.114 302.148 194.661 302.606 194.154 302.893 cv
193.646 303.179 193.015 303.322 192.26 303.322 cv
191.018 303.322 189.972 302.82 189.123 301.814 cv
188.273 300.809 187.849 299.519 187.849 297.944 cv
187.849 296.129 188.267 294.701 189.103 293.66 cv
189.939 292.619 191.057 292.098 192.456 292.098 cv
193.1 292.098 193.672 292.24 194.173 292.523 cv
cp
194.857 300.101 mo
195.267 299.516 195.472 298.758 195.472 297.827 cv
195.472 296.526 195.143 295.595 194.486 295.036 cv
194.082 294.698 193.614 294.528 193.08 294.528 cv
192.267 294.528 191.67 294.836 191.289 295.451 cv
190.909 296.066 190.718 296.828 190.718 297.739 cv
190.718 298.722 190.912 299.508 191.299 300.096 cv
191.686 300.685 192.274 300.98 193.061 300.98 cv
193.848 300.98 194.447 300.687 194.857 300.101 cv
cp
0 0 0 1 cmyk
f
86.1117 312.61 mo
96.311 312.61 li
96.311 315.138 li
89.0983 315.138 li
89.0983 318.446 li
95.4131 318.446 li
95.4131 320.945 li
89.0983 320.945 li
89.0983 326.977 li
86.1117 326.977 li
86.1117 312.61 li
cp
103.993 316.089 mo
104.029 316.093 104.109 316.098 104.232 316.104 cv
104.232 318.954 li
104.057 318.934 103.9 318.921 103.764 318.915 cv
103.627 318.908 103.517 318.905 103.432 318.905 cv
102.313 318.905 101.561 319.27 101.177 319.998 cv
100.963 320.408 100.855 321.039 100.855 321.892 cv
100.855 326.977 li
98.0542 326.977 li
98.0542 316.338 li
100.709 316.338 li
100.709 318.193 li
101.138 317.483 101.513 316.999 101.831 316.738 cv
102.352 316.302 103.029 316.085 103.861 316.085 cv
103.913 316.085 103.957 316.086 103.993 316.089 cv
cp
112.507 324.146 mo
112.943 323.567 113.161 322.744 113.161 321.677 cv
113.161 320.61 112.943 319.788 112.507 319.213 cv
112.071 318.637 111.446 318.349 110.633 318.349 cv
109.82 318.349 109.193 318.637 108.754 319.213 cv
108.315 319.788 108.095 320.61 108.095 321.677 cv
108.095 322.744 108.315 323.567 108.754 324.146 cv
109.193 324.725 109.82 325.015 110.633 325.015 cv
111.446 325.015 112.071 324.725 112.507 324.146 cv
cp
114.732 325.684 mo
113.834 326.793 112.471 327.348 110.643 327.348 cv
108.814 327.348 107.451 326.793 106.553 325.684 cv
105.655 324.574 105.206 323.239 105.206 321.677 cv
105.206 320.141 105.655 318.811 106.553 317.685 cv
107.451 316.559 108.814 315.997 110.643 315.997 cv
112.471 315.997 113.834 316.559 114.732 317.685 cv
115.63 318.811 116.079 320.141 116.079 321.677 cv
116.079 323.239 115.63 324.574 114.732 325.684 cv
cp
131.33 316.377 mo
131.786 316.559 132.199 316.878 132.57 317.334 cv
132.869 317.705 133.071 318.16 133.175 318.7 cv
133.24 319.058 133.272 319.582 133.272 320.272 cv
133.253 326.977 li
130.403 326.977 li
130.403 320.203 li
130.403 319.8 130.338 319.468 130.208 319.208 cv
129.961 318.713 129.505 318.466 128.841 318.466 cv
128.074 318.466 127.543 318.785 127.251 319.422 cv
127.101 319.761 127.026 320.167 127.026 320.642 cv
127.026 326.977 li
124.225 326.977 li
124.225 320.642 li
124.225 320.011 124.16 319.553 124.03 319.266 cv
123.795 318.752 123.337 318.495 122.654 318.495 cv
121.86 318.495 121.326 318.752 121.053 319.266 cv
120.903 319.559 120.828 319.995 120.828 320.574 cv
120.828 326.977 li
118.008 326.977 li
118.008 316.358 li
120.711 316.358 li
120.711 317.91 li
121.056 317.357 121.381 316.963 121.687 316.729 cv
122.227 316.312 122.927 316.104 123.786 316.104 cv
124.599 316.104 125.256 316.283 125.757 316.641 cv
126.161 316.973 126.466 317.399 126.675 317.919 cv
127.039 317.295 127.491 316.836 128.031 316.543 cv
128.604 316.25 129.242 316.104 129.944 316.104 cv
130.413 316.104 130.875 316.195 131.33 316.377 cv
cp
145.529 321.54 mo
149.179 321.54 li
147.384 315.88 li
145.529 321.54 li
cp
145.715 312.59 mo
149.111 312.59 li
154.206 326.977 li
150.946 326.977 li
150.019 324.019 li
144.719 324.019 li
143.724 326.977 li
140.581 326.977 li
145.715 312.59 li
cp
158.641 326.977 mo
155.859 326.977 li
155.859 312.59 li
158.641 312.59 li
158.641 326.977 li
cp
164.185 326.977 mo
161.403 326.977 li
161.403 312.59 li
164.185 312.59 li
164.185 326.977 li
cp
172.656 312.59 mo
175.662 312.59 li
175.662 324.39 li
182.787 324.39 li
182.787 326.977 li
172.656 326.977 li
172.656 312.59 li
cp
191.275 324.146 mo
191.711 323.567 191.929 322.744 191.929 321.677 cv
191.929 320.61 191.711 319.788 191.275 319.213 cv
190.839 318.637 190.214 318.349 189.401 318.349 cv
188.587 318.349 187.961 318.637 187.522 319.213 cv
187.083 319.788 186.863 320.61 186.863 321.677 cv
186.863 322.744 187.083 323.567 187.522 324.146 cv
187.961 324.725 188.587 325.015 189.401 325.015 cv
190.214 325.015 190.839 324.725 191.275 324.146 cv
cp
193.5 325.684 mo
192.602 326.793 191.239 327.348 189.411 327.348 cv
187.582 327.348 186.219 326.793 185.321 325.684 cv
184.423 324.574 183.974 323.239 183.974 321.677 cv
183.974 320.141 184.423 318.811 185.321 317.685 cv
186.219 316.559 187.582 315.997 189.411 315.997 cv
191.239 315.997 192.602 316.559 193.5 317.685 cv
194.398 318.811 194.847 320.141 194.847 321.677 cv
194.847 323.239 194.398 324.574 193.5 325.684 cv
cp
203.178 320.154 mo
203.126 319.758 202.993 319.4 202.778 319.081 cv
202.466 318.651 201.981 318.437 201.324 318.437 cv
200.387 318.437 199.746 318.902 199.401 319.832 cv
199.219 320.327 199.128 320.984 199.128 321.804 cv
199.128 322.585 199.219 323.213 199.401 323.688 cv
199.733 324.573 200.357 325.015 201.275 325.015 cv
201.926 325.015 202.388 324.839 202.661 324.488 cv
202.934 324.137 203.1 323.681 203.159 323.122 cv
205.999 323.122 li
205.934 323.967 205.628 324.768 205.081 325.522 cv
204.209 326.739 202.918 327.348 201.207 327.348 cv
199.495 327.348 198.236 326.84 197.429 325.825 cv
196.623 324.81 196.219 323.492 196.219 321.872 cv
196.219 320.044 196.665 318.622 197.556 317.607 cv
198.448 316.592 199.678 316.085 201.246 316.085 cv
202.58 316.085 203.671 316.384 204.52 316.982 cv
205.369 317.581 205.872 318.638 206.028 320.154 cv
203.178 320.154 li
cp
213.793 321.804 mo
213.618 321.915 213.44 322.004 213.261 322.072 cv
213.082 322.141 212.837 322.204 212.524 322.263 cv
211.9 322.38 li
211.314 322.484 210.894 322.611 210.641 322.76 cv
210.211 323.014 209.997 323.408 209.997 323.941 cv
209.997 324.416 210.128 324.76 210.392 324.971 cv
210.655 325.183 210.976 325.288 211.353 325.288 cv
211.952 325.288 212.503 325.113 213.008 324.761 cv
213.512 324.41 213.774 323.769 213.793 322.838 cv
213.793 321.804 li
cp
212.105 320.506 mo
212.619 320.441 212.986 320.359 213.208 320.262 cv
213.605 320.093 213.803 319.829 213.803 319.471 cv
213.803 319.035 213.652 318.734 213.349 318.568 cv
213.047 318.402 212.602 318.32 212.017 318.32 cv
211.36 318.32 210.894 318.482 210.621 318.808 cv
210.426 319.048 210.296 319.374 210.231 319.784 cv
207.547 319.784 li
207.605 318.853 207.866 318.089 208.328 317.49 cv
209.063 316.553 210.325 316.085 212.114 316.085 cv
213.279 316.085 214.314 316.315 215.218 316.777 cv
216.123 317.239 216.575 318.111 216.575 319.393 cv
216.575 324.273 li
216.575 324.612 216.581 325.021 216.594 325.503 cv
216.614 325.867 216.669 326.115 216.76 326.245 cv
216.851 326.375 216.988 326.482 217.17 326.567 cv
217.17 326.977 li
214.145 326.977 li
214.06 326.762 214.001 326.56 213.969 326.372 cv
213.936 326.183 213.91 325.968 213.891 325.727 cv
213.507 326.144 213.064 326.499 212.563 326.791 cv
211.965 327.136 211.288 327.309 210.533 327.309 cv
209.57 327.309 208.775 327.034 208.147 326.484 cv
207.519 325.934 207.205 325.155 207.205 324.146 cv
207.205 322.838 207.709 321.892 208.718 321.306 cv
209.271 320.987 210.084 320.76 211.158 320.623 cv
212.105 320.506 li
cp
221.871 326.977 mo
219.089 326.977 li
219.089 312.59 li
221.871 312.59 li
221.871 326.977 li
cp
f
103.592 338.08 mo
104.763 336.896 106.253 336.303 108.062 336.303 cv
110.483 336.303 112.253 337.097 113.372 338.685 cv
113.99 339.576 114.322 340.471 114.367 341.369 cv
111.361 341.369 li
111.166 340.679 110.915 340.159 110.61 339.807 cv
110.063 339.183 109.253 338.87 108.179 338.87 cv
107.086 338.87 106.224 339.311 105.593 340.193 cv
104.962 341.075 104.646 342.322 104.646 343.936 cv
104.646 345.55 104.98 346.758 105.647 347.562 cv
106.313 348.365 107.161 348.767 108.189 348.767 cv
109.243 348.767 110.047 348.422 110.6 347.733 cv
110.906 347.362 111.159 346.805 111.361 346.064 cv
114.338 346.064 li
114.078 347.632 113.412 348.907 112.342 349.89 cv
111.272 350.872 109.9 351.363 108.228 351.363 cv
106.159 351.363 104.532 350.7 103.348 349.372 cv
102.164 348.038 101.572 346.21 101.572 343.887 cv
101.572 341.375 102.245 339.44 103.592 338.08 cv
cp
123.048 348.133 mo
123.484 347.554 123.702 346.73 123.702 345.663 cv
123.702 344.596 123.484 343.775 123.048 343.199 cv
122.612 342.623 121.987 342.335 121.174 342.335 cv
120.361 342.335 119.734 342.623 119.295 343.199 cv
118.856 343.775 118.636 344.596 118.636 345.663 cv
118.636 346.73 118.856 347.554 119.295 348.133 cv
119.734 348.712 120.361 349.001 121.174 349.001 cv
121.987 349.001 122.612 348.712 123.048 348.133 cv
cp
125.273 349.67 mo
124.375 350.779 123.012 351.334 121.184 351.334 cv
119.355 351.334 117.992 350.779 117.094 349.67 cv
116.196 348.561 115.747 347.225 115.747 345.663 cv
115.747 344.128 116.196 342.797 117.094 341.672 cv
117.992 340.546 119.355 339.983 121.184 339.983 cv
123.012 339.983 124.375 340.546 125.273 341.672 cv
126.171 342.797 126.62 344.128 126.62 345.663 cv
126.62 347.225 126.171 348.561 125.273 349.67 cv
cp
137.191 340.935 mo
137.891 341.51 138.24 342.465 138.24 343.799 cv
138.24 350.963 li
135.39 350.963 li
135.39 344.492 li
135.39 343.933 135.316 343.503 135.166 343.204 cv
134.893 342.657 134.372 342.384 133.604 342.384 cv
132.661 342.384 132.013 342.784 131.662 343.585 cv
131.48 344.007 131.389 344.548 131.389 345.205 cv
131.389 350.963 li
128.617 350.963 li
128.617 340.344 li
131.301 340.344 li
131.301 341.896 li
131.659 341.349 131.997 340.956 132.316 340.715 cv
132.889 340.286 133.614 340.071 134.492 340.071 cv
135.592 340.071 136.492 340.359 137.191 340.935 cv
cp
139.7 342.404 mo
139.7 340.422 li
141.184 340.422 li
141.184 337.455 li
143.936 337.455 li
143.936 340.422 li
145.664 340.422 li
145.664 342.404 li
143.936 342.404 li
143.936 348.025 li
143.936 348.461 143.992 348.733 144.102 348.84 cv
144.213 348.948 144.551 349.001 145.117 349.001 cv
145.202 349.001 145.291 349 145.386 348.996 cv
145.48 348.993 145.573 348.988 145.664 348.982 cv
145.664 351.061 li
144.346 351.11 li
143.032 351.155 142.134 350.927 141.652 350.426 cv
141.34 350.107 141.184 349.616 141.184 348.953 cv
141.184 342.404 li
139.7 342.404 li
cp
153.356 340.076 mo
153.392 340.079 153.471 340.084 153.595 340.09 cv
153.595 342.94 li
153.419 342.921 153.263 342.908 153.126 342.901 cv
152.99 342.895 152.879 342.892 152.795 342.892 cv
151.675 342.892 150.924 343.256 150.54 343.985 cv
150.325 344.395 150.218 345.026 150.218 345.878 cv
150.218 350.963 li
147.417 350.963 li
147.417 340.325 li
150.072 340.325 li
150.072 342.179 li
150.501 341.47 150.875 340.985 151.194 340.725 cv
151.714 340.289 152.391 340.071 153.224 340.071 cv
153.276 340.071 153.32 340.073 153.356 340.076 cv
cp
161.87 348.133 mo
162.305 347.554 162.523 346.73 162.523 345.663 cv
162.523 344.596 162.305 343.775 161.87 343.199 cv
161.434 342.623 160.809 342.335 159.996 342.335 cv
159.182 342.335 158.556 342.623 158.117 343.199 cv
157.678 343.775 157.458 344.596 157.458 345.663 cv
157.458 346.73 157.678 347.554 158.117 348.133 cv
158.556 348.712 159.182 349.001 159.996 349.001 cv
160.809 349.001 161.434 348.712 161.87 348.133 cv
cp
164.095 349.67 mo
163.197 350.779 161.834 351.334 160.005 351.334 cv
158.177 351.334 156.814 350.779 155.916 349.67 cv
155.018 348.561 154.569 347.225 154.569 345.663 cv
154.569 344.128 155.018 342.797 155.916 341.672 cv
156.814 340.546 158.177 339.983 160.005 339.983 cv
161.834 339.983 163.197 340.546 164.095 341.672 cv
164.993 342.797 165.442 344.128 165.442 345.663 cv
165.442 347.225 164.993 348.561 164.095 349.67 cv
cp
170.259 350.963 mo
167.478 350.963 li
167.478 336.577 li
170.259 336.577 li
170.259 350.963 li
cp
175.803 350.963 mo
173.021 350.963 li
173.021 336.577 li
175.803 336.577 li
175.803 350.963 li
cp
181.205 342.94 mo
180.851 343.344 180.628 343.89 180.537 344.58 cv
184.86 344.58 li
184.815 343.845 184.592 343.287 184.192 342.906 cv
183.792 342.526 183.296 342.335 182.703 342.335 cv
182.059 342.335 181.56 342.537 181.205 342.94 cv
cp
185.095 340.539 mo
185.804 340.871 186.389 341.395 186.851 342.111 cv
187.268 342.742 187.538 343.474 187.662 344.307 cv
187.733 344.795 187.762 345.497 187.749 346.415 cv
180.468 346.415 li
180.507 347.482 180.842 348.23 181.474 348.66 cv
181.858 348.927 182.32 349.06 182.86 349.06 cv
183.432 349.06 183.897 348.897 184.255 348.572 cv
184.45 348.396 184.623 348.152 184.773 347.84 cv
187.613 347.84 li
187.541 348.471 187.213 349.112 186.627 349.763 cv
185.716 350.797 184.441 351.314 182.801 351.314 cv
181.448 351.314 180.254 350.879 179.219 350.007 cv
178.184 349.135 177.667 347.716 177.667 345.751 cv
177.667 343.91 178.134 342.498 179.068 341.515 cv
180.001 340.533 181.213 340.042 182.703 340.042 cv
183.588 340.042 184.385 340.208 185.095 340.539 cv
cp
195.519 340.076 mo
195.555 340.079 195.635 340.084 195.759 340.09 cv
195.759 342.94 li
195.583 342.921 195.427 342.908 195.29 342.901 cv
195.153 342.895 195.043 342.892 194.958 342.892 cv
193.839 342.892 193.087 343.256 192.704 343.985 cv
192.489 344.395 192.382 345.026 192.382 345.878 cv
192.382 350.963 li
189.58 350.963 li
189.58 340.325 li
192.235 340.325 li
192.235 342.179 li
192.665 341.47 193.039 340.985 193.358 340.725 cv
193.878 340.289 194.555 340.071 195.388 340.071 cv
195.44 340.071 195.484 340.073 195.519 340.076 cv
cp
199.553 347.567 mo
199.612 348.061 199.739 348.413 199.934 348.621 cv
200.279 348.992 200.916 349.177 201.847 349.177 cv
202.393 349.177 202.828 349.096 203.15 348.933 cv
203.472 348.77 203.633 348.526 203.633 348.201 cv
203.633 347.889 203.503 347.651 203.243 347.489 cv
202.982 347.326 202.016 347.046 200.344 346.649 cv
199.14 346.35 198.291 345.976 197.796 345.527 cv
197.302 345.084 197.055 344.447 197.055 343.614 cv
197.055 342.631 197.44 341.787 198.211 341.081 cv
198.982 340.375 200.067 340.022 201.466 340.022 cv
202.794 340.022 203.875 340.287 204.711 340.818 cv
205.548 341.348 206.027 342.264 206.151 343.565 cv
203.369 343.565 li
203.33 343.207 203.23 342.924 203.067 342.716 cv
202.761 342.338 202.241 342.15 201.505 342.15 cv
200.9 342.15 200.469 342.244 200.212 342.433 cv
199.955 342.622 199.827 342.843 199.827 343.096 cv
199.827 343.415 199.963 343.646 200.236 343.789 cv
200.51 343.939 201.476 344.196 203.135 344.561 cv
204.241 344.821 205.071 345.214 205.624 345.741 cv
206.171 346.275 206.444 346.942 206.444 347.742 cv
206.444 348.796 206.052 349.657 205.268 350.324 cv
204.484 350.991 203.272 351.324 201.632 351.324 cv
199.96 351.324 198.725 350.971 197.928 350.265 cv
197.131 349.559 196.733 348.66 196.733 347.567 cv
199.553 347.567 li
cp
f
[11.9932 11.9932 ] 0 dsh
161 181 mo
186.927 127.627 226.233 129.687 278.92 187.18 cv
.494392 .266361 0 0 cmyk
@
283.98 192.7 mo
273.54 188.71 li
278.92 187.18 li
280.91 181.96 li
283.98 192.7 li
cp
f
[] 0 dsh
283.98 192.7 mo
273.54 188.71 li
278.92 187.18 li
280.91 181.96 li
283.98 192.7 li
cp
@
[11.9932 11.9932 ] 0 dsh
132 181 mo
163.267 124.3 217.743 85.6533 295.43 65.06 cv
@
302.68 63.14 mo
294.3 70.54 li
295.43 65.06 li
291.74 60.87 li
302.68 63.14 li
cp
f
[] 0 dsh
302.68 63.14 mo
294.3 70.54 li
295.43 65.06 li
291.74 60.87 li
302.68 63.14 li
cp
@
[11.9932 11.9932 ] 0 dsh
104 181 mo
147.933 74.3267 227.617 18.5 343.05 13.52 cv
@
350.53 13.19 mo
340.77 18.62 li
343.05 13.52 li
340.33 8.63 li
350.53 13.19 li
cp
f
[] 0 dsh
350.53 13.19 mo
340.77 18.62 li
343.05 13.52 li
340.33 8.63 li
350.53 13.19 li
cp
@
10.0324 53.5808 mo
9.63874 53.262 9.08729 53.1026 8.37806 53.1026 cv
5.57691 53.1026 li
5.57691 57.3385 li
8.37806 57.3385 li
9.08729 57.3385 9.63874 57.166 10.0324 56.8212 cv
10.426 56.4763 10.6229 55.9297 10.6229 55.1815 cv
10.6229 54.4332 10.426 53.8996 10.0324 53.5808 cv
cp
12.3114 58.7634 mo
11.4525 59.4661 10.226 59.8175 8.63182 59.8175 cv
5.57691 59.8175 li
5.57691 64.9904 li
2.59033 64.9904 li
2.59033 50.604 li
8.8563 50.604 li
10.3008 50.604 11.4525 50.9749 12.3114 51.7166 cv
13.1703 52.4584 13.5997 53.6068 13.5997 55.1619 cv
13.5997 56.8602 13.1703 58.0607 12.3114 58.7634 cv
cp
21.5278 54.103 mo
21.5636 54.1062 21.6433 54.1111 21.7669 54.1176 cv
21.7669 56.9676 li
21.5913 56.948 21.4351 56.935 21.2985 56.9285 cv
21.1618 56.922 21.0512 56.9188 20.9666 56.9188 cv
19.8475 56.9188 19.0959 57.2831 18.712 58.0119 cv
18.4973 58.4218 18.39 59.053 18.39 59.9054 cv
18.39 64.9904 li
15.5888 64.9904 li
15.5888 54.3519 li
18.2436 54.3519 li
18.2436 56.2063 li
18.673 55.497 19.0471 55.0123 19.366 54.752 cv
19.8865 54.3161 20.5632 54.0981 21.3961 54.0981 cv
21.4481 54.0981 21.492 54.0997 21.5278 54.103 cv
cp
30.0415 62.1599 mo
30.4775 61.5808 30.6955 60.7577 30.6955 59.6906 cv
30.6955 58.6235 30.4775 57.8021 30.0415 57.2262 cv
29.6056 56.6504 28.9809 56.3624 28.1676 56.3624 cv
27.3543 56.3624 26.728 56.6504 26.2888 57.2262 cv
25.8496 57.8021 25.63 58.6235 25.63 59.6906 cv
25.63 60.7577 25.8496 61.5808 26.2888 62.1599 cv
26.728 62.739 27.3543 63.0286 28.1676 63.0286 cv
28.9809 63.0286 29.6056 62.739 30.0415 62.1599 cv
cp
32.2668 63.6971 mo
31.3689 64.8065 30.0058 65.3612 28.1774 65.3612 cv
26.349 65.3612 24.9858 64.8065 24.0879 63.6971 cv
23.19 62.5877 22.741 61.2522 22.741 59.6906 cv
22.741 58.155 23.19 56.8244 24.0879 55.6988 cv
24.9858 54.5731 26.349 54.0103 28.1774 54.0103 cv
30.0058 54.0103 31.3689 54.5731 32.2668 55.6988 cv
33.1648 56.8244 33.6137 58.155 33.6137 59.6906 cv
33.6137 61.2522 33.1648 62.5877 32.2668 63.6971 cv
cp
41.4569 59.8175 mo
41.2813 59.9281 41.104 60.0176 40.925 60.0859 cv
40.7461 60.1542 40.5005 60.2177 40.1881 60.2762 cv
39.5635 60.3934 li
38.9779 60.4975 38.5582 60.6243 38.3044 60.774 cv
37.875 61.0278 37.6603 61.4214 37.6603 61.955 cv
37.6603 62.43 37.792 62.7732 38.0555 62.9847 cv
38.3191 63.1961 38.6395 63.3019 39.0169 63.3019 cv
39.6155 63.3019 40.167 63.1262 40.6713 62.7748 cv
41.1755 62.4235 41.4374 61.7825 41.4569 60.8521 cv
41.4569 59.8175 li
cp
39.7684 58.5194 mo
40.2825 58.4544 40.6501 58.373 40.8713 58.2754 cv
41.2682 58.1062 41.4667 57.8427 41.4667 57.4849 cv
41.4667 57.0489 41.3154 56.748 41.0129 56.582 cv
40.7103 56.4161 40.2662 56.3332 39.6806 56.3332 cv
39.0234 56.3332 38.5582 56.4958 38.2849 56.8212 cv
38.0897 57.0619 37.9596 57.3872 37.8945 57.7972 cv
35.2105 57.7972 li
35.269 56.8667 35.5293 56.1022 35.9913 55.5036 cv
36.7266 54.5666 37.9889 54.0981 39.7782 54.0981 cv
40.9429 54.0981 41.9775 54.3291 42.8819 54.7911 cv
43.7863 55.253 44.2386 56.1249 44.2386 57.4068 cv
44.2386 62.2868 li
44.2386 62.6252 44.2451 63.0351 44.2581 63.5166 cv
44.2776 63.881 44.3329 64.1282 44.424 64.2584 cv
44.5151 64.3885 44.6517 64.4958 44.8339 64.5804 cv
44.8339 64.9904 li
41.8083 64.9904 li
41.7237 64.7756 41.6652 64.5739 41.6326 64.3852 cv
41.6001 64.1965 41.5741 63.9818 41.5545 63.7411 cv
41.1706 64.1575 40.7282 64.5121 40.2272 64.8049 cv
39.6286 65.1498 38.9519 65.3222 38.1971 65.3222 cv
37.2341 65.3222 36.4386 65.0473 35.8107 64.4975 cv
35.1828 63.9477 34.8689 63.1685 34.8689 62.1599 cv
34.8689 60.8521 35.3732 59.9054 36.3817 59.3197 cv
36.9348 59.0009 37.7481 58.7732 38.8217 58.6365 cv
39.7684 58.5194 li
cp
53.048 58.1681 mo
52.996 57.7711 52.8626 57.4133 52.6479 57.0944 cv
52.3355 56.665 51.8508 56.4503 51.1936 56.4503 cv
50.2566 56.4503 49.6157 56.9155 49.2709 57.846 cv
49.0887 58.3405 48.9976 58.9977 48.9976 59.8175 cv
48.9976 60.5983 49.0887 61.2262 49.2709 61.7012 cv
49.6027 62.5861 50.2274 63.0286 51.1448 63.0286 cv
51.7955 63.0286 52.2575 62.8529 52.5307 62.5015 cv
52.804 62.1502 52.9699 61.6947 53.0285 61.1351 cv
55.8687 61.1351 li
55.8036 61.981 55.4978 62.7813 54.9512 63.5361 cv
54.0793 64.7529 52.7878 65.3612 51.0765 65.3612 cv
49.3652 65.3612 48.1062 64.8537 47.2993 63.8387 cv
46.4925 62.8236 46.0891 61.506 46.0891 59.8858 cv
46.0891 58.0574 46.5348 56.6357 47.4262 55.6207 cv
48.3176 54.6056 49.5474 54.0981 51.1155 54.0981 cv
52.4494 54.0981 53.5409 54.3974 54.39 54.996 cv
55.2392 55.5946 55.7418 56.652 55.898 58.1681 cv
53.048 58.1681 li
cp
56.7041 56.4308 mo
56.7041 54.4495 li
58.1877 54.4495 li
58.1877 51.4824 li
60.94 51.4824 li
60.94 54.4495 li
62.6676 54.4495 li
62.6676 56.4308 li
60.94 56.4308 li
60.94 62.0526 li
60.94 62.4885 60.9953 62.7602 61.1059 62.8675 cv
61.2166 62.9749 61.5549 63.0286 62.121 63.0286 cv
62.2056 63.0286 62.2951 63.027 62.3894 63.0237 cv
62.4837 63.0204 62.5765 63.0156 62.6676 63.0091 cv
62.6676 65.088 li
61.3499 65.1368 li
60.0356 65.1823 59.1377 64.9546 58.6562 64.4536 cv
58.3438 64.1347 58.1877 63.6435 58.1877 62.9798 cv
58.1877 56.4308 li
56.7041 56.4308 li
cp
67.3095 53.0831 mo
64.4888 53.0831 li
64.4888 50.5162 li
67.3095 50.5162 li
67.3095 53.0831 li
cp
64.4888 54.3519 mo
67.3095 54.3519 li
67.3095 64.9904 li
64.4888 64.9904 li
64.4888 54.3519 li
cp
76.5523 54.3519 mo
79.5388 54.3519 li
75.7031 64.9904 li
72.7653 64.9904 li
68.9492 54.3519 li
72.0724 54.3519 li
74.2879 62.199 li
76.5523 54.3519 li
cp
83.7952 56.9676 mo
83.4406 57.371 83.2177 57.9175 83.1267 58.6073 cv
87.4504 58.6073 li
87.4048 57.872 87.182 57.314 86.7818 56.9334 cv
86.3816 56.5528 85.8855 56.3624 85.2934 56.3624 cv
84.6492 56.3624 84.1498 56.5642 83.7952 56.9676 cv
cp
87.6846 54.5666 mo
88.3938 54.8984 88.9795 55.4222 89.4414 56.138 cv
89.8579 56.7691 90.1279 57.5011 90.2515 58.334 cv
90.3231 58.822 90.3524 59.5247 90.3394 60.4422 cv
83.0583 60.4422 li
83.0974 61.5093 83.4325 62.2575 84.0636 62.687 cv
84.4475 62.9538 84.9095 63.0871 85.4496 63.0871 cv
86.0221 63.0871 86.4874 62.9245 86.8452 62.5991 cv
87.0404 62.4235 87.2129 62.1795 87.3625 61.8671 cv
90.2027 61.8671 li
90.1311 62.4983 89.8026 63.1392 89.2169 63.7899 cv
88.306 64.8244 87.0307 65.3417 85.391 65.3417 cv
84.0376 65.3417 82.8436 64.9058 81.809 64.0339 cv
80.7745 63.162 80.2572 61.7435 80.2572 59.7785 cv
80.2572 57.9371 80.724 56.5251 81.6578 55.5426 cv
82.5915 54.5601 83.8034 54.0688 85.2934 54.0688 cv
86.1783 54.0688 86.9754 54.2347 87.6846 54.5666 cv
cp
100.144 60.5495 mo
100.235 61.2067 100.414 61.698 100.681 62.0233 cv
101.169 62.6154 102.005 62.9115 103.189 62.9115 cv
103.899 62.9115 104.475 62.8334 104.917 62.6772 cv
105.756 62.3779 106.176 61.8216 106.176 61.0082 cv
106.176 60.5333 105.968 60.1656 105.551 59.9054 cv
105.135 59.6516 104.481 59.4271 103.59 59.2319 cv
102.067 58.8903 li
100.571 58.552 99.536 58.1843 98.9634 57.7874 cv
97.9939 57.1237 97.5091 56.0859 97.5091 54.6739 cv
97.5091 53.3856 97.9776 52.3153 98.9146 51.4629 cv
99.8515 50.6105 101.228 50.1843 103.043 50.1843 cv
104.559 50.1843 105.852 50.5861 106.923 51.3897 cv
107.993 52.1933 108.554 53.3596 108.606 54.8887 cv
105.717 54.8887 li
105.665 54.0233 105.288 53.4084 104.585 53.044 cv
104.117 52.8033 103.534 52.6829 102.838 52.6829 cv
102.064 52.6829 101.446 52.8391 100.984 53.1514 cv
100.522 53.4637 100.291 53.8996 100.291 54.4592 cv
100.291 54.9733 100.518 55.3572 100.974 55.6109 cv
101.267 55.7801 101.891 55.9785 102.848 56.2063 cv
105.327 56.8016 li
106.414 57.0619 107.233 57.41 107.786 57.846 cv
108.645 58.5227 109.075 59.5019 109.075 60.7838 cv
109.075 62.0981 108.572 63.1896 107.567 64.0583 cv
106.562 64.9269 105.142 65.3612 103.307 65.3612 cv
101.433 65.3612 99.9589 64.9334 98.8853 64.0778 cv
97.8117 63.2222 97.2749 62.0461 97.2749 60.5495 cv
100.144 60.5495 li
cp
117.418 58.1681 mo
117.366 57.7711 117.232 57.4133 117.018 57.0944 cv
116.705 56.665 116.22 56.4503 115.563 56.4503 cv
114.626 56.4503 113.985 56.9155 113.641 57.846 cv
113.458 58.3405 113.367 58.9977 113.367 59.8175 cv
113.367 60.5983 113.458 61.2262 113.641 61.7012 cv
113.972 62.5861 114.597 63.0286 115.515 63.0286 cv
116.165 63.0286 116.627 62.8529 116.9 62.5015 cv
117.174 62.1502 117.34 61.6947 117.398 61.1351 cv
120.238 61.1351 li
120.173 61.981 119.868 62.7813 119.321 63.5361 cv
118.449 64.7529 117.157 65.3612 115.446 65.3612 cv
113.735 65.3612 112.476 64.8537 111.669 63.8387 cv
110.862 62.8236 110.459 61.506 110.459 59.8858 cv
110.459 58.0574 110.905 56.6357 111.796 55.6207 cv
112.687 54.6056 113.917 54.0981 115.485 54.0981 cv
116.819 54.0981 117.911 54.3974 118.76 54.996 cv
119.609 55.5946 120.112 56.652 120.268 58.1681 cv
117.418 58.1681 li
cp
128.033 59.8175 mo
127.857 59.9281 127.68 60.0176 127.501 60.0859 cv
127.322 60.1542 127.076 60.2177 126.764 60.2762 cv
126.139 60.3934 li
125.554 60.4975 125.134 60.6243 124.88 60.774 cv
124.451 61.0278 124.236 61.4214 124.236 61.955 cv
124.236 62.43 124.368 62.7732 124.631 62.9847 cv
124.895 63.1961 125.215 63.3019 125.593 63.3019 cv
126.191 63.3019 126.743 63.1262 127.247 62.7748 cv
127.751 62.4235 128.013 61.7825 128.033 60.8521 cv
128.033 59.8175 li
cp
126.344 58.5194 mo
126.858 58.4544 127.226 58.373 127.447 58.2754 cv
127.844 58.1062 128.043 57.8427 128.043 57.4849 cv
128.043 57.0489 127.891 56.748 127.589 56.582 cv
127.286 56.4161 126.842 56.3332 126.256 56.3332 cv
125.599 56.3332 125.134 56.4958 124.861 56.8212 cv
124.666 57.0619 124.535 57.3872 124.47 57.7972 cv
121.786 57.7972 li
121.845 56.8667 122.105 56.1022 122.567 55.5036 cv
123.302 54.5666 124.565 54.0981 126.354 54.0981 cv
127.519 54.0981 128.553 54.3291 129.458 54.7911 cv
130.362 55.253 130.814 56.1249 130.814 57.4068 cv
130.814 62.2868 li
130.814 62.6252 130.821 63.0351 130.834 63.5166 cv
130.853 63.881 130.909 64.1282 131 64.2584 cv
131.091 64.3885 131.228 64.4958 131.41 64.5804 cv
131.41 64.9904 li
128.384 64.9904 li
128.3 64.7756 128.241 64.5739 128.208 64.3852 cv
128.176 64.1965 128.15 63.9818 128.13 63.7411 cv
127.747 64.1575 127.304 64.5121 126.803 64.8049 cv
126.204 65.1498 125.528 65.3222 124.773 65.3222 cv
123.81 65.3222 123.014 65.0473 122.387 64.4975 cv
121.759 63.9477 121.445 63.1685 121.445 62.1599 cv
121.445 60.8521 121.949 59.9054 122.958 59.3197 cv
123.511 59.0009 124.324 58.7732 125.398 58.6365 cv
126.344 58.5194 li
cp
136.11 64.9904 mo
133.329 64.9904 li
133.329 50.604 li
136.11 50.604 li
136.11 64.9904 li
cp
141.674 53.0831 mo
138.853 53.0831 li
138.853 50.5162 li
141.674 50.5162 li
141.674 53.0831 li
cp
138.853 54.3519 mo
141.674 54.3519 li
141.674 64.9904 li
138.853 64.9904 li
138.853 54.3519 li
cp
152.951 54.9619 mo
153.651 55.5377 154 56.4926 154 57.8265 cv
154 64.9904 li
151.151 64.9904 li
151.151 58.5194 li
151.151 57.9598 151.076 57.5304 150.926 57.2311 cv
150.653 56.6845 150.132 56.4112 149.364 56.4112 cv
148.421 56.4112 147.774 56.8114 147.422 57.6117 cv
147.24 58.0347 147.149 58.5747 147.149 59.2319 cv
147.149 64.9904 li
144.377 64.9904 li
144.377 54.3714 li
147.061 54.3714 li
147.061 55.9232 li
147.419 55.3767 147.757 54.983 148.076 54.7423 cv
148.649 54.3128 149.374 54.0981 150.253 54.0981 cv
151.352 54.0981 152.252 54.386 152.951 54.9619 cv
cp
162.771 61.9696 mo
163.22 61.4784 163.444 60.6959 163.444 59.6223 cv
163.444 58.6138 163.231 57.846 162.805 57.3189 cv
162.379 56.7919 161.808 56.5284 161.092 56.5284 cv
160.116 56.5284 159.443 56.9871 159.072 57.9045 cv
158.877 58.3925 158.779 58.9944 158.779 59.7102 cv
158.779 60.3283 158.883 60.8781 159.091 61.3596 cv
159.469 62.2575 160.145 62.7065 161.121 62.7065 cv
161.772 62.7065 162.322 62.4609 162.771 61.9696 cv
cp
161.824 54.3421 mo
162.501 54.6219 163.047 55.1359 163.464 55.8842 cv
163.464 54.3519 li
166.167 54.3519 li
166.167 64.4438 li
166.167 65.8167 165.936 66.8513 165.474 67.5475 cv
164.681 68.7447 163.158 69.3434 160.907 69.3434 cv
159.547 69.3434 158.437 69.0766 157.579 68.543 cv
156.72 68.0095 156.245 67.2124 156.154 66.1518 cv
159.179 66.1518 li
159.257 66.4771 159.384 66.7114 159.56 66.8545 cv
159.859 67.1083 160.363 67.2352 161.073 67.2352 cv
162.075 67.2352 162.745 66.9001 163.083 66.2299 cv
163.304 65.8004 163.415 65.0782 163.415 64.0631 cv
163.415 63.3799 li
163.148 63.8354 162.862 64.177 162.556 64.4048 cv
162.003 64.8277 161.284 65.0392 160.399 65.0392 cv
159.033 65.0392 157.941 64.5593 157.125 63.5995 cv
156.308 62.6398 155.9 61.3401 155.9 59.7004 cv
155.9 58.1193 156.293 56.7903 157.081 55.7134 cv
157.868 54.6365 158.984 54.0981 160.428 54.0981 cv
160.962 54.0981 161.427 54.1794 161.824 54.3421 cv
cp
0 0 0 1 cmyk
f
57.9671 77.089 mo
57.9671 80.954 li
61.3734 80.954 li
62.0501 80.954 62.5576 80.8759 62.8959 80.7197 cv
63.4946 80.4464 63.7939 79.9064 63.7939 79.0995 cv
63.7939 78.2276 63.5043 77.642 62.9252 77.3427 cv
62.5999 77.1735 62.1119 77.089 61.4612 77.089 cv
57.9671 77.089 li
cp
64.4136 74.9613 mo
64.9569 75.189 65.4173 75.5241 65.7947 75.9666 cv
66.107 76.3309 66.3543 76.7343 66.5365 77.1768 cv
66.7186 77.6193 66.8097 78.1235 66.8097 78.6896 cv
66.8097 79.3728 66.6373 80.0446 66.2925 80.7051 cv
65.9476 81.3655 65.3783 81.8324 64.5844 82.1056 cv
65.2481 82.3724 65.7182 82.7514 65.9948 83.2427 cv
66.2713 83.734 66.4096 84.4838 66.4096 85.4924 cv
66.4096 86.4586 li
66.4096 87.1158 66.4356 87.5615 66.4877 87.7958 cv
66.5657 88.1667 66.7479 88.4399 67.0342 88.6156 cv
67.0342 88.9767 li
63.7256 88.9767 li
63.6345 88.6579 63.5694 88.4009 63.5303 88.2057 cv
63.4523 87.8023 63.41 87.3891 63.4035 86.9662 cv
63.3839 85.629 li
63.3709 84.7116 63.2034 84.1 62.8813 83.7941 cv
62.5592 83.4883 61.9557 83.3354 61.0708 83.3354 cv
57.9671 83.3354 li
57.9671 88.9767 li
55.0293 88.9767 li
55.0293 74.5904 li
62.0859 74.5904 li
63.0944 74.6099 63.8703 74.7335 64.4136 74.9613 cv
cp
71.8645 80.954 mo
71.5099 81.3574 71.287 81.9039 71.1959 82.5937 cv
75.5196 82.5937 li
75.4741 81.8584 75.2512 81.3004 74.8511 80.9198 cv
74.4509 80.5392 73.9548 80.3488 73.3627 80.3488 cv
72.7185 80.3488 72.2191 80.5505 71.8645 80.954 cv
cp
75.7539 78.553 mo
76.4631 78.8848 77.0487 79.4086 77.5107 80.1243 cv
77.9271 80.7555 78.1972 81.4875 78.3208 82.3204 cv
78.3924 82.8084 78.4216 83.5111 78.4086 84.4285 cv
71.1276 84.4285 li
71.1666 85.4957 71.5017 86.2439 72.1329 86.6734 cv
72.5168 86.9401 72.9788 87.0735 73.5188 87.0735 cv
74.0914 87.0735 74.5566 86.9109 74.9145 86.5855 cv
75.1097 86.4098 75.2821 86.1658 75.4318 85.8535 cv
78.272 85.8535 li
78.2004 86.4847 77.8718 87.1256 77.2862 87.7763 cv
76.3753 88.8108 75.1 89.3281 73.4603 89.3281 cv
72.1069 89.3281 70.9129 88.8922 69.8783 88.0203 cv
68.8437 87.1484 68.3265 85.7299 68.3265 83.7649 cv
68.3265 81.9235 68.7933 80.5115 69.727 79.529 cv
70.6607 78.5465 71.8726 78.0552 73.3627 78.0552 cv
74.2476 78.0552 75.0446 78.2211 75.7539 78.553 cv
cp
82.4356 85.5802 mo
82.4942 86.0747 82.6211 86.4261 82.8163 86.6343 cv
83.1611 87.0052 83.7988 87.1907 84.7293 87.1907 cv
85.2758 87.1907 85.7101 87.1093 86.0322 86.9466 cv
86.3543 86.784 86.5154 86.54 86.5154 86.2146 cv
86.5154 85.9023 86.3852 85.6648 86.125 85.5022 cv
85.8647 85.3395 84.8984 85.0597 83.2262 84.6628 cv
82.0225 84.3635 81.1733 83.9893 80.6788 83.5404 cv
80.1843 83.0979 79.9371 82.4603 79.9371 81.6274 cv
79.9371 80.6449 80.3226 79.8006 81.0936 79.0947 cv
81.8647 78.3887 82.9497 78.0357 84.3486 78.0357 cv
85.676 78.0357 86.7577 78.3008 87.5938 78.8311 cv
88.43 79.3614 88.9098 80.2773 89.0335 81.5786 cv
86.2518 81.5786 li
86.2128 81.2207 86.1119 80.9377 85.9493 80.7295 cv
85.6435 80.3521 85.1229 80.1634 84.3877 80.1634 cv
83.7825 80.1634 83.3515 80.2577 83.0944 80.4464 cv
82.8374 80.6351 82.7089 80.8564 82.7089 81.1101 cv
82.7089 81.4289 82.8456 81.6599 83.1188 81.8031 cv
83.3921 81.9527 84.3584 82.2098 86.0176 82.5741 cv
87.1237 82.8344 87.9533 83.2281 88.5064 83.7551 cv
89.053 84.2887 89.3263 84.9556 89.3263 85.7559 cv
89.3263 86.81 88.9342 87.6705 88.1502 88.3375 cv
87.3661 89.0044 86.1542 89.3379 84.5145 89.3379 cv
82.8423 89.3379 81.6077 88.9849 80.8106 88.2789 cv
80.0135 87.5729 79.615 86.6734 79.615 85.5802 cv
82.4356 85.5802 li
cp
94.1438 78.3382 mo
94.1438 84.7506 li
94.1438 85.3558 94.2154 85.8112 94.3586 86.117 cv
94.6123 86.6571 95.1101 86.9271 95.8519 86.9271 cv
96.8018 86.9271 97.4525 86.5432 97.8039 85.7754 cv
97.9861 85.359 98.0771 84.8092 98.0771 84.126 cv
98.0771 78.3382 li
100.898 78.3382 li
100.898 88.9767 li
98.1943 88.9767 li
98.1943 87.4737 li
98.1682 87.5062 98.1032 87.6038 97.9991 87.7665 cv
97.895 87.9292 97.7713 88.0723 97.6282 88.1959 cv
97.1922 88.5863 96.7709 88.8531 96.3643 88.9963 cv
95.9576 89.1394 95.481 89.211 94.9344 89.211 cv
93.3598 89.211 92.2992 88.6449 91.7526 87.5127 cv
91.4468 86.8881 91.2939 85.9674 91.2939 84.7506 cv
91.2939 78.3382 li
94.1438 78.3382 li
cp
106.408 88.9767 mo
103.627 88.9767 li
103.627 74.5904 li
106.408 74.5904 li
106.408 88.9767 li
cp
108.019 80.4172 mo
108.019 78.4359 li
109.502 78.4359 li
109.502 75.4688 li
112.255 75.4688 li
112.255 78.4359 li
113.982 78.4359 li
113.982 80.4172 li
112.255 80.4172 li
112.255 86.039 li
112.255 86.4749 112.31 86.7466 112.421 86.8539 cv
112.531 86.9613 112.87 87.015 113.436 87.015 cv
113.52 87.015 113.61 87.0133 113.704 87.0101 cv
113.798 87.0068 113.891 87.002 113.982 86.9954 cv
113.982 89.0743 li
112.665 89.1231 li
111.35 89.1687 110.452 88.941 109.971 88.4399 cv
109.658 88.1211 109.502 87.6299 109.502 86.9662 cv
109.502 80.4172 li
108.019 80.4172 li
cp
f
[3.99773 3.99773 ] 0 dsh
315 256 mo
298.227 279.22 283.77 292.29 271.63 295.21 cv
.0300298 .723232 .546319 .00167849 cmyk
@
264.35 296.96 mo
272.9 289.76 li
271.63 295.21 li
275.23 299.48 li
264.35 296.96 li
cp
f
[] 0 dsh
264.35 296.96 mo
272.9 289.76 li
271.63 295.21 li
275.23 299.48 li
264.35 296.96 li
cp
@
grestore
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
