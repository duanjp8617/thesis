%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: scaling-work-flow.pdf
%%Creator: Adobe Acrobat 10.0.0
%%For: jpduan
%%CreationDate: 9/8/2017, 10:21:18 PM
%%BoundingBox: 0 0 981 415
%%HiResBoundingBox: 0 0 981 415
%%CropBox: 0 0 981 415
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 626 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2017-04-02T09:22:30"
   xmp:CreatorTool=""
   pdf:Producer="Qt 5.3.0"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -415 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 415 li
981 415 li
981 0 li
cp
clp
0 0 mo
981 0 li
981 414 li
0 414 li
cp
false sop
0 0 0 0 cmyk
f
gsave
0 0 mo
981 0 li
981 415 li
0 415 li
0 0 li
cp
eclp
gsave
0 0 mo
981 0 li
981 414 li
0 414 li
0 0 li
cp
eclp
11.49 61.81 mo
103.41 61.81 li
109.203 61.81 113.9 66.5065 113.9 72.3 cv
113.9 121.26 li
113.9 127.053 109.203 131.75 103.41 131.75 cv
11.49 131.75 li
5.69653 131.75 1 127.053 1 121.26 cv
1 72.3 li
1 66.5065 5.69653 61.81 11.49 61.81 cv
cp
.00866712 .221744 .120668 0 cmyk
f
2 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
11.49 61.81 mo
103.41 61.81 li
109.203 61.81 113.9 66.5065 113.9 72.3 cv
113.9 121.26 li
113.9 127.053 109.203 131.75 103.41 131.75 cv
11.49 131.75 li
5.69653 131.75 1 127.053 1 121.26 cv
1 72.3 li
1 66.5065 5.69653 61.81 11.49 61.81 cv
cp
.21561 .785061 .669032 .0808728 cmyk
@
36.0761 83.0825 mo
35.8713 82.1985 35.3707 81.5809 34.5746 81.2296 cv
34.1296 81.0364 33.635 80.9399 33.0905 80.9399 cv
32.0485 80.9399 31.1923 81.3335 30.522 82.1209 cv
29.8517 82.9083 29.5166 84.0923 29.5166 85.673 cv
29.5166 87.2653 29.8795 88.3922 30.6054 89.0537 cv
31.3313 89.7152 32.1568 90.046 33.0817 90.046 cv
33.9891 90.046 34.7326 89.784 35.3122 89.2601 cv
35.8917 88.7361 36.2488 88.0497 36.3835 87.2009 cv
33.3891 87.2009 li
33.3891 85.0407 li
38.7808 85.0407 li
38.7808 91.9867 li
36.9894 91.9867 li
36.7172 90.3709 li
36.1962 90.9856 35.7278 91.4188 35.3122 91.6705 cv
34.598 92.1096 33.7198 92.3291 32.6778 92.3291 cv
30.9625 92.3291 29.5575 91.7349 28.4628 90.5465 cv
27.3212 89.3523 26.7505 87.719 26.7505 85.6466 cv
26.7505 83.5508 27.3271 81.8707 28.4804 80.6062 cv
29.6336 79.3417 31.1586 78.7094 33.0554 78.7094 cv
34.7004 78.7094 36.022 79.1265 37.0201 79.9607 cv
38.0183 80.795 38.5905 81.8355 38.7369 83.0825 cv
36.0761 83.0825 li
cp
43.7149 91.9867 mo
41.2122 91.9867 li
41.2122 79.0431 li
43.7149 79.0431 li
43.7149 91.9867 li
cp
52.1351 89.4401 mo
52.5273 88.9191 52.7234 88.1785 52.7234 87.2184 cv
52.7234 86.2584 52.5273 85.5193 52.1351 85.0012 cv
51.7429 84.4831 51.1809 84.224 50.4491 84.224 cv
49.7173 84.224 49.1539 84.4831 48.7587 85.0012 cv
48.3636 85.5193 48.166 86.2584 48.166 87.2184 cv
48.166 88.1785 48.3636 88.9191 48.7587 89.4401 cv
49.1539 89.9611 49.7173 90.2216 50.4491 90.2216 cv
51.1809 90.2216 51.7429 89.9611 52.1351 89.4401 cv
cp
54.1372 90.8232 mo
53.3294 91.8213 52.1029 92.3204 50.4579 92.3204 cv
48.8129 92.3204 47.5864 91.8213 46.7785 90.8232 cv
45.9707 89.825 45.5667 88.6235 45.5667 87.2184 cv
45.5667 85.8369 45.9707 84.6397 46.7785 83.6269 cv
47.5864 82.6141 48.8129 82.1078 50.4579 82.1078 cv
52.1029 82.1078 53.3294 82.6141 54.1372 83.6269 cv
54.9451 84.6397 55.349 85.8369 55.349 87.2184 cv
55.349 88.6235 54.9451 89.825 54.1372 90.8232 cv
cp
65.2567 83.5654 mo
65.968 84.4728 66.3237 85.6437 66.3237 87.0779 cv
66.3237 88.5649 65.9724 89.7972 65.2699 90.7749 cv
64.5674 91.7525 63.5868 92.2413 62.3282 92.2413 cv
61.5379 92.2413 60.9027 92.0833 60.4227 91.7671 cv
60.1358 91.5798 59.8255 91.252 59.4918 90.7836 cv
59.4918 91.9867 li
57.0419 91.9867 li
57.0419 79.0607 li
59.5357 79.0607 li
59.5357 83.662 li
59.8519 83.2171 60.2002 82.8776 60.5807 82.6434 cv
61.0315 82.3507 61.6052 82.2044 62.3018 82.2044 cv
63.5605 82.2044 64.5454 82.6581 65.2567 83.5654 cv
cp
63.1624 89.3962 mo
63.5195 88.8752 63.6981 88.1902 63.6981 87.3414 cv
63.6981 86.6623 63.6102 86.1003 63.4346 85.6554 cv
63.1009 84.8124 62.4862 84.3909 61.5906 84.3909 cv
60.6832 84.3909 60.0597 84.8036 59.7202 85.629 cv
59.5445 86.0681 59.4567 86.636 59.4567 87.3326 cv
59.4567 88.1522 59.6382 88.8313 60.0012 89.3699 cv
60.3641 89.9084 60.9173 90.1777 61.6608 90.1777 cv
62.3048 90.1777 62.8053 89.9172 63.1624 89.3962 cv
cp
73.3818 87.3326 mo
73.2238 87.4321 73.0642 87.5126 72.9033 87.5741 cv
72.7423 87.6356 72.5213 87.6926 72.2403 87.7453 cv
71.6783 87.8507 li
71.1514 87.9444 70.7738 88.0585 70.5455 88.1932 cv
70.1591 88.4215 69.9659 88.7757 69.9659 89.2557 cv
69.9659 89.6831 70.0845 89.9919 70.3216 90.1821 cv
70.5587 90.3724 70.847 90.4675 71.1865 90.4675 cv
71.7251 90.4675 72.2212 90.3094 72.6749 89.9933 cv
73.1286 89.6772 73.3643 89.1006 73.3818 88.2634 cv
73.3818 87.3326 li
cp
71.8627 86.1647 mo
72.3251 86.1062 72.6559 86.033 72.8549 85.9452 cv
73.2121 85.793 73.3906 85.5559 73.3906 85.2339 cv
73.3906 84.8417 73.2545 84.5709 72.9823 84.4216 cv
72.7101 84.2723 72.3105 84.1977 71.7836 84.1977 cv
71.1924 84.1977 70.7738 84.3441 70.5279 84.6368 cv
70.3523 84.8534 70.2352 85.1461 70.1767 85.5149 cv
67.7618 85.5149 li
67.8145 84.6777 68.0487 83.9899 68.4643 83.4513 cv
69.1258 82.6083 70.2616 82.1868 71.8715 82.1868 cv
72.9193 82.1868 73.8502 82.3946 74.6639 82.8103 cv
75.4776 83.2259 75.8845 84.0104 75.8845 85.1636 cv
75.8845 89.5543 li
75.8845 89.8587 75.8903 90.2275 75.902 90.6607 cv
75.9196 90.9885 75.9694 91.211 76.0513 91.3281 cv
76.1333 91.4452 76.2562 91.5417 76.4201 91.6179 cv
76.4201 91.9867 li
73.698 91.9867 li
73.6218 91.7935 73.5692 91.612 73.5399 91.4422 cv
73.5106 91.2725 73.4872 91.0793 73.4696 90.8627 cv
73.1242 91.2373 72.7262 91.5564 72.2754 91.8198 cv
71.7368 92.1301 71.128 92.2852 70.4489 92.2852 cv
69.5825 92.2852 68.8668 92.0379 68.3019 91.5432 cv
67.7369 91.0485 67.4545 90.3475 67.4545 89.4401 cv
67.4545 88.2634 67.9082 87.4116 68.8156 86.8848 cv
69.3132 86.5979 70.045 86.393 71.0109 86.2701 cv
71.8627 86.1647 li
cp
80.6507 91.9867 mo
78.1481 91.9867 li
78.1481 79.0431 li
80.6507 79.0431 li
80.6507 91.9867 li
cp
0 0 0 1 cmyk
f
16.6247 101.377 mo
17.6785 100.311 19.0191 99.7786 20.6465 99.7786 cv
22.8243 99.7786 24.4166 100.493 25.4235 101.921 cv
25.9797 102.723 26.2782 103.528 26.3192 104.336 cv
23.6146 104.336 li
23.439 103.715 23.2136 103.247 22.9384 102.931 cv
22.4467 102.369 21.7178 102.088 20.7519 102.088 cv
19.7684 102.088 18.9927 102.485 18.4249 103.278 cv
17.857 104.071 17.5731 105.194 17.5731 106.646 cv
17.5731 108.097 17.8731 109.185 18.4732 109.908 cv
19.0732 110.631 19.8357 110.992 20.7607 110.992 cv
21.709 110.992 22.432 110.682 22.9296 110.061 cv
23.2048 109.728 23.4331 109.227 23.6146 108.56 cv
26.2929 108.56 li
26.0587 109.971 25.4601 111.118 24.4971 112.002 cv
23.5341 112.886 22.3003 113.328 20.7958 113.328 cv
18.9342 113.328 17.4706 112.731 16.4052 111.537 cv
15.3397 110.337 14.807 108.692 14.807 106.602 cv
14.807 104.342 15.4129 102.6 16.6247 101.377 cv
cp
34.1199 110.421 mo
34.5121 109.9 34.7082 109.16 34.7082 108.2 cv
34.7082 107.24 34.5121 106.501 34.1199 105.983 cv
33.7277 105.464 33.1657 105.205 32.4339 105.205 cv
31.7021 105.205 31.1386 105.464 30.7435 105.983 cv
30.3483 106.501 30.1508 107.24 30.1508 108.2 cv
30.1508 109.16 30.3483 109.9 30.7435 110.421 cv
31.1386 110.942 31.7021 111.203 32.4339 111.203 cv
33.1657 111.203 33.7277 110.942 34.1199 110.421 cv
cp
36.122 111.804 mo
35.3141 112.803 34.0877 113.302 32.4427 113.302 cv
30.7976 113.302 29.5712 112.803 28.7633 111.804 cv
27.9554 110.806 27.5515 109.605 27.5515 108.2 cv
27.5515 106.818 27.9554 105.621 28.7633 104.608 cv
29.5712 103.595 30.7976 103.089 32.4427 103.089 cv
34.0877 103.089 35.3141 103.595 36.122 104.608 cv
36.9299 105.621 37.3338 106.818 37.3338 108.2 cv
37.3338 109.605 36.9299 110.806 36.122 111.804 cv
cp
46.8464 103.945 mo
47.4757 104.463 47.7903 105.322 47.7903 106.523 cv
47.7903 112.968 li
45.2262 112.968 li
45.2262 107.146 li
45.2262 106.643 45.1589 106.256 45.0242 105.987 cv
44.7784 105.495 44.31 105.249 43.6192 105.249 cv
42.7704 105.249 42.1879 105.609 41.8718 106.329 cv
41.7079 106.71 41.6259 107.196 41.6259 107.787 cv
41.6259 112.968 li
39.132 112.968 li
39.132 103.414 li
41.5469 103.414 li
41.5469 104.81 li
41.8688 104.318 42.1733 103.964 42.4601 103.748 cv
42.9753 103.361 43.628 103.168 44.4183 103.168 cv
45.4077 103.168 46.217 103.427 46.8464 103.945 cv
cp
49.1056 105.267 mo
49.1056 103.484 li
50.4403 103.484 li
50.4403 100.815 li
52.9166 100.815 li
52.9166 103.484 li
54.4709 103.484 li
54.4709 105.267 li
52.9166 105.267 li
52.9166 110.325 li
52.9166 110.717 52.9664 110.961 53.0659 111.058 cv
53.1654 111.155 53.4699 111.203 53.9792 111.203 cv
54.0553 111.203 54.1358 111.202 54.2206 111.199 cv
54.3055 111.196 54.389 111.191 54.4709 111.185 cv
54.4709 113.056 li
53.2854 113.1 li
52.1029 113.141 51.295 112.936 50.8618 112.485 cv
50.5808 112.198 50.4403 111.756 50.4403 111.159 cv
50.4403 105.267 li
49.1056 105.267 li
cp
61.3852 103.173 mo
61.4174 103.175 61.4891 103.18 61.6003 103.186 cv
61.6003 105.75 li
61.4423 105.732 61.3018 105.721 61.1788 105.715 cv
61.0559 105.709 60.9564 105.706 60.8803 105.706 cv
59.8733 105.706 59.1972 106.034 58.8518 106.689 cv
58.6586 107.058 58.562 107.626 58.562 108.393 cv
58.562 112.968 li
56.0418 112.968 li
56.0418 103.396 li
58.4303 103.396 li
58.4303 105.065 li
58.8167 104.427 59.1533 103.991 59.4401 103.756 cv
59.9085 103.364 60.5173 103.168 61.2666 103.168 cv
61.3135 103.168 61.353 103.17 61.3852 103.173 cv
cp
69.0419 110.421 mo
69.4342 109.9 69.6303 109.16 69.6303 108.2 cv
69.6303 107.24 69.4342 106.501 69.0419 105.983 cv
68.6497 105.464 68.0877 105.205 67.3559 105.205 cv
66.6242 105.205 66.0607 105.464 65.6656 105.983 cv
65.2704 106.501 65.0728 107.24 65.0728 108.2 cv
65.0728 109.16 65.2704 109.9 65.6656 110.421 cv
66.0607 110.942 66.6242 111.203 67.3559 111.203 cv
68.0877 111.203 68.6497 110.942 69.0419 110.421 cv
cp
71.0441 111.804 mo
70.2362 112.803 69.0097 113.302 67.3647 113.302 cv
65.7197 113.302 64.4932 112.803 63.6854 111.804 cv
62.8775 110.806 62.4736 109.605 62.4736 108.2 cv
62.4736 106.818 62.8775 105.621 63.6854 104.608 cv
64.4932 103.595 65.7197 103.089 67.3647 103.089 cv
69.0097 103.089 70.2362 103.595 71.0441 104.608 cv
71.8519 105.621 72.2559 106.818 72.2559 108.2 cv
72.2559 109.605 71.8519 110.806 71.0441 111.804 cv
cp
76.5919 112.968 mo
74.0892 112.968 li
74.0892 100.024 li
76.5919 100.024 li
76.5919 112.968 li
cp
81.5874 112.968 mo
79.0848 112.968 li
79.0848 100.024 li
81.5874 100.024 li
81.5874 112.968 li
cp
86.4556 105.75 mo
86.1366 106.113 85.9361 106.605 85.8541 107.225 cv
89.7442 107.225 li
89.7032 106.564 89.5027 106.062 89.1427 105.719 cv
88.7827 105.377 88.3363 105.205 87.8036 105.205 cv
87.224 105.205 86.7747 105.387 86.4556 105.75 cv
cp
89.955 103.59 mo
90.5931 103.888 91.1199 104.359 91.5356 105.003 cv
91.9103 105.571 92.1532 106.23 92.2644 106.979 cv
92.3288 107.418 92.3552 108.05 92.3435 108.876 cv
85.7927 108.876 li
85.8278 109.836 86.1293 110.509 86.6971 110.896 cv
87.0425 111.136 87.4582 111.256 87.9441 111.256 cv
88.4592 111.256 88.8778 111.109 89.1998 110.817 cv
89.3754 110.659 89.5305 110.439 89.6652 110.158 cv
92.2205 110.158 li
92.1561 110.726 91.8605 111.302 91.3336 111.888 cv
90.514 112.819 89.3666 113.284 87.8914 113.284 cv
86.6737 113.284 85.5995 112.892 84.6687 112.107 cv
83.7378 111.323 83.2724 110.047 83.2724 108.279 cv
83.2724 106.622 83.6925 105.352 84.5325 104.468 cv
85.3726 103.584 86.463 103.142 87.8036 103.142 cv
88.5997 103.142 89.3169 103.291 89.955 103.59 cv
cp
99.3358 103.173 mo
99.368 103.175 99.4397 103.18 99.5509 103.186 cv
99.5509 105.75 li
99.3929 105.732 99.2524 105.721 99.1294 105.715 cv
99.0065 105.709 98.907 105.706 98.8309 105.706 cv
97.824 105.706 97.1478 106.034 96.8024 106.689 cv
96.6092 107.058 96.5126 107.626 96.5126 108.393 cv
96.5126 112.968 li
93.9924 112.968 li
93.9924 103.396 li
96.3809 103.396 li
96.3809 105.065 li
96.7673 104.427 97.1039 103.991 97.3907 103.756 cv
97.8591 103.364 98.4679 103.168 99.2172 103.168 cv
99.2641 103.168 99.3036 103.17 99.3358 103.173 cv
cp
f
11.49 201.69 mo
103.41 201.69 li
109.203 201.69 113.9 206.387 113.9 212.18 cv
113.9 261.14 li
113.9 266.933 109.203 271.63 103.41 271.63 cv
11.49 271.63 li
5.69653 271.63 1 266.933 1 261.14 cv
1 212.18 li
1 206.387 5.69653 201.69 11.49 201.69 cv
cp
.124392 .0435798 0 0 cmyk
f
11.49 201.69 mo
103.41 201.69 li
109.203 201.69 113.9 206.387 113.9 212.18 cv
113.9 261.14 li
113.9 266.933 109.203 271.63 103.41 271.63 cv
11.49 271.63 li
5.69653 271.63 1 266.933 1 261.14 cv
1 212.18 li
1 206.387 5.69653 201.69 11.49 201.69 cv
cp
.609766 .380713 .064271 0 cmyk
@
34.861 219.043 mo
37.5657 219.043 li
37.5657 229.66 li
43.976 229.66 li
43.976 231.987 li
34.861 231.987 li
34.861 219.043 li
cp
51.6137 229.44 mo
52.0059 228.919 52.2021 228.179 52.2021 227.218 cv
52.2021 226.258 52.0059 225.519 51.6137 225.001 cv
51.2215 224.483 50.6595 224.224 49.9277 224.224 cv
49.1959 224.224 48.6325 224.483 48.2373 225.001 cv
47.8422 225.519 47.6446 226.258 47.6446 227.218 cv
47.6446 228.179 47.8422 228.919 48.2373 229.44 cv
48.6325 229.961 49.1959 230.222 49.9277 230.222 cv
50.6595 230.222 51.2215 229.961 51.6137 229.44 cv
cp
53.6158 230.823 mo
52.808 231.821 51.5815 232.32 49.9365 232.32 cv
48.2915 232.32 47.065 231.821 46.2572 230.823 cv
45.4493 229.825 45.0453 228.623 45.0453 227.218 cv
45.0453 225.837 45.4493 224.64 46.2572 223.627 cv
47.065 222.614 48.2915 222.108 49.9365 222.108 cv
51.5815 222.108 52.808 222.614 53.6158 223.627 cv
54.4237 224.64 54.8277 225.837 54.8277 227.218 cv
54.8277 228.623 54.4237 229.825 53.6158 230.823 cv
cp
62.3249 225.849 mo
62.2781 225.491 62.158 225.169 61.9649 224.883 cv
61.6839 224.496 61.2477 224.303 60.6565 224.303 cv
59.8134 224.303 59.2368 224.722 58.9265 225.559 cv
58.7626 226.004 58.6807 226.595 58.6807 227.333 cv
58.6807 228.035 58.7626 228.6 58.9265 229.027 cv
59.2251 229.824 59.7871 230.222 60.6125 230.222 cv
61.198 230.222 61.6136 230.064 61.8595 229.747 cv
62.1054 229.431 62.2546 229.022 62.3073 228.518 cv
64.8627 228.518 li
64.8041 229.279 64.529 229.999 64.0372 230.678 cv
63.2528 231.773 62.0907 232.32 60.5511 232.32 cv
59.0114 232.32 57.8787 231.864 57.1527 230.95 cv
56.4268 230.037 56.0639 228.852 56.0639 227.394 cv
56.0639 225.749 56.4649 224.47 57.2669 223.557 cv
58.0689 222.643 59.1753 222.187 60.5862 222.187 cv
61.7863 222.187 62.7683 222.456 63.5323 222.995 cv
64.2963 223.533 64.7485 224.485 64.889 225.849 cv
62.3249 225.849 li
cp
71.8769 227.333 mo
71.7189 227.432 71.5593 227.513 71.3984 227.574 cv
71.2374 227.636 71.0164 227.693 70.7354 227.745 cv
70.1734 227.851 li
69.6465 227.944 69.2689 228.059 69.0406 228.193 cv
68.6542 228.421 68.461 228.776 68.461 229.256 cv
68.461 229.683 68.5796 229.992 68.8167 230.182 cv
69.0538 230.372 69.3421 230.468 69.6816 230.468 cv
70.2202 230.468 70.7163 230.309 71.17 229.993 cv
71.6237 229.677 71.8594 229.101 71.8769 228.263 cv
71.8769 227.333 li
cp
70.3578 226.165 mo
70.8203 226.106 71.151 226.033 71.3501 225.945 cv
71.7072 225.793 71.8857 225.556 71.8857 225.234 cv
71.8857 224.842 71.7496 224.571 71.4774 224.422 cv
71.2052 224.272 70.8056 224.198 70.2787 224.198 cv
69.6875 224.198 69.2689 224.344 69.023 224.637 cv
68.8474 224.853 68.7303 225.146 68.6718 225.515 cv
66.2569 225.515 li
66.3096 224.678 66.5438 223.99 66.9594 223.451 cv
67.621 222.608 68.7567 222.187 70.3666 222.187 cv
71.4145 222.187 72.3453 222.395 73.159 222.81 cv
73.9727 223.226 74.3796 224.01 74.3796 225.164 cv
74.3796 229.554 li
74.3796 229.859 74.3854 230.227 74.3972 230.661 cv
74.4147 230.989 74.4645 231.211 74.5464 231.328 cv
74.6284 231.445 74.7513 231.542 74.9153 231.618 cv
74.9153 231.987 li
72.1931 231.987 li
72.117 231.793 72.0643 231.612 72.035 231.442 cv
72.0057 231.272 71.9823 231.079 71.9648 230.863 cv
71.6194 231.237 71.2213 231.556 70.7705 231.82 cv
70.2319 232.13 69.6231 232.285 68.944 232.285 cv
68.0776 232.285 67.3619 232.038 66.797 231.543 cv
66.2321 231.049 65.9496 230.348 65.9496 229.44 cv
65.9496 228.263 66.4033 227.412 67.3107 226.885 cv
67.8083 226.598 68.5401 226.393 69.506 226.27 cv
70.3578 226.165 li
cp
79.1459 231.987 mo
76.6432 231.987 li
76.6432 219.043 li
79.1459 219.043 li
79.1459 231.987 li
cp
0 0 0 1 cmyk
f
9.62471 241.377 mo
10.6785 240.311 12.0191 239.779 13.6465 239.779 cv
15.8243 239.779 17.4166 240.493 18.4235 241.921 cv
18.9797 242.723 19.2782 243.528 19.3192 244.336 cv
16.6146 244.336 li
16.439 243.715 16.2136 243.247 15.9384 242.931 cv
15.4467 242.369 14.7178 242.088 13.7519 242.088 cv
12.7684 242.088 11.9927 242.485 11.4249 243.278 cv
10.857 244.071 10.5731 245.194 10.5731 246.645 cv
10.5731 248.097 10.8731 249.185 11.4732 249.908 cv
12.0732 250.631 12.8357 250.992 13.7607 250.992 cv
14.709 250.992 15.432 250.682 15.9296 250.061 cv
16.2048 249.728 16.4331 249.227 16.6146 248.56 cv
19.2929 248.56 li
19.0587 249.971 18.4601 251.118 17.4971 252.002 cv
16.5341 252.886 15.3003 253.328 13.7958 253.328 cv
11.9342 253.328 10.4706 252.731 9.40517 251.537 cv
8.33972 250.337 7.80699 248.692 7.80699 246.602 cv
7.80699 244.342 8.41289 242.6 9.62471 241.377 cv
cp
27.1199 250.421 mo
27.5121 249.9 27.7082 249.16 27.7082 248.2 cv
27.7082 247.24 27.5121 246.501 27.1199 245.983 cv
26.7277 245.464 26.1657 245.205 25.4339 245.205 cv
24.7021 245.205 24.1386 245.464 23.7435 245.983 cv
23.3483 246.501 23.1508 247.24 23.1508 248.2 cv
23.1508 249.16 23.3483 249.9 23.7435 250.421 cv
24.1386 250.942 24.7021 251.203 25.4339 251.203 cv
26.1657 251.203 26.7277 250.942 27.1199 250.421 cv
cp
29.122 251.804 mo
28.3141 252.803 27.0877 253.302 25.4427 253.302 cv
23.7976 253.302 22.5712 252.803 21.7633 251.804 cv
20.9554 250.806 20.5515 249.605 20.5515 248.2 cv
20.5515 246.818 20.9554 245.621 21.7633 244.608 cv
22.5712 243.595 23.7976 243.089 25.4427 243.089 cv
27.0877 243.089 28.3141 243.595 29.122 244.608 cv
29.9299 245.621 30.3338 246.818 30.3338 248.2 cv
30.3338 249.605 29.9299 250.806 29.122 251.804 cv
cp
39.8464 243.945 mo
40.4757 244.463 40.7903 245.322 40.7903 246.523 cv
40.7903 252.968 li
38.2262 252.968 li
38.2262 247.146 li
38.2262 246.643 38.1589 246.256 38.0242 245.987 cv
37.7784 245.495 37.31 245.249 36.6192 245.249 cv
35.7704 245.249 35.1879 245.609 34.8718 246.329 cv
34.7079 246.71 34.6259 247.196 34.6259 247.787 cv
34.6259 252.968 li
32.132 252.968 li
32.132 243.414 li
34.5469 243.414 li
34.5469 244.81 li
34.8688 244.318 35.1733 243.964 35.4601 243.748 cv
35.9753 243.361 36.628 243.168 37.4183 243.168 cv
38.4077 243.168 39.217 243.427 39.8464 243.945 cv
cp
42.1056 245.267 mo
42.1056 243.484 li
43.4403 243.484 li
43.4403 240.815 li
45.9166 240.815 li
45.9166 243.484 li
47.4709 243.484 li
47.4709 245.267 li
45.9166 245.267 li
45.9166 250.325 li
45.9166 250.717 45.9664 250.961 46.0659 251.058 cv
46.1654 251.155 46.4699 251.203 46.9792 251.203 cv
47.0553 251.203 47.1358 251.202 47.2206 251.199 cv
47.3055 251.196 47.389 251.191 47.4709 251.185 cv
47.4709 253.056 li
46.2854 253.1 li
45.1029 253.141 44.295 252.936 43.8618 252.485 cv
43.5808 252.198 43.4403 251.756 43.4403 251.159 cv
43.4403 245.267 li
42.1056 245.267 li
cp
54.3852 243.173 mo
54.4174 243.175 54.4891 243.18 54.6003 243.186 cv
54.6003 245.75 li
54.4423 245.732 54.3018 245.721 54.1788 245.715 cv
54.0559 245.709 53.9564 245.706 53.8803 245.706 cv
52.8733 245.706 52.1972 246.034 51.8518 246.689 cv
51.6586 247.058 51.562 247.626 51.562 248.393 cv
51.562 252.968 li
49.0418 252.968 li
49.0418 243.396 li
51.4303 243.396 li
51.4303 245.065 li
51.8167 244.427 52.1533 243.991 52.4401 243.756 cv
52.9085 243.364 53.5173 243.168 54.2666 243.168 cv
54.3135 243.168 54.353 243.17 54.3852 243.173 cv
cp
62.0419 250.421 mo
62.4342 249.9 62.6303 249.16 62.6303 248.2 cv
62.6303 247.24 62.4342 246.501 62.0419 245.983 cv
61.6497 245.464 61.0877 245.205 60.3559 245.205 cv
59.6242 245.205 59.0607 245.464 58.6655 245.983 cv
58.2704 246.501 58.0728 247.24 58.0728 248.2 cv
58.0728 249.16 58.2704 249.9 58.6655 250.421 cv
59.0607 250.942 59.6242 251.203 60.3559 251.203 cv
61.0877 251.203 61.6497 250.942 62.0419 250.421 cv
cp
64.0441 251.804 mo
63.2362 252.803 62.0097 253.302 60.3647 253.302 cv
58.7197 253.302 57.4933 252.803 56.6854 251.804 cv
55.8775 250.806 55.4736 249.605 55.4736 248.2 cv
55.4736 246.818 55.8775 245.621 56.6854 244.608 cv
57.4933 243.595 58.7197 243.089 60.3647 243.089 cv
62.0097 243.089 63.2362 243.595 64.0441 244.608 cv
64.8519 245.621 65.2559 246.818 65.2559 248.2 cv
65.2559 249.605 64.8519 250.806 64.0441 251.804 cv
cp
69.5919 252.968 mo
67.0892 252.968 li
67.0892 240.024 li
69.5919 240.024 li
69.5919 252.968 li
cp
74.5874 252.968 mo
72.0848 252.968 li
72.0848 240.024 li
74.5874 240.024 li
74.5874 252.968 li
cp
79.4556 245.75 mo
79.1366 246.113 78.9361 246.605 78.8541 247.225 cv
82.7442 247.225 li
82.7032 246.564 82.5027 246.062 82.1427 245.719 cv
81.7827 245.377 81.3363 245.205 80.8036 245.205 cv
80.224 245.205 79.7747 245.387 79.4556 245.75 cv
cp
82.955 243.59 mo
83.5931 243.888 84.1199 244.359 84.5356 245.003 cv
84.9103 245.571 85.1532 246.23 85.2644 246.979 cv
85.3288 247.418 85.3552 248.051 85.3435 248.876 cv
78.7927 248.876 li
78.8278 249.836 79.1293 250.509 79.6971 250.896 cv
80.0425 251.136 80.4582 251.256 80.9441 251.256 cv
81.4592 251.256 81.8778 251.109 82.1998 250.817 cv
82.3754 250.659 82.5305 250.439 82.6652 250.158 cv
85.2205 250.158 li
85.1561 250.726 84.8605 251.302 84.3336 251.888 cv
83.514 252.819 82.3666 253.284 80.8914 253.284 cv
79.6737 253.284 78.5995 252.892 77.6687 252.107 cv
76.7378 251.323 76.2724 250.047 76.2724 248.279 cv
76.2724 246.622 76.6925 245.352 77.5325 244.468 cv
78.3726 243.584 79.463 243.142 80.8036 243.142 cv
81.5997 243.142 82.3169 243.291 82.955 243.59 cv
cp
92.3358 243.173 mo
92.368 243.175 92.4397 243.18 92.5509 243.186 cv
92.5509 245.75 li
92.3929 245.732 92.2524 245.721 92.1294 245.715 cv
92.0065 245.709 91.907 245.706 91.8309 245.706 cv
90.824 245.706 90.1478 246.034 89.8024 246.689 cv
89.6092 247.058 89.5126 247.626 89.5126 248.393 cv
89.5126 252.968 li
86.9924 252.968 li
86.9924 243.396 li
89.3809 243.396 li
89.3809 245.065 li
89.7673 244.427 90.1039 243.991 90.3907 243.756 cv
90.8591 243.364 91.4679 243.168 92.2172 243.168 cv
92.2641 243.168 92.3036 243.17 92.3358 243.173 cv
cp
99.0871 244.187 mo
99.0871 242.483 li
99.8774 242.448 100.431 242.395 100.747 242.325 cv
101.25 242.214 101.66 241.991 101.976 241.658 cv
102.193 241.429 102.357 241.125 102.468 240.745 cv
102.532 240.516 102.564 240.346 102.564 240.235 cv
104.646 240.235 li
104.646 252.968 li
102.082 252.968 li
102.082 244.187 li
99.0871 244.187 li
cp
f
11.49 341.56 mo
103.41 341.56 li
109.203 341.56 113.9 346.257 113.9 352.05 cv
113.9 401.01 li
113.9 406.803 109.203 411.5 103.41 411.5 cv
11.49 411.5 li
5.69653 411.5 1 406.803 1 401.01 cv
1 352.05 li
1 346.257 5.69653 341.56 11.49 341.56 cv
cp
.124392 .0435798 0 0 cmyk
f
11.49 341.56 mo
103.41 341.56 li
109.203 341.56 113.9 346.257 113.9 352.05 cv
113.9 401.01 li
113.9 406.803 109.203 411.5 103.41 411.5 cv
11.49 411.5 li
5.69653 411.5 1 406.803 1 401.01 cv
1 352.05 li
1 346.257 5.69653 341.56 11.49 341.56 cv
cp
.609766 .380713 .064271 0 cmyk
@
32.3633 359.043 mo
35.0679 359.043 li
35.0679 369.66 li
41.4782 369.66 li
41.4782 371.987 li
32.3633 371.987 li
32.3633 359.043 li
cp
49.1159 369.44 mo
49.5082 368.919 49.7043 368.179 49.7043 367.218 cv
49.7043 366.258 49.5082 365.519 49.1159 365.001 cv
48.7237 364.483 48.1617 364.224 47.4299 364.224 cv
46.6982 364.224 46.1347 364.483 45.7395 365.001 cv
45.3444 365.519 45.1468 366.258 45.1468 367.218 cv
45.1468 368.179 45.3444 368.919 45.7395 369.44 cv
46.1347 369.961 46.6982 370.222 47.4299 370.222 cv
48.1617 370.222 48.7237 369.961 49.1159 369.44 cv
cp
51.1181 370.823 mo
50.3102 371.821 49.0837 372.32 47.4387 372.32 cv
45.7937 372.32 44.5672 371.821 43.7594 370.823 cv
42.9515 369.825 42.5476 368.623 42.5476 367.218 cv
42.5476 365.837 42.9515 364.64 43.7594 363.627 cv
44.5672 362.614 45.7937 362.108 47.4387 362.108 cv
49.0837 362.108 50.3102 362.614 51.1181 363.627 cv
51.9259 364.64 52.3299 365.837 52.3299 367.218 cv
52.3299 368.623 51.9259 369.825 51.1181 370.823 cv
cp
59.8271 365.849 mo
59.7803 365.491 59.6603 365.169 59.4671 364.883 cv
59.1861 364.496 58.7499 364.303 58.1587 364.303 cv
57.3157 364.303 56.739 364.722 56.4288 365.559 cv
56.2649 366.004 56.1829 366.595 56.1829 367.333 cv
56.1829 368.035 56.2649 368.6 56.4288 369.027 cv
56.7273 369.824 57.2893 370.222 58.1148 370.222 cv
58.7002 370.222 59.1158 370.064 59.3617 369.747 cv
59.6076 369.431 59.7569 369.022 59.8095 368.518 cv
62.3649 368.518 li
62.3064 369.279 62.0312 369.999 61.5395 370.678 cv
60.755 371.773 59.5929 372.32 58.0533 372.32 cv
56.5137 372.32 55.3809 371.864 54.655 370.95 cv
53.929 370.037 53.5661 368.852 53.5661 367.394 cv
53.5661 365.749 53.9671 364.47 54.7691 363.557 cv
55.5711 362.643 56.6776 362.187 58.0884 362.187 cv
59.2885 362.187 60.2706 362.456 61.0345 362.995 cv
61.7985 363.533 62.2507 364.485 62.3912 365.849 cv
59.8271 365.849 li
cp
69.3792 367.333 mo
69.2211 367.432 69.0616 367.513 68.9006 367.574 cv
68.7396 367.636 68.5186 367.693 68.2376 367.745 cv
67.6756 367.851 li
67.1487 367.944 66.7711 368.059 66.5428 368.193 cv
66.1564 368.421 65.9633 368.776 65.9633 369.256 cv
65.9633 369.683 66.0818 369.992 66.3189 370.182 cv
66.556 370.372 66.8443 370.467 67.1838 370.467 cv
67.7224 370.467 68.2186 370.309 68.6723 369.993 cv
69.126 369.677 69.3616 369.101 69.3792 368.263 cv
69.3792 367.333 li
cp
67.86 366.165 mo
68.3225 366.106 68.6532 366.033 68.8523 365.945 cv
69.2094 365.793 69.3879 365.556 69.3879 365.234 cv
69.3879 364.842 69.2518 364.571 68.9796 364.422 cv
68.7074 364.272 68.3078 364.198 67.781 364.198 cv
67.1897 364.198 66.7711 364.344 66.5253 364.637 cv
66.3496 364.853 66.2325 365.146 66.174 365.515 cv
63.7592 365.515 li
63.8118 364.678 64.046 363.99 64.4617 363.451 cv
65.1232 362.608 66.2589 362.187 67.8688 362.187 cv
68.9167 362.187 69.8475 362.395 70.6612 362.81 cv
71.475 363.226 71.8818 364.01 71.8818 365.164 cv
71.8818 369.554 li
71.8818 369.859 71.8877 370.227 71.8994 370.661 cv
71.9169 370.989 71.9667 371.211 72.0487 371.328 cv
72.1306 371.445 72.2536 371.542 72.4175 371.618 cv
72.4175 371.987 li
69.6953 371.987 li
69.6192 371.793 69.5665 371.612 69.5372 371.442 cv
69.5079 371.272 69.4845 371.079 69.467 370.863 cv
69.1216 371.237 68.7235 371.556 68.2727 371.82 cv
67.7341 372.13 67.1253 372.285 66.4462 372.285 cv
65.5798 372.285 64.8641 372.038 64.2992 371.543 cv
63.7343 371.049 63.4518 370.348 63.4518 369.44 cv
63.4518 368.263 63.9055 367.412 64.8129 366.885 cv
65.3105 366.598 66.0423 366.393 67.0082 366.27 cv
67.86 366.165 li
cp
76.6481 371.987 mo
74.1454 371.987 li
74.1454 359.043 li
76.6481 359.043 li
76.6481 371.987 li
cp
0 0 0 1 cmyk
f
9.62471 381.377 mo
10.6785 380.311 12.0191 379.779 13.6465 379.779 cv
15.8243 379.779 17.4166 380.493 18.4235 381.921 cv
18.9797 382.723 19.2782 383.528 19.3192 384.336 cv
16.6146 384.336 li
16.439 383.715 16.2136 383.247 15.9384 382.931 cv
15.4467 382.369 14.7178 382.088 13.7519 382.088 cv
12.7684 382.088 11.9927 382.485 11.4249 383.278 cv
10.857 384.071 10.5731 385.194 10.5731 386.646 cv
10.5731 388.097 10.8731 389.185 11.4732 389.908 cv
12.0732 390.631 12.8357 390.992 13.7607 390.992 cv
14.709 390.992 15.432 390.682 15.9296 390.061 cv
16.2048 389.728 16.4331 389.227 16.6146 388.56 cv
19.2929 388.56 li
19.0587 389.971 18.4601 391.118 17.4971 392.002 cv
16.5341 392.886 15.3003 393.328 13.7958 393.328 cv
11.9342 393.328 10.4706 392.731 9.40517 391.537 cv
8.33972 390.337 7.80699 388.692 7.80699 386.602 cv
7.80699 384.342 8.41289 382.6 9.62471 381.377 cv
cp
27.1199 390.421 mo
27.5121 389.9 27.7082 389.16 27.7082 388.2 cv
27.7082 387.24 27.5121 386.501 27.1199 385.983 cv
26.7277 385.464 26.1657 385.205 25.4339 385.205 cv
24.7021 385.205 24.1386 385.464 23.7435 385.983 cv
23.3483 386.501 23.1508 387.24 23.1508 388.2 cv
23.1508 389.16 23.3483 389.9 23.7435 390.421 cv
24.1386 390.942 24.7021 391.203 25.4339 391.203 cv
26.1657 391.203 26.7277 390.942 27.1199 390.421 cv
cp
29.122 391.804 mo
28.3141 392.803 27.0877 393.302 25.4427 393.302 cv
23.7976 393.302 22.5712 392.803 21.7633 391.804 cv
20.9554 390.806 20.5515 389.605 20.5515 388.2 cv
20.5515 386.818 20.9554 385.621 21.7633 384.608 cv
22.5712 383.595 23.7976 383.089 25.4427 383.089 cv
27.0877 383.089 28.3141 383.595 29.122 384.608 cv
29.9299 385.621 30.3338 386.818 30.3338 388.2 cv
30.3338 389.605 29.9299 390.806 29.122 391.804 cv
cp
39.8464 383.945 mo
40.4757 384.463 40.7903 385.322 40.7903 386.523 cv
40.7903 392.968 li
38.2262 392.968 li
38.2262 387.146 li
38.2262 386.643 38.1589 386.256 38.0242 385.987 cv
37.7784 385.495 37.31 385.249 36.6192 385.249 cv
35.7704 385.249 35.1879 385.609 34.8718 386.329 cv
34.7079 386.71 34.6259 387.196 34.6259 387.787 cv
34.6259 392.968 li
32.132 392.968 li
32.132 383.414 li
34.5469 383.414 li
34.5469 384.81 li
34.8688 384.318 35.1733 383.964 35.4601 383.748 cv
35.9753 383.361 36.628 383.168 37.4183 383.168 cv
38.4077 383.168 39.217 383.427 39.8464 383.945 cv
cp
42.1056 385.267 mo
42.1056 383.484 li
43.4403 383.484 li
43.4403 380.815 li
45.9166 380.815 li
45.9166 383.484 li
47.4709 383.484 li
47.4709 385.267 li
45.9166 385.267 li
45.9166 390.325 li
45.9166 390.717 45.9664 390.961 46.0659 391.058 cv
46.1654 391.155 46.4699 391.203 46.9792 391.203 cv
47.0553 391.203 47.1358 391.202 47.2206 391.199 cv
47.3055 391.196 47.389 391.191 47.4709 391.185 cv
47.4709 393.056 li
46.2854 393.1 li
45.1029 393.141 44.295 392.936 43.8618 392.485 cv
43.5808 392.198 43.4403 391.756 43.4403 391.159 cv
43.4403 385.267 li
42.1056 385.267 li
cp
54.3852 383.173 mo
54.4174 383.175 54.4891 383.18 54.6003 383.186 cv
54.6003 385.75 li
54.4423 385.732 54.3018 385.721 54.1788 385.715 cv
54.0559 385.709 53.9564 385.706 53.8803 385.706 cv
52.8733 385.706 52.1972 386.034 51.8518 386.689 cv
51.6586 387.058 51.562 387.626 51.562 388.393 cv
51.562 392.968 li
49.0418 392.968 li
49.0418 383.396 li
51.4303 383.396 li
51.4303 385.065 li
51.8167 384.427 52.1533 383.991 52.4401 383.756 cv
52.9085 383.364 53.5173 383.168 54.2666 383.168 cv
54.3135 383.168 54.353 383.17 54.3852 383.173 cv
cp
62.0419 390.421 mo
62.4342 389.9 62.6303 389.16 62.6303 388.2 cv
62.6303 387.24 62.4342 386.501 62.0419 385.983 cv
61.6497 385.464 61.0877 385.205 60.3559 385.205 cv
59.6242 385.205 59.0607 385.464 58.6655 385.983 cv
58.2704 386.501 58.0728 387.24 58.0728 388.2 cv
58.0728 389.16 58.2704 389.9 58.6655 390.421 cv
59.0607 390.942 59.6242 391.203 60.3559 391.203 cv
61.0877 391.203 61.6497 390.942 62.0419 390.421 cv
cp
64.0441 391.804 mo
63.2362 392.803 62.0097 393.302 60.3647 393.302 cv
58.7197 393.302 57.4933 392.803 56.6854 391.804 cv
55.8775 390.806 55.4736 389.605 55.4736 388.2 cv
55.4736 386.818 55.8775 385.621 56.6854 384.608 cv
57.4933 383.595 58.7197 383.089 60.3647 383.089 cv
62.0097 383.089 63.2362 383.595 64.0441 384.608 cv
64.8519 385.621 65.2559 386.818 65.2559 388.2 cv
65.2559 389.605 64.8519 390.806 64.0441 391.804 cv
cp
69.5919 392.968 mo
67.0892 392.968 li
67.0892 380.024 li
69.5919 380.024 li
69.5919 392.968 li
cp
74.5874 392.968 mo
72.0848 392.968 li
72.0848 380.024 li
74.5874 380.024 li
74.5874 392.968 li
cp
79.4556 385.75 mo
79.1366 386.113 78.9361 386.605 78.8541 387.225 cv
82.7442 387.225 li
82.7032 386.564 82.5027 386.062 82.1427 385.719 cv
81.7827 385.377 81.3363 385.205 80.8036 385.205 cv
80.224 385.205 79.7747 385.387 79.4556 385.75 cv
cp
82.955 383.59 mo
83.5931 383.888 84.1199 384.359 84.5356 385.003 cv
84.9103 385.571 85.1532 386.23 85.2644 386.979 cv
85.3288 387.418 85.3552 388.051 85.3435 388.876 cv
78.7927 388.876 li
78.8278 389.836 79.1293 390.509 79.6971 390.896 cv
80.0425 391.136 80.4582 391.256 80.9441 391.256 cv
81.4592 391.256 81.8778 391.109 82.1998 390.817 cv
82.3754 390.659 82.5305 390.439 82.6652 390.158 cv
85.2205 390.158 li
85.1561 390.726 84.8605 391.302 84.3336 391.888 cv
83.514 392.819 82.3666 393.284 80.8914 393.284 cv
79.6737 393.284 78.5995 392.892 77.6687 392.107 cv
76.7378 391.323 76.2724 390.047 76.2724 388.279 cv
76.2724 386.622 76.6925 385.352 77.5325 384.468 cv
78.3726 383.584 79.463 383.142 80.8036 383.142 cv
81.5997 383.142 82.3169 383.291 82.955 383.59 cv
cp
92.3358 383.173 mo
92.368 383.175 92.4397 383.18 92.5509 383.186 cv
92.5509 385.75 li
92.3929 385.732 92.2524 385.721 92.1294 385.715 cv
92.0065 385.709 91.907 385.706 91.8309 385.706 cv
90.824 385.706 90.1478 386.034 89.8024 386.689 cv
89.6092 387.058 89.5126 387.626 89.5126 388.393 cv
89.5126 392.968 li
86.9924 392.968 li
86.9924 383.396 li
89.3809 383.396 li
89.3809 385.065 li
89.7673 384.427 90.1039 383.991 90.3907 383.756 cv
90.8591 383.364 91.4679 383.168 92.2172 383.168 cv
92.2641 383.168 92.3036 383.17 92.3358 383.173 cv
cp
98.9905 390.465 mo
99.3476 389.616 100.191 388.718 101.52 387.77 cv
102.673 386.944 103.419 386.353 103.759 385.996 cv
104.28 385.44 104.54 384.831 104.54 384.169 cv
104.54 383.631 104.391 383.183 104.092 382.826 cv
103.794 382.469 103.367 382.29 102.81 382.29 cv
102.049 382.29 101.531 382.574 101.256 383.142 cv
101.098 383.47 101.004 383.991 100.975 384.705 cv
98.5427 384.705 li
98.5836 383.622 98.7798 382.747 99.131 382.079 cv
99.7984 380.809 100.984 380.174 102.687 380.174 cv
104.034 380.174 105.105 380.547 105.901 381.293 cv
106.698 382.04 107.096 383.028 107.096 384.257 cv
107.096 385.2 106.815 386.037 106.253 386.768 cv
105.884 387.254 105.278 387.796 104.435 388.393 cv
103.434 389.104 li
102.807 389.549 102.379 389.871 102.147 390.07 cv
101.916 390.269 101.721 390.5 101.563 390.764 cv
107.122 390.764 li
107.122 392.968 li
98.4022 392.968 li
98.4256 392.055 98.6217 391.221 98.9905 390.465 cv
cp
f
968.14 95.41 mo
968.14 102.4 li
968.14 103.228 967.468 103.9 966.64 103.9 cv
115.4 103.9 li
114.572 103.9 113.9 103.228 113.9 102.4 cv
113.9 95.41 li
113.9 94.5816 114.572 93.91 115.4 93.91 cv
966.64 93.91 li
967.468 93.91 968.14 94.5816 968.14 95.41 cv
cp
0 0 0 .0327459 cmyk
f
1 lw
968.14 95.41 mo
968.14 102.4 li
968.14 103.228 967.468 103.9 966.64 103.9 cv
115.4 103.9 li
114.572 103.9 113.9 103.228 113.9 102.4 cv
113.9 95.41 li
113.9 94.5816 114.572 93.91 115.4 93.91 cv
966.64 93.91 li
967.468 93.91 968.14 94.5816 968.14 95.41 cv
cp
0 0 0 .719265 cmyk
@
968.14 235.29 mo
968.14 242.28 li
968.14 243.108 967.468 243.78 966.64 243.78 cv
115.4 243.78 li
114.572 243.78 113.9 243.108 113.9 242.28 cv
113.9 235.29 li
113.9 234.462 114.572 233.79 115.4 233.79 cv
966.64 233.79 li
967.468 233.79 968.14 234.462 968.14 235.29 cv
cp
0 0 0 .0327459 cmyk
f
968.14 235.29 mo
968.14 242.28 li
968.14 243.108 967.468 243.78 966.64 243.78 cv
115.4 243.78 li
114.572 243.78 113.9 243.108 113.9 242.28 cv
113.9 235.29 li
113.9 234.462 114.572 233.79 115.4 233.79 cv
966.64 233.79 li
967.468 233.79 968.14 234.462 968.14 235.29 cv
cp
0 0 0 .719265 cmyk
@
967.14 375.16 mo
967.14 382.15 li
967.14 382.978 966.468 383.65 965.64 383.65 cv
114.4 383.65 li
113.572 383.65 112.9 382.978 112.9 382.15 cv
112.9 375.16 li
112.9 374.332 113.572 373.66 114.4 373.66 cv
965.64 373.66 li
966.468 373.66 967.14 374.332 967.14 375.16 cv
cp
0 0 0 .0327459 cmyk
f
967.14 375.16 mo
967.14 382.15 li
967.14 382.978 966.468 383.65 965.64 383.65 cv
114.4 383.65 li
113.572 383.65 112.9 382.978 112.9 382.15 cv
112.9 375.16 li
112.9 374.332 113.572 373.66 114.4 373.66 cv
965.64 373.66 li
966.468 373.66 967.14 374.332 967.14 375.16 cv
cp
0 0 0 .719265 cmyk
@
5 lw
141.37 92.42 mo
141.37 72.44 li
141.37 65.7733 144.703 62.44 151.37 62.44 cv
171.35 62.44 li
178.01 62.44 181.34 65.1333 181.34 70.52 cv
181.34 78.59 li
.0300298 .723232 .546319 .00167849 cmyk
@
181.34 86.83 mo
175.84 75.84 li
181.34 78.59 li
186.83 75.84 li
181.34 86.83 li
cp
f
181.34 86.83 mo
175.84 75.84 li
181.34 78.59 li
186.83 75.84 li
181.34 86.83 li
cp
@
grestore
grestore
gsave
0 0 mo
981 0 li
981 415 li
0 415 li
0 0 li
cp
eclp
gsave
0 0 mo
981 0 li
981 414 li
0 414 li
0 0 li
cp
eclp
gsave
96 8 mo
215.893 8 li
215.893 55.9573 li
96 55.9573 li
96 8 li
cp
eclp
98.3846 15.2279 mo
98.3846 13.3351 li
99.2627 13.2961 99.8774 13.2375 100.229 13.1595 cv
100.788 13.0359 101.243 12.7887 101.595 12.4179 cv
101.835 12.1643 102.017 11.826 102.141 11.4032 cv
102.213 11.1495 102.248 10.9609 102.248 10.8373 cv
104.561 10.8373 li
104.561 24.9849 li
101.712 24.9849 li
101.712 15.2279 li
98.3846 15.2279 li
cp
109.348 22.0773 mo
112.304 22.0773 li
112.304 24.9849 li
109.348 24.9849 li
109.348 22.0773 li
cp
122.666 10.6032 mo
124.568 18.838 li
124.978 21.1309 li
125.398 18.8868 li
127.017 10.6032 li
130.188 10.6032 li
131.896 18.838 li
132.335 21.1309 li
132.774 18.9258 li
134.696 10.6032 li
137.75 10.6032 li
133.701 24.9849 li
130.832 24.9849 li
129.096 16.5744 li
128.588 13.7937 li
128.081 16.5744 li
126.344 24.9849 li
123.554 24.9849 li
119.475 10.6032 li
122.666 10.6032 li
cp
145.983 22.1554 mo
146.419 21.5765 146.637 20.7536 146.637 19.6869 cv
146.637 18.6201 146.419 17.7989 145.983 17.2232 cv
145.547 16.6476 144.923 16.3598 144.11 16.3598 cv
143.296 16.3598 142.67 16.6476 142.231 17.2232 cv
141.792 17.7989 141.573 18.6201 141.573 19.6869 cv
141.573 20.7536 141.792 21.5765 142.231 22.1554 cv
142.67 22.7343 143.296 23.0237 144.11 23.0237 cv
144.923 23.0237 145.547 22.7343 145.983 22.1554 cv
cp
148.207 23.6921 mo
147.31 24.8011 145.947 25.3557 144.119 25.3557 cv
142.292 25.3557 140.929 24.8011 140.031 23.6921 cv
139.133 22.5831 138.685 21.248 138.685 19.6869 cv
138.685 18.1518 139.133 16.8216 140.031 15.6963 cv
140.929 14.571 142.292 14.0083 144.119 14.0083 cv
145.947 14.0083 147.31 14.571 148.207 15.6963 cv
149.105 16.8216 149.554 18.1518 149.554 19.6869 cv
149.554 21.248 149.105 22.5831 148.207 23.6921 cv
cp
157.439 14.101 mo
157.474 14.1043 157.554 14.1091 157.678 14.1157 cv
157.678 16.9647 li
157.502 16.9452 157.346 16.9322 157.209 16.9257 cv
157.073 16.9191 156.962 16.9159 156.877 16.9159 cv
155.759 16.9159 155.007 17.2802 154.624 18.0087 cv
154.409 18.4185 154.302 19.0494 154.302 19.9015 cv
154.302 24.9849 li
151.501 24.9849 li
151.501 14.3498 li
154.155 14.3498 li
154.155 16.2036 li
154.585 15.4946 154.959 15.01 155.277 14.7499 cv
155.798 14.314 156.474 14.0961 157.307 14.0961 cv
157.359 14.0961 157.403 14.0978 157.439 14.101 cv
cp
159.276 10.6519 mo
162.008 10.6519 li
162.008 18.399 li
165.471 14.3986 li
168.916 14.3986 li
165.198 18.4673 li
169.062 24.9849 li
165.706 24.9849 li
163.159 20.4382 li
162.008 21.6383 li
162.008 24.9849 li
159.276 24.9849 li
159.276 10.6519 li
cp
173.244 24.9849 mo
170.463 24.9849 li
170.463 10.6032 li
173.244 10.6032 li
173.244 24.9849 li
cp
182.591 22.1554 mo
183.027 21.5765 183.245 20.7536 183.245 19.6869 cv
183.245 18.6201 183.027 17.7989 182.591 17.2232 cv
182.155 16.6476 181.531 16.3598 180.718 16.3598 cv
179.905 16.3598 179.278 16.6476 178.839 17.2232 cv
178.4 17.7989 178.181 18.6201 178.181 19.6869 cv
178.181 20.7536 178.4 21.5765 178.839 22.1554 cv
179.278 22.7343 179.905 23.0237 180.718 23.0237 cv
181.531 23.0237 182.155 22.7343 182.591 22.1554 cv
cp
184.816 23.6921 mo
183.918 24.8011 182.555 25.3557 180.727 25.3557 cv
178.9 25.3557 177.537 24.8011 176.639 23.6921 cv
175.742 22.5831 175.293 21.248 175.293 19.6869 cv
175.293 18.1518 175.742 16.8216 176.639 15.6963 cv
177.537 14.571 178.9 14.0083 180.727 14.0083 cv
182.555 14.0083 183.918 14.571 184.816 15.6963 cv
185.713 16.8216 186.162 18.1518 186.162 19.6869 cv
186.162 21.248 185.713 22.5831 184.816 23.6921 cv
cp
194.003 19.8137 mo
193.827 19.9243 193.65 20.0137 193.471 20.082 cv
193.292 20.1503 193.046 20.2137 192.734 20.2723 cv
192.11 20.3894 li
191.524 20.4934 191.105 20.6203 190.851 20.7699 cv
190.422 21.0236 190.207 21.4171 190.207 21.9505 cv
190.207 22.4253 190.339 22.7684 190.602 22.9798 cv
190.866 23.1912 191.186 23.2969 191.563 23.2969 cv
192.162 23.2969 192.713 23.1213 193.217 22.7701 cv
193.721 22.4188 193.983 21.7781 194.003 20.8479 cv
194.003 19.8137 li
cp
192.315 18.516 mo
192.829 18.451 193.196 18.3697 193.417 18.2721 cv
193.814 18.103 194.012 17.8396 194.012 17.4818 cv
194.012 17.046 193.861 16.7451 193.559 16.5793 cv
193.256 16.4134 192.812 16.3305 192.227 16.3305 cv
191.57 16.3305 191.105 16.4931 190.832 16.8183 cv
190.637 17.059 190.506 17.3842 190.441 17.794 cv
187.758 17.794 li
187.817 16.8639 188.077 16.0996 188.539 15.5011 cv
189.274 14.5645 190.536 14.0961 192.324 14.0961 cv
193.489 14.0961 194.523 14.3271 195.427 14.7889 cv
196.331 15.2507 196.783 16.1223 196.783 17.4037 cv
196.783 22.2822 li
196.783 22.6205 196.79 23.0302 196.803 23.5116 cv
196.822 23.8758 196.878 24.123 196.969 24.2531 cv
197.06 24.3832 197.196 24.4905 197.379 24.5751 cv
197.379 24.9849 li
194.354 24.9849 li
194.269 24.7702 194.211 24.5686 194.178 24.38 cv
194.146 24.1913 194.12 23.9767 194.1 23.736 cv
193.716 24.1523 193.274 24.5068 192.773 24.7995 cv
192.175 25.1443 191.498 25.3166 190.744 25.3166 cv
189.781 25.3166 188.986 25.0418 188.358 24.4922 cv
187.731 23.9425 187.417 23.1636 187.417 22.1554 cv
187.417 20.8479 187.921 19.9015 188.929 19.3161 cv
189.482 18.9974 190.295 18.7697 191.368 18.6331 cv
192.315 18.516 li
cp
204.878 14.5206 mo
205.379 14.8035 205.785 15.1954 206.097 15.6963 cv
206.097 10.6227 li
208.917 10.6227 li
208.917 24.9849 li
206.214 24.9849 li
206.214 23.5116 li
205.818 24.1425 205.366 24.6011 204.858 24.8873 cv
204.351 25.1735 203.72 25.3166 202.965 25.3166 cv
201.723 25.3166 200.677 24.8141 199.829 23.8092 cv
198.98 22.8042 198.555 21.5147 198.555 19.9405 cv
198.555 18.1258 198.973 16.698 199.809 15.6573 cv
200.645 14.6165 201.762 14.0961 203.161 14.0961 cv
203.804 14.0961 204.377 14.2376 204.878 14.5206 cv
cp
205.561 22.0968 mo
205.971 21.5114 206.175 20.7536 206.175 19.8235 cv
206.175 18.5225 205.847 17.5924 205.19 17.033 cv
204.787 16.6947 204.318 16.5256 203.785 16.5256 cv
202.972 16.5256 202.375 16.833 201.995 17.4476 cv
201.614 18.0623 201.424 18.825 201.424 19.7357 cv
201.424 20.7179 201.617 21.5033 202.004 22.092 cv
202.391 22.6806 202.978 22.975 203.765 22.975 cv
204.553 22.975 205.151 22.6822 205.561 22.0968 cv
cp
0 0 0 1 cmyk
f
116.176 37.5577 mo
115.783 37.239 115.232 37.0796 114.523 37.0796 cv
111.722 37.0796 li
111.722 41.3141 li
114.523 41.3141 li
115.232 41.3141 115.783 41.1417 116.176 40.797 cv
116.57 40.4522 116.767 39.9059 116.767 39.1578 cv
116.767 38.4098 116.57 37.8764 116.176 37.5577 cv
cp
118.455 42.7386 mo
117.596 43.4411 116.37 43.7924 114.776 43.7924 cv
111.722 43.7924 li
111.722 48.9636 li
108.737 48.9636 li
108.737 34.5818 li
115.001 34.5818 li
116.445 34.5818 117.596 34.9526 118.455 35.6941 cv
119.313 36.4356 119.743 37.5837 119.743 39.1383 cv
119.743 40.836 119.313 42.0361 118.455 42.7386 cv
cp
127.668 38.0797 mo
127.704 38.0829 127.784 38.0878 127.907 38.0943 cv
127.907 40.9433 li
127.732 40.9238 127.575 40.9108 127.439 40.9043 cv
127.302 40.8978 127.192 40.8946 127.107 40.8946 cv
125.988 40.8946 125.237 41.2588 124.853 41.9873 cv
124.639 42.3971 124.531 43.0281 124.531 43.8802 cv
124.531 48.9636 li
121.731 48.9636 li
121.731 38.3285 li
124.385 38.3285 li
124.385 40.1823 li
124.814 39.4733 125.188 38.9887 125.507 38.7285 cv
126.027 38.2927 126.704 38.0748 127.536 38.0748 cv
127.588 38.0748 127.632 38.0764 127.668 38.0797 cv
cp
132.232 40.9433 mo
131.878 41.3466 131.655 41.893 131.564 42.5825 cv
135.886 42.5825 li
135.841 41.8475 135.618 41.2897 135.218 40.9092 cv
134.818 40.5287 134.322 40.3384 133.73 40.3384 cv
133.086 40.3384 132.587 40.5401 132.232 40.9433 cv
cp
136.121 38.5431 mo
136.83 38.8749 137.415 39.3985 137.877 40.114 cv
138.293 40.745 138.563 41.4767 138.687 42.3093 cv
138.758 42.7972 138.787 43.4997 138.774 44.4168 cv
131.496 44.4168 li
131.535 45.4836 131.87 46.2316 132.501 46.6609 cv
132.885 46.9276 133.346 47.061 133.886 47.061 cv
134.459 47.061 134.924 46.8983 135.281 46.5731 cv
135.477 46.3975 135.649 46.1536 135.799 45.8413 cv
138.638 45.8413 li
138.566 46.4723 138.238 47.113 137.652 47.7635 cv
136.742 48.7977 135.467 49.3148 133.828 49.3148 cv
132.475 49.3148 131.281 48.879 130.247 48.0074 cv
129.213 47.1358 128.696 45.7177 128.696 43.7533 cv
128.696 41.9125 129.162 40.501 130.096 39.5188 cv
131.029 38.5366 132.241 38.0455 133.73 38.0455 cv
134.615 38.0455 135.412 38.2114 136.121 38.5431 cv
cp
146.274 38.4992 mo
146.774 38.7822 147.181 39.1741 147.493 39.6749 cv
147.493 34.6013 li
150.313 34.6013 li
150.313 48.9636 li
147.61 48.9636 li
147.61 47.4903 li
147.214 48.1212 146.761 48.5798 146.254 48.866 cv
145.747 49.1522 145.116 49.2953 144.361 49.2953 cv
143.119 49.2953 142.073 48.7928 141.224 47.7878 cv
140.376 46.7829 139.951 45.4933 139.951 43.9192 cv
139.951 42.1044 140.369 40.6767 141.205 39.6359 cv
142.041 38.5952 143.158 38.0748 144.556 38.0748 cv
145.2 38.0748 145.773 38.2163 146.274 38.4992 cv
cp
146.957 46.0755 mo
147.366 45.4901 147.571 44.7323 147.571 43.8021 cv
147.571 42.5012 147.243 41.571 146.586 41.0116 cv
146.183 40.6734 145.714 40.5043 145.181 40.5043 cv
144.368 40.5043 143.771 40.8116 143.39 41.4263 cv
143.01 42.041 142.82 42.8037 142.82 43.7143 cv
142.82 44.6965 143.013 45.482 143.4 46.0706 cv
143.787 46.6593 144.374 46.9536 145.161 46.9536 cv
145.948 46.9536 146.547 46.6609 146.957 46.0755 cv
cp
155.685 37.0601 mo
152.865 37.0601 li
152.865 34.494 li
155.685 34.494 li
155.685 37.0601 li
cp
152.865 38.3285 mo
155.685 38.3285 li
155.685 48.9636 li
152.865 48.9636 li
152.865 38.3285 li
cp
164.72 42.1435 mo
164.668 41.7467 164.535 41.3889 164.32 41.0702 cv
164.008 40.6409 163.523 40.4262 162.866 40.4262 cv
161.93 40.4262 161.289 40.8913 160.944 41.8215 cv
160.762 42.3158 160.671 42.9728 160.671 43.7924 cv
160.671 44.5729 160.762 45.2006 160.944 45.6755 cv
161.276 46.5601 161.9 47.0024 162.818 47.0024 cv
163.468 47.0024 163.93 46.8268 164.203 46.4755 cv
164.476 46.1243 164.642 45.669 164.701 45.1096 cv
167.54 45.1096 li
167.475 45.9552 167.169 46.7552 166.623 47.5098 cv
165.751 48.7261 164.46 49.3343 162.749 49.3343 cv
161.038 49.3343 159.78 48.827 158.973 47.8122 cv
158.167 46.7975 157.763 45.4803 157.763 43.8607 cv
157.763 42.0329 158.209 40.6116 159.1 39.5969 cv
159.991 38.5822 161.221 38.0748 162.788 38.0748 cv
164.122 38.0748 165.213 38.374 166.062 38.9724 cv
166.911 39.5709 167.413 40.6279 167.569 42.1435 cv
164.72 42.1435 li
cp
168.375 40.4067 mo
168.375 38.4261 li
169.858 38.4261 li
169.858 35.4599 li
172.61 35.4599 li
172.61 38.4261 li
174.337 38.4261 li
174.337 40.4067 li
172.61 40.4067 li
172.61 46.0267 li
172.61 46.4625 172.665 46.7341 172.775 46.8414 cv
172.886 46.9487 173.224 47.0024 173.79 47.0024 cv
173.875 47.0024 173.964 47.0008 174.058 46.9975 cv
174.153 46.9943 174.245 46.9894 174.337 46.9829 cv
174.337 49.0611 li
173.019 49.1099 li
171.705 49.1554 170.808 48.9278 170.326 48.4269 cv
170.014 48.1082 169.858 47.6171 169.858 46.9536 cv
169.858 40.4067 li
168.375 40.4067 li
cp
178.977 37.0601 mo
176.157 37.0601 li
176.157 34.494 li
178.977 34.494 li
178.977 37.0601 li
cp
176.157 38.3285 mo
178.977 38.3285 li
178.977 48.9636 li
176.157 48.9636 li
176.157 38.3285 li
cp
188.305 46.134 mo
188.74 45.5551 188.958 44.7323 188.958 43.6655 cv
188.958 42.5988 188.74 41.7776 188.305 41.2019 cv
187.869 40.6262 187.244 40.3384 186.431 40.3384 cv
185.618 40.3384 184.992 40.6262 184.553 41.2019 cv
184.114 41.7776 183.894 42.5988 183.894 43.6655 cv
183.894 44.7323 184.114 45.5551 184.553 46.134 cv
184.992 46.713 185.618 47.0024 186.431 47.0024 cv
187.244 47.0024 187.869 46.713 188.305 46.134 cv
cp
190.529 47.6708 mo
189.632 48.7798 188.269 49.3343 186.441 49.3343 cv
184.613 49.3343 183.251 48.7798 182.353 47.6708 cv
181.455 46.5617 181.006 45.2266 181.006 43.6655 cv
181.006 42.1304 181.455 40.8002 182.353 39.6749 cv
183.251 38.5496 184.613 37.987 186.441 37.987 cv
188.269 37.987 189.632 38.5496 190.529 39.6749 cv
191.427 40.8002 191.876 42.1304 191.876 43.6655 cv
191.876 45.2266 191.427 46.5617 190.529 47.6708 cv
cp
202.443 38.9383 mo
203.143 39.514 203.492 40.4685 203.492 41.802 cv
203.492 48.9636 li
200.643 48.9636 li
200.643 42.4947 li
200.643 41.9353 200.568 41.506 200.419 41.2068 cv
200.146 40.6604 199.625 40.3872 198.858 40.3872 cv
197.915 40.3872 197.267 40.7872 196.916 41.5873 cv
196.734 42.0101 196.643 42.55 196.643 43.207 cv
196.643 48.9636 li
193.872 48.9636 li
193.872 38.348 li
196.555 38.348 li
196.555 39.8994 li
196.913 39.353 197.251 38.9594 197.57 38.7188 cv
198.142 38.2895 198.867 38.0748 199.746 38.0748 cv
200.845 38.0748 201.744 38.3626 202.443 38.9383 cv
cp
f
grestore
grestore
grestore
gsave
0 0 mo
981 0 li
981 415 li
0 415 li
0 0 li
cp
eclp
gsave
0 0 mo
981 0 li
981 414 li
0 414 li
0 0 li
cp
eclp
grestore
grestore
gsave
0 0 mo
981 0 li
981 415 li
0 415 li
0 0 li
cp
eclp
gsave
0 0 mo
981 0 li
981 414 li
0 414 li
0 0 li
cp
eclp
gsave
206 19 mo
344.876 19 li
344.876 90.936 li
206 90.936 li
206 19 li
cp
eclp
227.963 33.2042 mo
228.36 32.261 229.296 31.2625 230.773 30.2088 cv
232.054 29.2916 232.884 28.6347 233.261 28.2379 cv
233.84 27.6199 234.129 26.9435 234.129 26.2084 cv
234.129 25.61 233.963 25.1124 233.632 24.7156 cv
233.3 24.3188 232.825 24.1204 232.207 24.1204 cv
231.362 24.1204 230.786 24.4359 230.48 25.0669 cv
230.305 25.4311 230.2 26.01 230.168 26.8036 cv
227.465 26.8036 li
227.511 25.6002 227.729 24.6278 228.119 23.8863 cv
228.861 22.4748 230.178 21.769 232.071 21.769 cv
233.567 21.769 234.757 22.1837 235.642 23.013 cv
236.526 23.8424 236.969 24.94 236.969 26.306 cv
236.969 27.3532 236.656 28.2834 236.032 29.0965 cv
235.622 29.6364 234.949 30.238 234.012 30.9015 cv
232.9 31.6918 li
232.204 32.1862 231.727 32.5439 231.471 32.7651 cv
231.214 32.9863 230.997 33.2432 230.822 33.5359 cv
236.998 33.5359 li
236.998 35.9849 li
227.309 35.9849 li
227.335 34.9702 227.553 34.0433 227.963 33.2042 cv
cp
239.033 33.0773 mo
241.989 33.0773 li
241.989 35.9849 li
239.033 35.9849 li
239.033 33.0773 li
cp
254.322 30.5503 mo
257.971 30.5503 li
256.176 24.8912 li
254.322 30.5503 li
cp
254.508 21.6032 mo
257.903 21.6032 li
262.996 35.9849 li
259.737 35.9849 li
258.81 33.0285 li
253.512 33.0285 li
252.517 35.9849 li
249.375 35.9849 li
254.508 21.6032 li
cp
270.942 29.1648 mo
270.89 28.768 270.757 28.4102 270.542 28.0915 cv
270.23 27.6622 269.745 27.4476 269.088 27.4476 cv
268.152 27.4476 267.511 27.9126 267.166 28.8428 cv
266.984 29.3372 266.893 29.9941 266.893 30.8137 cv
266.893 31.5943 266.984 32.222 267.166 32.6968 cv
267.498 33.5814 268.122 34.0237 269.04 34.0237 cv
269.69 34.0237 270.152 33.8481 270.425 33.4969 cv
270.698 33.1456 270.864 32.6903 270.923 32.1309 cv
273.762 32.1309 li
273.697 32.9765 273.391 33.7766 272.845 34.5311 cv
271.973 35.7475 270.682 36.3557 268.971 36.3557 cv
267.261 36.3557 266.002 35.8483 265.195 34.8336 cv
264.389 33.8188 263.986 32.5017 263.986 30.882 cv
263.986 29.0542 264.431 27.6329 265.322 26.6182 cv
266.213 25.6035 267.443 25.0961 269.01 25.0961 cv
270.344 25.0961 271.435 25.3954 272.284 25.9938 cv
273.133 26.5922 273.635 27.6492 273.791 29.1648 cv
270.942 29.1648 li
cp
282.237 32.7066 mo
282.497 32.1667 282.627 31.4837 282.627 30.6576 cv
282.627 30.0071 282.517 29.425 282.295 28.9111 cv
281.899 27.9874 281.203 27.5256 280.207 27.5256 cv
279.505 27.5256 278.941 27.7956 278.515 28.3354 cv
278.089 28.8753 277.876 29.6949 277.876 30.7942 cv
277.876 31.5292 277.973 32.1309 278.168 32.5992 cv
278.532 33.4904 279.209 33.9359 280.198 33.9359 cv
281.154 33.9359 281.834 33.5261 282.237 32.7066 cv
cp
281.642 25.7303 mo
281.96 25.9775 282.286 26.3841 282.617 26.95 cv
282.617 25.3693 li
285.301 25.3693 li
285.301 40.1999 li
282.549 40.1999 li
282.549 34.6677 li
282.341 35.097 281.985 35.4792 281.481 35.8141 cv
280.977 36.1491 280.289 36.3166 279.417 36.3166 cv
278.188 36.3166 277.14 35.8255 276.275 34.8433 cv
275.41 33.8611 274.978 32.5504 274.978 30.9113 cv
274.978 29.142 275.412 27.7273 276.28 26.667 cv
277.149 25.6068 278.22 25.0766 279.495 25.0766 cv
280.38 25.0766 281.095 25.2945 281.642 25.7303 cv
cp
290.653 25.3498 mo
290.653 31.7601 li
290.653 32.3651 290.725 32.8204 290.868 33.1261 cv
291.122 33.666 291.619 33.9359 292.361 33.9359 cv
293.31 33.9359 293.961 33.5522 294.312 32.7846 cv
294.494 32.3683 294.585 31.8187 294.585 31.1357 cv
294.585 25.3498 li
297.405 25.3498 li
297.405 35.9849 li
294.702 35.9849 li
294.702 34.4823 li
294.676 34.5148 294.611 34.6124 294.507 34.775 cv
294.403 34.9376 294.28 35.0807 294.136 35.2043 cv
293.701 35.5946 293.279 35.8613 292.873 36.0044 cv
292.466 36.1475 291.99 36.2191 291.444 36.2191 cv
289.869 36.2191 288.809 35.6532 288.263 34.5213 cv
287.957 33.8969 287.804 32.9765 287.804 31.7601 cv
287.804 25.3498 li
290.653 25.3498 li
cp
302.933 24.0814 mo
300.114 24.0814 li
300.114 21.5153 li
302.933 21.5153 li
302.933 24.0814 li
cp
300.114 25.3498 mo
302.933 25.3498 li
302.933 35.9849 li
300.114 35.9849 li
300.114 25.3498 li
cp
311.524 25.101 mo
311.56 25.1043 311.64 25.1091 311.763 25.1157 cv
311.763 27.9647 li
311.588 27.9452 311.432 27.9322 311.295 27.9257 cv
311.158 27.9191 311.048 27.9159 310.963 27.9159 cv
309.844 27.9159 309.093 28.2802 308.709 29.0087 cv
308.495 29.4185 308.387 30.0494 308.387 30.9015 cv
308.387 35.9849 li
305.587 35.9849 li
305.587 25.3498 li
308.241 25.3498 li
308.241 27.2036 li
308.67 26.4946 309.044 26.01 309.363 25.7499 cv
309.883 25.314 310.56 25.0961 311.393 25.0961 cv
311.445 25.0961 311.488 25.0978 311.524 25.101 cv
cp
316.089 27.9647 mo
315.734 28.368 315.511 28.9144 315.42 29.6038 cv
319.743 29.6038 li
319.697 28.8688 319.474 28.3111 319.074 27.9305 cv
318.674 27.55 318.178 27.3598 317.586 27.3598 cv
316.942 27.3598 316.443 27.5614 316.089 27.9647 cv
cp
319.977 25.5645 mo
320.686 25.8962 321.271 26.4198 321.733 27.1353 cv
322.149 27.7663 322.419 28.4981 322.543 29.3307 cv
322.614 29.8185 322.644 30.521 322.631 31.4382 cv
315.352 31.4382 li
315.391 32.5049 315.726 33.2529 316.357 33.6823 cv
316.741 33.9489 317.202 34.0823 317.742 34.0823 cv
318.315 34.0823 318.78 33.9197 319.138 33.5944 cv
319.333 33.4188 319.505 33.1749 319.655 32.8627 cv
322.494 32.8627 li
322.422 33.4936 322.094 34.1343 321.509 34.7848 cv
320.598 35.819 319.323 36.3361 317.684 36.3361 cv
316.331 36.3361 315.137 35.9003 314.103 35.0287 cv
313.069 34.1571 312.552 32.7391 312.552 30.7747 cv
312.552 28.9339 313.018 27.5224 313.952 26.5402 cv
314.885 25.558 316.097 25.0669 317.586 25.0669 cv
318.471 25.0669 319.268 25.2327 319.977 25.5645 cv
cp
0 0 0 1 cmyk
f
241.794 47.0844 mo
242.965 45.9005 244.455 45.3086 246.263 45.3086 cv
248.683 45.3086 250.452 46.1022 251.571 47.6893 cv
252.189 48.5805 252.52 49.4748 252.566 50.3725 cv
249.561 50.3725 li
249.366 49.683 249.115 49.1626 248.81 48.8114 cv
248.263 48.1869 247.453 47.8747 246.38 47.8747 cv
245.287 47.8747 244.425 48.3154 243.794 49.1968 cv
243.164 50.0781 242.848 51.3254 242.848 52.9386 cv
242.848 54.5517 243.181 55.7599 243.848 56.5633 cv
244.515 57.3666 245.362 57.7682 246.39 57.7682 cv
247.444 57.7682 248.247 57.4235 248.8 56.734 cv
249.106 56.3632 249.359 55.8071 249.561 55.0656 cv
252.537 55.0656 li
252.277 56.6332 251.611 57.9081 250.541 58.8903 cv
249.471 59.8725 248.101 60.3636 246.429 60.3636 cv
244.36 60.3636 242.734 59.7001 241.55 58.3732 cv
240.367 57.0397 239.775 55.2119 239.775 52.8898 cv
239.775 50.379 240.448 48.4439 241.794 47.0844 cv
cp
257.37 49.3285 mo
257.37 55.7388 li
257.37 56.3437 257.442 56.7991 257.585 57.1048 cv
257.839 57.6447 258.336 57.9146 259.078 57.9146 cv
260.027 57.9146 260.678 57.5308 261.029 56.7633 cv
261.211 56.347 261.302 55.7973 261.302 55.1144 cv
261.302 49.3285 li
264.122 49.3285 li
264.122 59.9636 li
261.419 59.9636 li
261.419 58.461 li
261.393 58.4935 261.328 58.5911 261.224 58.7537 cv
261.12 58.9163 260.997 59.0594 260.854 59.183 cv
260.418 59.5733 259.997 59.84 259.59 59.9831 cv
259.183 60.1262 258.707 60.1977 258.161 60.1977 cv
256.587 60.1977 255.526 59.6318 254.98 58.5 cv
254.674 57.8756 254.521 56.9552 254.521 55.7388 cv
254.521 49.3285 li
257.37 49.3285 li
cp
272.699 49.0797 mo
272.735 49.0829 272.815 49.0878 272.939 49.0943 cv
272.939 51.9433 li
272.763 51.9238 272.607 51.9108 272.47 51.9043 cv
272.334 51.8978 272.223 51.8946 272.138 51.8946 cv
271.02 51.8946 270.268 52.2588 269.885 52.9873 cv
269.67 53.3971 269.563 54.0281 269.563 54.8802 cv
269.563 59.9636 li
266.762 59.9636 li
266.762 49.3285 li
269.416 49.3285 li
269.416 51.1823 li
269.846 50.4733 270.22 49.9887 270.538 49.7285 cv
271.059 49.2927 271.735 49.0748 272.568 49.0748 cv
272.62 49.0748 272.664 49.0764 272.699 49.0797 cv
cp
280.474 49.0797 mo
280.51 49.0829 280.589 49.0878 280.713 49.0943 cv
280.713 51.9433 li
280.537 51.9238 280.381 51.9108 280.245 51.9043 cv
280.108 51.8978 279.997 51.8946 279.913 51.8946 cv
278.794 51.8946 278.043 52.2588 277.659 52.9873 cv
277.444 53.3971 277.337 54.0281 277.337 54.8802 cv
277.337 59.9636 li
274.537 59.9636 li
274.537 49.3285 li
277.191 49.3285 li
277.191 51.1823 li
277.62 50.4733 277.994 49.9887 278.313 49.7285 cv
278.833 49.2927 279.509 49.0748 280.342 49.0748 cv
280.394 49.0748 280.438 49.0764 280.474 49.0797 cv
cp
285.038 51.9433 mo
284.684 52.3466 284.461 52.893 284.37 53.5825 cv
288.692 53.5825 li
288.647 52.8475 288.424 52.2897 288.024 51.9092 cv
287.624 51.5287 287.128 51.3384 286.536 51.3384 cv
285.892 51.3384 285.393 51.5401 285.038 51.9433 cv
cp
288.926 49.5431 mo
289.635 49.8749 290.221 50.3985 290.682 51.114 cv
291.099 51.745 291.369 52.4767 291.492 53.3093 cv
291.564 53.7972 291.593 54.4997 291.58 55.4168 cv
284.301 55.4168 li
284.34 56.4836 284.675 57.2316 285.306 57.6609 cv
285.69 57.9276 286.152 58.061 286.692 58.061 cv
287.264 58.061 287.729 57.8983 288.087 57.5731 cv
288.282 57.3975 288.455 57.1536 288.604 56.8413 cv
291.444 56.8413 li
291.372 57.4723 291.043 58.113 290.458 58.7635 cv
289.547 59.7977 288.273 60.3148 286.633 60.3148 cv
285.28 60.3148 284.087 59.879 283.053 59.0074 cv
282.018 58.1358 281.501 56.7177 281.501 54.7533 cv
281.501 52.9125 281.968 51.501 282.901 50.5188 cv
283.835 49.5366 285.046 49.0455 286.536 49.0455 cv
287.42 49.0455 288.217 49.2114 288.926 49.5431 cv
cp
302.031 49.9383 mo
302.73 50.514 303.08 51.4685 303.08 52.802 cv
303.08 59.9636 li
300.231 59.9636 li
300.231 53.4947 li
300.231 52.9353 300.156 52.506 300.006 52.2068 cv
299.733 51.6604 299.213 51.3872 298.445 51.3872 cv
297.502 51.3872 296.855 51.7872 296.503 52.5873 cv
296.321 53.0101 296.23 53.55 296.23 54.207 cv
296.23 59.9636 li
293.459 59.9636 li
293.459 49.348 li
296.142 49.348 li
296.142 50.8994 li
296.5 50.353 296.838 49.9594 297.157 49.7188 cv
297.73 49.2895 298.455 49.0748 299.333 49.0748 cv
300.432 49.0748 301.332 49.3626 302.031 49.9383 cv
cp
304.539 51.4067 mo
304.539 49.4261 li
306.022 49.4261 li
306.022 46.4599 li
308.774 46.4599 li
308.774 49.4261 li
310.501 49.4261 li
310.501 51.4067 li
308.774 51.4067 li
308.774 57.0267 li
308.774 57.4625 308.829 57.7341 308.94 57.8414 cv
309.05 57.9487 309.388 58.0024 309.954 58.0024 cv
310.039 58.0024 310.128 58.0008 310.223 57.9975 cv
310.317 57.9943 310.41 57.9894 310.501 57.9829 cv
310.501 60.0611 li
309.184 60.1099 li
307.87 60.1554 306.972 59.9278 306.491 59.4269 cv
306.178 59.1082 306.022 58.6171 306.022 57.9536 cv
306.022 51.4067 li
304.539 51.4067 li
cp
f
216.941 69.5605 mo
220.064 69.5605 li
215.156 83.9422 li
212.317 83.9422 li
207.458 69.5605 li
210.668 69.5605 li
213.79 80.4785 li
216.941 69.5605 li
cp
221.789 69.5605 mo
224.94 69.5605 li
230.668 79.6004 li
230.668 69.5605 li
233.468 69.5605 li
233.468 83.9422 li
230.463 83.9422 li
224.589 73.7267 li
224.589 83.9422 li
221.789 83.9422 li
221.789 69.5605 li
cp
236.262 69.58 mo
246.458 69.58 li
246.458 72.107 li
239.248 72.107 li
239.248 75.4146 li
245.561 75.4146 li
245.561 77.9124 li
239.248 77.9124 li
239.248 83.9422 li
236.262 83.9422 li
236.262 69.58 li
cp
261.504 72.5364 mo
261.111 72.2176 260.56 72.0583 259.851 72.0583 cv
257.05 72.0583 li
257.05 76.2928 li
259.851 76.2928 li
260.56 76.2928 261.111 76.1204 261.504 75.7757 cv
261.898 75.4309 262.095 74.8845 262.095 74.1365 cv
262.095 73.3885 261.898 72.8551 261.504 72.5364 cv
cp
263.783 77.7173 mo
262.924 78.4198 261.698 78.771 260.104 78.771 cv
257.05 78.771 li
257.05 83.9422 li
254.065 83.9422 li
254.065 69.5605 li
260.329 69.5605 li
261.773 69.5605 262.924 69.9313 263.783 70.6728 cv
264.641 71.4143 265.07 72.5624 265.07 74.117 cv
265.07 75.8147 264.641 77.0148 263.783 77.7173 cv
cp
272.996 73.0583 mo
273.032 73.0616 273.112 73.0665 273.235 73.073 cv
273.235 75.922 li
273.059 75.9025 272.903 75.8895 272.767 75.883 cv
272.63 75.8765 272.52 75.8732 272.435 75.8732 cv
271.316 75.8732 270.565 76.2375 270.181 76.966 cv
269.967 77.3758 269.859 78.0067 269.859 78.8589 cv
269.859 83.9422 li
267.059 83.9422 li
267.059 73.3072 li
269.713 73.3072 li
269.713 75.161 li
270.142 74.452 270.516 73.9674 270.835 73.7072 cv
271.355 73.2714 272.032 73.0535 272.864 73.0535 cv
272.916 73.0535 272.96 73.0551 272.996 73.0583 cv
cp
281.507 81.1127 mo
281.943 80.5338 282.161 79.711 282.161 78.6442 cv
282.161 77.5774 281.943 76.7562 281.507 76.1806 cv
281.071 75.6049 280.447 75.3171 279.634 75.3171 cv
278.821 75.3171 278.195 75.6049 277.755 76.1806 cv
277.316 76.7562 277.097 77.5774 277.097 78.6442 cv
277.097 79.711 277.316 80.5338 277.755 81.1127 cv
278.195 81.6916 278.821 81.9811 279.634 81.9811 cv
280.447 81.9811 281.071 81.6916 281.507 81.1127 cv
cp
283.732 82.6494 mo
282.834 83.7585 281.471 84.313 279.643 84.313 cv
277.816 84.313 276.453 83.7585 275.555 82.6494 cv
274.658 81.5404 274.209 80.2053 274.209 78.6442 cv
274.209 77.1091 274.658 75.7789 275.555 74.6536 cv
276.453 73.5283 277.816 72.9657 279.643 72.9657 cv
281.471 72.9657 282.834 73.5283 283.732 74.6536 cv
284.629 75.7789 285.078 77.1091 285.078 78.6442 cv
285.078 80.2053 284.629 81.5404 283.732 82.6494 cv
cp
293.612 73.3072 mo
296.597 73.3072 li
292.763 83.9422 li
289.826 83.9422 li
286.011 73.3072 li
289.133 73.3072 li
291.348 81.1517 li
293.612 73.3072 li
cp
301.013 72.0387 mo
298.193 72.0387 li
298.193 69.4727 li
301.013 69.4727 li
301.013 72.0387 li
cp
298.193 73.3072 mo
301.013 73.3072 li
301.013 83.9422 li
298.193 83.9422 li
298.193 73.3072 li
cp
305.862 80.5468 mo
305.921 81.0412 306.048 81.3924 306.243 81.6006 cv
306.588 81.9713 307.225 82.1567 308.155 82.1567 cv
308.702 82.1567 309.136 82.0754 309.458 81.9128 cv
309.78 81.7502 309.941 81.5062 309.941 81.181 cv
309.941 80.8688 309.811 80.6314 309.55 80.4688 cv
309.29 80.3061 308.324 80.0264 306.653 79.6297 cv
305.449 79.3304 304.6 78.9564 304.106 78.5076 cv
303.612 78.0653 303.365 77.4278 303.365 76.5952 cv
303.365 75.613 303.75 74.7691 304.521 74.0633 cv
305.292 73.3576 306.376 73.0047 307.775 73.0047 cv
309.102 73.0047 310.183 73.2698 311.019 73.7999 cv
311.855 74.33 312.334 75.2455 312.458 76.5465 cv
309.677 76.5465 li
309.638 76.1887 309.537 75.9058 309.375 75.6976 cv
309.069 75.3203 308.549 75.1317 307.814 75.1317 cv
307.209 75.1317 306.778 75.226 306.521 75.4146 cv
306.264 75.6033 306.136 75.8244 306.136 76.0781 cv
306.136 76.3969 306.272 76.6278 306.545 76.7709 cv
306.819 76.9205 307.784 77.1774 309.443 77.5417 cv
310.549 77.8018 311.378 78.1954 311.931 78.7223 cv
312.478 79.2556 312.751 79.9224 312.751 80.7224 cv
312.751 81.7762 312.359 82.6364 311.575 83.3031 cv
310.791 83.9699 309.58 84.3032 307.941 84.3032 cv
306.269 84.3032 305.035 83.9504 304.238 83.2446 cv
303.441 82.5388 303.043 81.6396 303.043 80.5468 cv
305.862 80.5468 li
cp
317.655 72.0387 mo
314.835 72.0387 li
314.835 69.4727 li
317.655 69.4727 li
317.655 72.0387 li
cp
314.835 73.3072 mo
317.655 73.3072 li
317.655 83.9422 li
314.835 83.9422 li
314.835 73.3072 li
cp
326.982 81.1127 mo
327.418 80.5338 327.636 79.711 327.636 78.6442 cv
327.636 77.5774 327.418 76.7562 326.982 76.1806 cv
326.546 75.6049 325.922 75.3171 325.109 75.3171 cv
324.296 75.3171 323.67 75.6049 323.231 76.1806 cv
322.792 76.7562 322.572 77.5774 322.572 78.6442 cv
322.572 79.711 322.792 80.5338 323.231 81.1127 cv
323.67 81.6916 324.296 81.9811 325.109 81.9811 cv
325.922 81.9811 326.546 81.6916 326.982 81.1127 cv
cp
329.207 82.6494 mo
328.309 83.7585 326.946 84.313 325.119 84.313 cv
323.291 84.313 321.928 83.7585 321.03 82.6494 cv
320.133 81.5404 319.684 80.2053 319.684 78.6442 cv
319.684 77.1091 320.133 75.7789 321.03 74.6536 cv
321.928 73.5283 323.291 72.9657 325.119 72.9657 cv
326.946 72.9657 328.309 73.5283 329.207 74.6536 cv
330.104 75.7789 330.553 77.1091 330.553 78.6442 cv
330.553 80.2053 330.104 81.5404 329.207 82.6494 cv
cp
341.121 73.917 mo
341.82 74.4926 342.17 75.4472 342.17 76.7806 cv
342.17 83.9422 li
339.321 83.9422 li
339.321 77.4734 li
339.321 76.914 339.246 76.4847 339.096 76.1855 cv
338.823 75.6391 338.303 75.3659 337.535 75.3659 cv
336.592 75.3659 335.945 75.7659 335.594 76.566 cv
335.412 76.9888 335.32 77.5287 335.32 78.1856 cv
335.32 83.9422 li
332.55 83.9422 li
332.55 73.3267 li
335.233 73.3267 li
335.233 74.878 li
335.59 74.3316 335.929 73.9381 336.247 73.6974 cv
336.82 73.2681 337.545 73.0535 338.423 73.0535 cv
339.522 73.0535 340.422 73.3413 341.121 73.917 cv
cp
f
grestore
grestore
grestore
gsave
0 0 mo
981 0 li
981 415 li
0 415 li
0 0 li
cp
eclp
gsave
0 0 mo
981 0 li
981 414 li
0 414 li
0 0 li
cp
eclp
5 lw
0 lc
0 lj
10 ml
[14.9867 14.9867 ] 0 dsh
true sadj
365.48 372.63 mo
365.2 272.3 li
365.187 265.64 365.183 258.98 365.19 252.32 cv
365.45 116.82 li
.609766 .380713 .064271 0 cmyk
@
365.47 108.58 mo
359.95 119.56 li
365.45 116.82 li
370.94 119.58 li
365.47 108.58 li
cp
f
[] 0 dsh
365.47 108.58 mo
359.95 119.56 li
365.45 116.82 li
370.94 119.58 li
365.47 108.58 li
cp
@
[14.9867 14.9867 ] 0 dsh
351.6 232.99 mo
351.6 116.81 li
@
351.6 108.57 mo
346.1 119.56 li
351.6 116.81 li
357.09 119.56 li
351.6 108.57 li
cp
f
[] 0 dsh
351.6 108.57 mo
346.1 119.56 li
351.6 116.81 li
357.09 119.56 li
351.6 108.57 li
cp
@
grestore
grestore
gsave
0 0 mo
981 0 li
981 415 li
0 415 li
0 0 li
cp
eclp
gsave
0 0 mo
981 0 li
981 414 li
0 414 li
0 0 li
cp
eclp
gsave
373 179 mo
498.888 179 li
498.888 226.957 li
373 226.957 li
373 179 li
cp
eclp
376.916 183.106 mo
378.087 181.922 379.577 181.33 381.385 181.33 cv
383.805 181.33 385.574 182.124 386.693 183.711 cv
387.311 184.602 387.643 185.496 387.688 186.394 cv
384.683 186.394 li
384.488 185.704 384.237 185.184 383.932 184.833 cv
383.385 184.208 382.575 183.896 381.502 183.896 cv
380.409 183.896 379.548 184.337 378.917 185.218 cv
378.286 186.099 377.97 187.347 377.97 188.96 cv
377.97 190.573 378.304 191.781 378.97 192.585 cv
379.637 193.388 380.484 193.79 381.512 193.79 cv
382.566 193.79 383.369 193.445 383.922 192.755 cv
384.228 192.385 384.481 191.828 384.683 191.087 cv
387.659 191.087 li
387.399 192.655 386.734 193.929 385.664 194.912 cv
384.594 195.894 383.223 196.385 381.551 196.385 cv
379.483 196.385 377.856 195.721 376.673 194.395 cv
375.489 193.061 374.897 191.233 374.897 188.911 cv
374.897 186.4 375.57 184.465 376.916 183.106 cv
cp
392.492 185.35 mo
392.492 191.76 li
392.492 192.365 392.564 192.82 392.707 193.126 cv
392.961 193.666 393.458 193.936 394.2 193.936 cv
395.15 193.936 395.8 193.552 396.151 192.785 cv
396.333 192.368 396.424 191.819 396.424 191.136 cv
396.424 185.35 li
399.244 185.35 li
399.244 195.985 li
396.542 195.985 li
396.542 194.482 li
396.516 194.515 396.451 194.612 396.346 194.775 cv
396.242 194.938 396.119 195.081 395.976 195.204 cv
395.54 195.595 395.119 195.861 394.712 196.004 cv
394.306 196.148 393.829 196.219 393.283 196.219 cv
391.709 196.219 390.648 195.653 390.102 194.521 cv
389.796 193.897 389.643 192.977 389.643 191.76 cv
389.643 185.35 li
392.492 185.35 li
cp
407.822 185.101 mo
407.857 185.104 407.937 185.109 408.061 185.116 cv
408.061 187.965 li
407.885 187.945 407.729 187.932 407.592 187.926 cv
407.456 187.919 407.345 187.916 407.261 187.916 cv
406.142 187.916 405.39 188.28 405.007 189.009 cv
404.792 189.418 404.685 190.049 404.685 190.902 cv
404.685 195.985 li
401.884 195.985 li
401.884 185.35 li
404.538 185.35 li
404.538 187.204 li
404.968 186.495 405.342 186.01 405.66 185.75 cv
406.181 185.314 406.857 185.096 407.69 185.096 cv
407.742 185.096 407.786 185.098 407.822 185.101 cv
cp
415.596 185.101 mo
415.632 185.104 415.711 185.109 415.835 185.116 cv
415.835 187.965 li
415.659 187.945 415.503 187.932 415.367 187.926 cv
415.23 187.919 415.119 187.916 415.035 187.916 cv
413.916 187.916 413.165 188.28 412.781 189.009 cv
412.566 189.418 412.459 190.049 412.459 190.902 cv
412.459 195.985 li
409.659 195.985 li
409.659 185.35 li
412.313 185.35 li
412.313 187.204 li
412.742 186.495 413.116 186.01 413.435 185.75 cv
413.955 185.314 414.632 185.096 415.464 185.096 cv
415.516 185.096 415.56 185.098 415.596 185.101 cv
cp
420.16 187.965 mo
419.806 188.368 419.583 188.914 419.492 189.604 cv
423.814 189.604 li
423.769 188.869 423.546 188.311 423.146 187.931 cv
422.746 187.55 422.25 187.36 421.658 187.36 cv
421.014 187.36 420.515 187.561 420.16 187.965 cv
cp
424.048 185.564 mo
424.757 185.896 425.343 186.42 425.805 187.135 cv
426.221 187.766 426.491 188.498 426.614 189.331 cv
426.686 189.818 426.715 190.521 426.702 191.438 cv
419.424 191.438 li
419.463 192.505 419.798 193.253 420.428 193.682 cv
420.812 193.949 421.274 194.082 421.814 194.082 cv
422.386 194.082 422.851 193.92 423.209 193.594 cv
423.404 193.419 423.577 193.175 423.726 192.863 cv
426.566 192.863 li
426.494 193.494 426.166 194.134 425.58 194.785 cv
424.67 195.819 423.395 196.336 421.755 196.336 cv
420.402 196.336 419.209 195.9 418.175 195.029 cv
417.14 194.157 416.623 192.739 416.623 190.775 cv
416.623 188.934 417.09 187.522 418.023 186.54 cv
418.957 185.558 420.168 185.067 421.658 185.067 cv
422.543 185.067 423.339 185.233 424.048 185.564 cv
cp
437.153 185.96 mo
437.852 186.535 438.202 187.49 438.202 188.823 cv
438.202 195.985 li
435.353 195.985 li
435.353 189.516 li
435.353 188.957 435.278 188.527 435.128 188.228 cv
434.855 187.682 434.335 187.409 433.567 187.409 cv
432.624 187.409 431.977 187.809 431.626 188.609 cv
431.443 189.031 431.352 189.571 431.352 190.228 cv
431.352 195.985 li
428.581 195.985 li
428.581 185.369 li
431.265 185.369 li
431.265 186.921 li
431.622 186.374 431.961 185.981 432.279 185.74 cv
432.852 185.311 433.577 185.096 434.455 185.096 cv
435.554 185.096 436.454 185.384 437.153 185.96 cv
cp
439.661 187.428 mo
439.661 185.447 li
441.144 185.447 li
441.144 182.481 li
443.896 182.481 li
443.896 185.447 li
445.623 185.447 li
445.623 187.428 li
443.896 187.428 li
443.896 193.048 li
443.896 193.484 443.951 193.755 444.062 193.863 cv
444.172 193.97 444.511 194.024 445.077 194.024 cv
445.161 194.024 445.25 194.022 445.345 194.019 cv
445.439 194.016 445.532 194.011 445.623 194.004 cv
445.623 196.082 li
444.306 196.131 li
442.992 196.177 442.094 195.949 441.613 195.448 cv
441.301 195.13 441.144 194.638 441.144 193.975 cv
441.144 187.428 li
439.661 187.428 li
cp
461.591 181.603 mo
464.713 181.603 li
459.806 195.985 li
456.966 195.985 li
452.107 181.603 li
455.317 181.603 li
458.44 192.521 li
461.591 181.603 li
cp
466.438 181.603 mo
469.59 181.603 li
475.317 191.643 li
475.317 181.603 li
478.117 181.603 li
478.117 195.985 li
475.112 195.985 li
469.239 185.769 li
469.239 195.985 li
466.438 195.985 li
466.438 181.603 li
cp
480.912 181.623 mo
491.108 181.623 li
491.108 184.15 li
483.897 184.15 li
483.897 187.457 li
490.21 187.457 li
490.21 189.955 li
483.897 189.955 li
483.897 195.985 li
480.912 195.985 li
480.912 181.623 li
cp
0 0 0 1 cmyk
f
398.999 208.558 mo
398.606 208.239 398.055 208.08 397.346 208.08 cv
394.545 208.08 li
394.545 212.314 li
397.346 212.314 li
398.055 212.314 398.606 212.142 398.999 211.797 cv
399.393 211.452 399.59 210.906 399.59 210.158 cv
399.59 209.41 399.393 208.876 398.999 208.558 cv
cp
401.278 213.739 mo
400.419 214.441 399.193 214.792 397.599 214.792 cv
394.545 214.792 li
394.545 219.964 li
391.56 219.964 li
391.56 205.582 li
397.824 205.582 li
399.268 205.582 400.419 205.953 401.278 206.694 cv
402.136 207.436 402.565 208.584 402.565 210.138 cv
402.565 211.836 402.136 213.036 401.278 213.739 cv
cp
410.491 209.08 mo
410.527 209.083 410.607 209.088 410.73 209.094 cv
410.73 211.943 li
410.554 211.924 410.398 211.911 410.262 211.904 cv
410.125 211.898 410.015 211.895 409.93 211.895 cv
408.811 211.895 408.06 212.259 407.676 212.987 cv
407.462 213.397 407.354 214.028 407.354 214.88 cv
407.354 219.964 li
404.554 219.964 li
404.554 209.328 li
407.208 209.328 li
407.208 211.182 li
407.637 210.473 408.011 209.989 408.33 209.729 cv
408.85 209.293 409.527 209.075 410.359 209.075 cv
410.411 209.075 410.455 209.076 410.491 209.08 cv
cp
419.002 217.134 mo
419.438 216.555 419.656 215.732 419.656 214.666 cv
419.656 213.599 419.438 212.778 419.002 212.202 cv
418.566 211.626 417.942 211.338 417.129 211.338 cv
416.316 211.338 415.69 211.626 415.25 212.202 cv
414.811 212.778 414.592 213.599 414.592 214.666 cv
414.592 215.732 414.811 216.555 415.25 217.134 cv
415.69 217.713 416.316 218.002 417.129 218.002 cv
417.942 218.002 418.566 217.713 419.002 217.134 cv
cp
421.227 218.671 mo
420.329 219.78 418.966 220.334 417.138 220.334 cv
415.311 220.334 413.948 219.78 413.05 218.671 cv
412.153 217.562 411.704 216.227 411.704 214.666 cv
411.704 213.13 412.153 211.8 413.05 210.675 cv
413.948 209.55 415.311 208.987 417.138 208.987 cv
418.966 208.987 420.329 209.55 421.227 210.675 cv
422.124 211.8 422.573 213.13 422.573 214.666 cv
422.573 216.227 422.124 217.562 421.227 218.671 cv
cp
431.107 209.328 mo
434.092 209.328 li
430.258 219.964 li
427.321 219.964 li
423.506 209.328 li
426.628 209.328 li
428.843 217.173 li
431.107 209.328 li
cp
438.508 208.06 mo
435.688 208.06 li
435.688 205.494 li
438.508 205.494 li
438.508 208.06 li
cp
435.688 209.328 mo
438.508 209.328 li
438.508 219.964 li
435.688 219.964 li
435.688 209.328 li
cp
443.357 216.568 mo
443.416 217.062 443.543 217.414 443.738 217.622 cv
444.083 217.993 444.72 218.178 445.65 218.178 cv
446.197 218.178 446.631 218.097 446.953 217.934 cv
447.275 217.771 447.436 217.528 447.436 217.202 cv
447.436 216.89 447.306 216.653 447.045 216.49 cv
446.785 216.327 445.819 216.048 444.148 215.651 cv
442.944 215.352 442.095 214.978 441.601 214.529 cv
441.107 214.087 440.86 213.449 440.86 212.617 cv
440.86 211.634 441.245 210.79 442.016 210.085 cv
442.787 209.379 443.871 209.026 445.27 209.026 cv
446.597 209.026 447.678 209.291 448.514 209.821 cv
449.35 210.351 449.829 211.267 449.953 212.568 cv
447.172 212.568 li
447.133 212.21 447.032 211.927 446.87 211.719 cv
446.564 211.342 446.044 211.153 445.309 211.153 cv
444.704 211.153 444.273 211.247 444.016 211.436 cv
443.759 211.625 443.631 211.846 443.631 212.099 cv
443.631 212.418 443.767 212.649 444.04 212.792 cv
444.314 212.942 445.279 213.199 446.938 213.563 cv
448.044 213.823 448.873 214.217 449.426 214.744 cv
449.973 215.277 450.246 215.944 450.246 216.744 cv
450.246 217.798 449.854 218.658 449.07 219.324 cv
448.286 219.991 447.075 220.325 445.436 220.325 cv
443.764 220.325 442.53 219.972 441.733 219.266 cv
440.936 218.56 440.538 217.661 440.538 216.568 cv
443.357 216.568 li
cp
455.15 208.06 mo
452.33 208.06 li
452.33 205.494 li
455.15 205.494 li
455.15 208.06 li
cp
452.33 209.328 mo
455.15 209.328 li
455.15 219.964 li
452.33 219.964 li
452.33 209.328 li
cp
464.477 217.134 mo
464.913 216.555 465.131 215.732 465.131 214.666 cv
465.131 213.599 464.913 212.778 464.477 212.202 cv
464.041 211.626 463.417 211.338 462.604 211.338 cv
461.791 211.338 461.165 211.626 460.726 212.202 cv
460.287 212.778 460.067 213.599 460.067 214.666 cv
460.067 215.732 460.287 216.555 460.726 217.134 cv
461.165 217.713 461.791 218.002 462.604 218.002 cv
463.417 218.002 464.041 217.713 464.477 217.134 cv
cp
466.702 218.671 mo
465.804 219.78 464.441 220.334 462.614 220.334 cv
460.786 220.334 459.423 219.78 458.525 218.671 cv
457.628 217.562 457.179 216.227 457.179 214.666 cv
457.179 213.13 457.628 211.8 458.525 210.675 cv
459.423 209.55 460.786 208.987 462.614 208.987 cv
464.441 208.987 465.804 209.55 466.702 210.675 cv
467.599 211.8 468.048 213.13 468.048 214.666 cv
468.048 216.227 467.599 217.562 466.702 218.671 cv
cp
478.616 209.938 mo
479.315 210.514 479.665 211.469 479.665 212.802 cv
479.665 219.964 li
476.816 219.964 li
476.816 213.495 li
476.816 212.935 476.741 212.506 476.591 212.207 cv
476.318 211.66 475.798 211.387 475.03 211.387 cv
474.087 211.387 473.44 211.787 473.089 212.587 cv
472.907 213.01 472.815 213.55 472.815 214.207 cv
472.815 219.964 li
470.045 219.964 li
470.045 209.348 li
472.728 209.348 li
472.728 210.899 li
473.085 210.353 473.424 209.959 473.742 209.719 cv
474.315 209.289 475.04 209.075 475.918 209.075 cv
477.017 209.075 477.917 209.363 478.616 209.938 cv
cp
f
grestore
grestore
grestore
5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
414.13 91.42 mo
414.13 71.44 li
414.13 64.78 417.46 61.45 424.12 61.45 cv
444.11 61.45 li
450.77 61.45 454.1 64.14 454.1 69.52 cv
454.1 77.59 li
.0300298 .723232 .546319 .00167849 cmyk
@
454.1 85.83 mo
448.6 74.84 li
454.1 77.59 li
459.59 74.84 li
454.1 85.83 li
cp
f
454.1 85.83 mo
448.6 74.84 li
454.1 77.59 li
459.59 74.84 li
454.1 85.83 li
cp
@
gsave
0 0 mo
981 0 li
981 415 li
0 415 li
0 0 li
cp
eclp
gsave
0 0 mo
981 0 li
981 414 li
0 414 li
0 0 li
cp
eclp
gsave
328 2 mo
523.826 2 li
523.826 48.9582 li
328 48.9582 li
328 2 li
cp
eclp
350.96 14.643 mo
350.96 15.209 351.051 15.6773 351.233 16.048 cv
351.571 16.731 352.186 17.0725 353.077 17.0725 cv
353.624 17.0725 354.1 16.8855 354.507 16.5115 cv
354.913 16.1375 355.116 15.5992 355.116 14.8967 cv
355.116 13.9666 354.739 13.3454 353.985 13.0332 cv
353.555 12.8575 352.879 12.7697 351.955 12.7697 cv
351.955 10.7793 li
352.859 10.7663 353.49 10.6785 353.848 10.5159 cv
354.466 10.2427 354.775 9.68977 354.775 8.85718 cv
354.775 8.3173 354.617 7.87823 354.302 7.53999 cv
353.986 7.20175 353.542 7.03263 352.97 7.03263 cv
352.313 7.03263 351.83 7.24078 351.521 7.65708 cv
351.212 8.07337 351.064 8.62952 351.077 9.32551 cv
348.482 9.32551 li
348.508 8.62301 348.628 7.95629 348.843 7.32534 cv
349.07 6.77245 349.428 6.26183 349.916 5.7935 cv
350.28 5.46176 350.713 5.20808 351.214 5.03246 cv
351.715 4.85683 352.329 4.76902 353.058 4.76902 cv
354.411 4.76902 355.502 5.11864 356.331 5.81789 cv
357.161 6.51714 357.575 7.45543 357.575 8.63277 cv
357.575 9.46536 357.328 10.1679 356.834 10.7403 cv
356.522 11.098 356.196 11.3419 355.858 11.472 cv
356.112 11.472 356.476 11.6899 356.951 12.1258 cv
357.66 12.7827 358.014 13.6804 358.014 14.8187 cv
358.014 16.0155 357.6 17.0676 356.77 17.975 cv
355.941 18.8824 354.713 19.3361 353.087 19.3361 cv
351.084 19.3361 349.692 18.6824 348.911 17.375 cv
348.501 16.679 348.274 15.7683 348.228 14.643 cv
350.96 14.643 li
cp
360.05 16.0773 mo
363.006 16.0773 li
363.006 18.9849 li
360.05 18.9849 li
360.05 16.0773 li
cp
374.412 7.10093 mo
374.412 10.9647 li
377.817 10.9647 li
378.493 10.9647 379.001 10.8866 379.339 10.7305 cv
379.938 10.4573 380.237 9.91744 380.237 9.11086 cv
380.237 8.23924 379.947 7.65382 379.368 7.35461 cv
379.043 7.18549 378.555 7.10093 377.905 7.10093 cv
374.412 7.10093 li
cp
380.856 4.97392 mo
381.399 5.20158 381.86 5.53657 382.237 5.97888 cv
382.549 6.34314 382.796 6.74643 382.978 7.18874 cv
383.161 7.63106 383.252 8.13517 383.252 8.70107 cv
383.252 9.38406 383.079 10.0557 382.734 10.7159 cv
382.39 11.3761 381.821 11.8428 381.027 12.116 cv
381.691 12.3827 382.16 12.7616 382.437 13.2527 cv
382.713 13.7438 382.852 14.4934 382.852 15.5017 cv
382.852 16.4676 li
382.852 17.1246 382.878 17.5701 382.93 17.8043 cv
383.008 18.1751 383.19 18.4483 383.476 18.6239 cv
383.476 18.9849 li
380.168 18.9849 li
380.077 18.6662 380.012 18.4092 379.973 18.2141 cv
379.895 17.8108 379.853 17.3978 379.846 16.975 cv
379.827 15.6383 li
379.814 14.7211 379.646 14.1097 379.324 13.804 cv
379.002 13.4982 378.399 13.3454 377.515 13.3454 cv
374.412 13.3454 li
374.412 18.9849 li
371.475 18.9849 li
371.475 4.60315 li
378.529 4.60315 li
379.537 4.62267 380.313 4.74625 380.856 4.97392 cv
cp
388.378 8.34982 mo
388.378 14.7601 li
388.378 15.3651 388.449 15.8204 388.593 16.1261 cv
388.846 16.666 389.344 16.9359 390.085 16.9359 cv
391.035 16.9359 391.686 16.5522 392.037 15.7846 cv
392.219 15.3683 392.31 14.8187 392.31 14.1357 cv
392.31 8.34982 li
395.13 8.34982 li
395.13 18.9849 li
392.427 18.9849 li
392.427 17.4823 li
392.401 17.5148 392.336 17.6124 392.232 17.775 cv
392.128 17.9376 392.004 18.0807 391.861 18.2043 cv
391.425 18.5946 391.004 18.8613 390.598 19.0044 cv
390.191 19.1475 389.715 19.2191 389.168 19.2191 cv
387.594 19.2191 386.534 18.6532 385.987 17.5213 cv
385.682 16.8969 385.529 15.9765 385.529 14.7601 cv
385.529 8.34982 li
388.378 8.34982 li
cp
406.39 8.95963 mo
407.089 9.53529 407.439 10.4898 407.439 11.8233 cv
407.439 18.9849 li
404.59 18.9849 li
404.59 12.516 li
404.59 11.9566 404.515 11.5273 404.366 11.2281 cv
404.092 10.6817 403.572 10.4085 402.805 10.4085 cv
401.861 10.4085 401.214 10.8086 400.863 11.6086 cv
400.681 12.0314 400.59 12.5713 400.59 13.2283 cv
400.59 18.9849 li
397.819 18.9849 li
397.819 8.36933 li
400.502 8.36933 li
400.502 9.92069 li
400.86 9.3743 401.198 8.98077 401.517 8.7401 cv
402.089 8.31079 402.814 8.09614 403.692 8.09614 cv
404.792 8.09614 405.691 8.38397 406.39 8.95963 cv
cp
423.266 7.57902 mo
422.872 7.26029 422.321 7.10093 421.612 7.10093 cv
418.812 7.10093 li
418.812 11.3354 li
421.612 11.3354 li
422.321 11.3354 422.872 11.1631 423.266 10.8183 cv
423.659 10.4736 423.856 9.92719 423.856 9.17916 cv
423.856 8.43113 423.659 7.89775 423.266 7.57902 cv
cp
425.544 12.76 mo
424.685 13.4625 423.459 13.8137 421.866 13.8137 cv
418.812 13.8137 li
418.812 18.9849 li
415.826 18.9849 li
415.826 4.60315 li
422.09 4.60315 li
423.534 4.60315 424.685 4.97392 425.544 5.71544 cv
426.403 6.45697 426.832 7.60504 426.832 9.15965 cv
426.832 10.8574 426.403 12.0575 425.544 12.76 cv
cp
434.758 8.10102 mo
434.793 8.10427 434.873 8.10915 434.997 8.11565 cv
434.997 10.9647 li
434.821 10.9452 434.665 10.9322 434.528 10.9257 cv
434.392 10.9191 434.281 10.9159 434.197 10.9159 cv
433.078 10.9159 432.326 11.2802 431.943 12.0087 cv
431.728 12.4185 431.621 13.0494 431.621 13.9015 cv
431.621 18.9849 li
428.82 18.9849 li
428.82 8.34982 li
431.474 8.34982 li
431.474 10.2036 li
431.904 9.49463 432.278 9.01004 432.596 8.74985 cv
433.117 8.31404 433.793 8.09614 434.626 8.09614 cv
434.678 8.09614 434.722 8.09776 434.758 8.10102 cv
cp
443.269 16.1554 mo
443.704 15.5765 443.922 14.7536 443.922 13.6869 cv
443.922 12.6201 443.704 11.7989 443.269 11.2232 cv
442.833 10.6476 442.208 10.3597 441.395 10.3597 cv
440.582 10.3597 439.956 10.6476 439.517 11.2232 cv
439.078 11.7989 438.858 12.6201 438.858 13.6869 cv
438.858 14.7536 439.078 15.5765 439.517 16.1554 cv
439.956 16.7343 440.582 17.0237 441.395 17.0237 cv
442.208 17.0237 442.833 16.7343 443.269 16.1554 cv
cp
445.493 17.6921 mo
444.595 18.8011 443.233 19.3557 441.405 19.3557 cv
439.577 19.3557 438.214 18.8011 437.317 17.6921 cv
436.419 16.5831 435.97 15.248 435.97 13.6869 cv
435.97 12.1518 436.419 10.8216 437.317 9.69628 cv
438.214 8.57098 439.577 8.00833 441.405 8.00833 cv
443.233 8.00833 444.595 8.57098 445.493 9.69628 cv
446.391 10.8216 446.84 12.1518 446.84 13.6869 cv
446.84 15.248 446.391 16.5831 445.493 17.6921 cv
cp
454.68 13.8137 mo
454.505 13.9243 454.327 14.0137 454.148 14.082 cv
453.97 14.1503 453.724 14.2137 453.412 14.2723 cv
452.787 14.3894 li
452.202 14.4934 451.782 14.6203 451.529 14.7699 cv
451.099 15.0236 450.885 15.4171 450.885 15.9505 cv
450.885 16.4253 451.017 16.7684 451.28 16.9798 cv
451.543 17.1912 451.864 17.2969 452.241 17.2969 cv
452.839 17.2969 453.391 17.1213 453.895 16.7701 cv
454.399 16.4188 454.661 15.7781 454.68 14.8479 cv
454.68 13.8137 li
cp
452.992 12.516 mo
453.506 12.451 453.874 12.3697 454.095 12.2721 cv
454.492 12.103 454.69 11.8396 454.69 11.4818 cv
454.69 11.046 454.539 10.7451 454.236 10.5793 cv
453.934 10.4134 453.49 10.3305 452.905 10.3305 cv
452.248 10.3305 451.782 10.4931 451.509 10.8183 cv
451.314 11.059 451.184 11.3842 451.119 11.794 cv
448.436 11.794 li
448.494 10.8639 448.755 10.0996 449.216 9.50114 cv
449.951 8.56447 451.213 8.09614 453.002 8.09614 cv
454.166 8.09614 455.201 8.32705 456.105 8.78888 cv
457.009 9.25071 457.461 10.1223 457.461 11.4037 cv
457.461 16.2822 li
457.461 16.6205 457.467 17.0302 457.48 17.5116 cv
457.5 17.8758 457.555 18.123 457.646 18.2531 cv
457.737 18.3832 457.874 18.4905 458.056 18.5751 cv
458.056 18.9849 li
455.032 18.9849 li
454.947 18.7702 454.888 18.5686 454.856 18.38 cv
454.823 18.1913 454.797 17.9767 454.778 17.736 cv
454.394 18.1523 453.952 18.5068 453.451 18.7995 cv
452.852 19.1443 452.176 19.3166 451.421 19.3166 cv
450.459 19.3166 449.664 19.0418 449.036 18.4922 cv
448.408 17.9425 448.094 17.1636 448.094 16.1554 cv
448.094 14.8479 448.598 13.9015 449.607 13.3161 cv
450.16 12.9974 450.973 12.7697 452.046 12.6331 cv
452.992 12.516 li
cp
466.268 12.1648 mo
466.216 11.768 466.082 11.4102 465.868 11.0915 cv
465.555 10.6622 465.071 10.4476 464.414 10.4476 cv
463.477 10.4476 462.836 10.9126 462.492 11.8428 cv
462.31 12.3372 462.218 12.9941 462.218 13.8137 cv
462.218 14.5943 462.31 15.222 462.492 15.6968 cv
462.823 16.5814 463.448 17.0237 464.365 17.0237 cv
465.015 17.0237 465.477 16.8481 465.75 16.4969 cv
466.024 16.1456 466.19 15.6903 466.248 15.1309 cv
469.087 15.1309 li
469.022 15.9765 468.717 16.7766 468.17 17.5311 cv
467.299 18.7475 466.007 19.3557 464.297 19.3557 cv
462.586 19.3557 461.327 18.8483 460.521 17.8336 cv
459.714 16.8188 459.311 15.5017 459.311 13.882 cv
459.311 12.0542 459.756 10.6329 460.648 9.61822 cv
461.539 8.6035 462.768 8.09614 464.336 8.09614 cv
465.669 8.09614 466.76 8.39535 467.609 8.99378 cv
468.458 9.5922 468.961 10.6492 469.117 12.1648 cv
466.268 12.1648 li
cp
469.923 10.428 mo
469.923 8.44739 li
471.406 8.44739 li
471.406 5.48128 li
474.157 5.48128 li
474.157 8.44739 li
475.884 8.44739 li
475.884 10.428 li
474.157 10.428 li
474.157 16.048 li
474.157 16.4839 474.212 16.7554 474.323 16.8628 cv
474.434 16.9701 474.772 17.0237 475.338 17.0237 cv
475.422 17.0237 475.512 17.0221 475.606 17.0189 cv
475.7 17.0156 475.793 17.0107 475.884 17.0042 cv
475.884 19.0825 li
474.567 19.1312 li
473.253 19.1768 472.355 18.9491 471.874 18.4483 cv
471.562 18.1295 471.406 17.6384 471.406 16.975 cv
471.406 10.428 li
469.923 10.428 li
cp
480.524 7.08142 mo
477.705 7.08142 li
477.705 4.51534 li
480.524 4.51534 li
480.524 7.08142 li
cp
477.705 8.34982 mo
480.524 8.34982 li
480.524 18.9849 li
477.705 18.9849 li
477.705 8.34982 li
cp
489.764 8.34982 mo
492.75 8.34982 li
488.915 18.9849 li
485.979 18.9849 li
482.164 8.34982 li
485.286 8.34982 li
487.501 16.1944 li
489.764 8.34982 li
cp
497.005 10.9647 mo
496.65 11.368 496.428 11.9144 496.337 12.6038 cv
500.659 12.6038 li
500.613 11.8688 500.391 11.3111 499.991 10.9305 cv
499.591 10.55 499.095 10.3597 498.503 10.3597 cv
497.859 10.3597 497.359 10.5614 497.005 10.9647 cv
cp
500.893 8.56447 mo
501.602 8.89621 502.187 9.41983 502.649 10.1353 cv
503.066 10.7663 503.336 11.4981 503.459 12.3307 cv
503.531 12.8185 503.56 13.521 503.547 14.4382 cv
496.268 14.4382 li
496.307 15.5049 496.642 16.2529 497.273 16.6822 cv
497.657 16.9489 498.119 17.0823 498.659 17.0823 cv
499.231 17.0823 499.696 16.9197 500.054 16.5944 cv
500.249 16.4188 500.421 16.1749 500.571 15.8627 cv
503.41 15.8627 li
503.339 16.4936 503.01 17.1343 502.425 17.7848 cv
501.514 18.819 500.239 19.3361 498.6 19.3361 cv
497.247 19.3361 496.054 18.9003 495.019 18.0287 cv
493.985 17.1571 493.468 15.7391 493.468 13.7747 cv
493.468 11.9339 493.935 10.5224 494.868 9.54017 cv
495.802 8.55797 497.013 8.06687 498.503 8.06687 cv
499.387 8.06687 500.184 8.23274 500.893 8.56447 cv
cp
0 0 0 1 cmyk
f
344.202 38.5241 mo
344.293 39.1811 344.472 39.6722 344.739 39.9974 cv
345.227 40.5894 346.063 40.8853 347.247 40.8853 cv
347.956 40.8853 348.531 40.8073 348.974 40.6512 cv
349.813 40.3519 350.232 39.7958 350.232 38.9827 cv
350.232 38.5079 350.024 38.1404 349.608 37.8802 cv
349.191 37.6265 348.538 37.4021 347.647 37.207 cv
346.125 36.8655 li
344.628 36.5272 343.594 36.1597 343.022 35.7629 cv
342.053 35.0995 341.568 34.062 341.568 32.6505 cv
341.568 31.3625 342.036 30.2925 342.973 29.4404 cv
343.91 28.5883 345.285 28.1623 347.1 28.1623 cv
348.616 28.1623 349.909 28.5639 350.979 29.3673 cv
352.049 30.1706 352.61 31.3365 352.662 32.8651 cv
349.774 32.8651 li
349.722 32 349.344 31.3853 348.642 31.0211 cv
348.173 30.7804 347.591 30.66 346.895 30.66 cv
346.121 30.66 345.503 30.8162 345.041 31.1284 cv
344.58 31.4406 344.349 31.8764 344.349 32.4358 cv
344.349 32.9497 344.576 33.3335 345.032 33.5871 cv
345.324 33.7563 345.949 33.9546 346.905 34.1823 cv
349.383 34.7775 li
350.47 35.0377 351.289 35.3857 351.842 35.8215 cv
352.701 36.498 353.13 37.4769 353.13 38.7583 cv
353.13 40.0722 352.628 41.1634 351.623 42.0318 cv
350.618 42.9001 349.198 43.3343 347.364 43.3343 cv
345.49 43.3343 344.017 42.9066 342.944 42.0513 cv
341.87 41.1959 341.334 40.0202 341.334 38.5241 cv
344.202 38.5241 li
cp
361.47 36.1435 mo
361.418 35.7467 361.285 35.3889 361.07 35.0702 cv
360.758 34.6409 360.273 34.4262 359.616 34.4262 cv
358.68 34.4262 358.039 34.8913 357.694 35.8215 cv
357.512 36.3158 357.421 36.9728 357.421 37.7924 cv
357.421 38.5729 357.512 39.2006 357.694 39.6755 cv
358.026 40.5601 358.65 41.0024 359.568 41.0024 cv
360.218 41.0024 360.68 40.8268 360.953 40.4755 cv
361.226 40.1243 361.392 39.669 361.451 39.1096 cv
364.29 39.1096 li
364.225 39.9552 363.919 40.7552 363.373 41.5098 cv
362.501 42.7261 361.21 43.3343 359.499 43.3343 cv
357.789 43.3343 356.53 42.827 355.723 41.8122 cv
354.917 40.7975 354.514 39.4803 354.514 37.8607 cv
354.514 36.0329 354.959 34.6116 355.85 33.5969 cv
356.741 32.5822 357.971 32.0748 359.538 32.0748 cv
360.872 32.0748 361.963 32.374 362.812 32.9724 cv
363.661 33.5709 364.163 34.6279 364.319 36.1435 cv
361.47 36.1435 li
cp
372.082 37.7924 mo
371.906 37.903 371.729 37.9924 371.55 38.0607 cv
371.371 38.129 371.126 38.1924 370.813 38.2509 cv
370.189 38.368 li
369.604 38.4721 369.184 38.5989 368.93 38.7486 cv
368.501 39.0022 368.286 39.3958 368.286 39.9291 cv
368.286 40.404 368.418 40.7471 368.682 40.9585 cv
368.945 41.1699 369.265 41.2756 369.643 41.2756 cv
370.241 41.2756 370.792 41.1 371.296 40.7487 cv
371.801 40.3975 372.062 39.7568 372.082 38.8266 cv
372.082 37.7924 li
cp
370.394 36.4947 mo
370.908 36.4297 371.275 36.3483 371.496 36.2508 cv
371.893 36.0817 372.092 35.8182 372.092 35.4605 cv
372.092 35.0247 371.94 34.7238 371.638 34.5579 cv
371.335 34.3921 370.892 34.3091 370.306 34.3091 cv
369.649 34.3091 369.184 34.4718 368.911 34.797 cv
368.716 35.0377 368.586 35.3629 368.521 35.7727 cv
365.837 35.7727 li
365.896 34.8425 366.156 34.0782 366.618 33.4798 cv
367.353 32.5431 368.615 32.0748 370.404 32.0748 cv
371.568 32.0748 372.602 32.3057 373.506 32.7675 cv
374.411 33.2294 374.863 34.101 374.863 35.3824 cv
374.863 40.2609 li
374.863 40.5991 374.869 41.0089 374.882 41.4903 cv
374.902 41.8545 374.957 42.1017 375.048 42.2318 cv
375.139 42.3619 375.276 42.4692 375.458 42.5538 cv
375.458 42.9636 li
372.433 42.9636 li
372.349 42.7489 372.29 42.5473 372.258 42.3586 cv
372.225 42.17 372.199 41.9553 372.179 41.7147 cv
371.796 42.131 371.353 42.4855 370.853 42.7782 cv
370.254 43.1229 369.578 43.2953 368.823 43.2953 cv
367.86 43.2953 367.065 43.0205 366.437 42.4708 cv
365.81 41.9212 365.496 41.1423 365.496 40.134 cv
365.496 38.8266 366 37.8802 367.008 37.2948 cv
367.561 36.976 368.374 36.7484 369.448 36.6118 cv
370.394 36.4947 li
cp
380.157 42.9636 mo
377.376 42.9636 li
377.376 28.5818 li
380.157 28.5818 li
380.157 42.9636 li
cp
385.718 31.0601 mo
382.898 31.0601 li
382.898 28.494 li
385.718 28.494 li
385.718 31.0601 li
cp
382.898 32.3285 mo
385.718 32.3285 li
385.718 42.9636 li
382.898 42.9636 li
382.898 32.3285 li
cp
396.992 32.9383 mo
397.692 33.514 398.041 34.4685 398.041 35.802 cv
398.041 42.9636 li
395.192 42.9636 li
395.192 36.4947 li
395.192 35.9353 395.117 35.506 394.968 35.2068 cv
394.695 34.6604 394.174 34.3872 393.407 34.3872 cv
392.463 34.3872 391.816 34.7872 391.465 35.5873 cv
391.283 36.0101 391.192 36.55 391.192 37.207 cv
391.192 42.9636 li
388.421 42.9636 li
388.421 32.348 li
391.104 32.348 li
391.104 33.8994 li
391.462 33.353 391.8 32.9594 392.119 32.7188 cv
392.691 32.2895 393.416 32.0748 394.295 32.0748 cv
395.394 32.0748 396.293 32.3626 396.992 32.9383 cv
cp
406.809 39.9438 mo
407.258 39.4527 407.482 38.6705 407.482 37.5972 cv
407.482 36.589 407.269 35.8215 406.843 35.2946 cv
406.417 34.7677 405.846 34.5043 405.131 34.5043 cv
404.155 34.5043 403.482 34.9629 403.111 35.88 cv
402.916 36.3679 402.818 36.9695 402.818 37.685 cv
402.818 38.303 402.922 38.8526 403.13 39.334 cv
403.508 40.2316 404.184 40.6804 405.16 40.6804 cv
405.81 40.6804 406.36 40.4349 406.809 39.9438 cv
cp
405.862 32.3187 mo
406.539 32.5984 407.085 33.1123 407.502 33.8603 cv
407.502 32.3285 li
410.204 32.3285 li
410.204 42.4172 li
410.204 43.7896 409.973 44.8239 409.511 45.5199 cv
408.718 46.7167 407.196 47.3152 404.945 47.3152 cv
403.586 47.3152 402.477 47.0485 401.618 46.5151 cv
400.759 45.9817 400.285 45.1849 400.194 44.1246 cv
403.218 44.1246 li
403.296 44.4499 403.423 44.684 403.599 44.8271 cv
403.898 45.0808 404.402 45.2077 405.111 45.2077 cv
406.113 45.2077 406.783 44.8727 407.121 44.2027 cv
407.342 43.7734 407.453 43.0514 407.453 42.0366 cv
407.453 41.3537 li
407.186 41.809 406.9 42.1505 406.594 42.3781 cv
406.041 42.8009 405.322 43.0123 404.438 43.0123 cv
403.072 43.0123 401.981 42.5326 401.164 41.5732 cv
400.348 40.6138 399.94 39.3145 399.94 37.6753 cv
399.94 36.0947 400.333 34.7661 401.12 33.6896 cv
401.908 32.6131 403.023 32.0748 404.467 32.0748 cv
405.001 32.0748 405.466 32.1561 405.862 32.3187 cv
cp
422.484 37.5289 mo
426.133 37.5289 li
424.338 31.8699 li
422.484 37.5289 li
cp
422.67 28.5818 mo
426.065 28.5818 li
431.158 42.9636 li
427.899 42.9636 li
426.973 40.0072 li
421.674 40.0072 li
420.679 42.9636 li
417.538 42.9636 li
422.67 28.5818 li
cp
435.592 42.9636 mo
432.811 42.9636 li
432.811 28.5818 li
435.592 28.5818 li
435.592 42.9636 li
cp
444.51 39.9438 mo
444.958 39.4527 445.183 38.6705 445.183 37.5972 cv
445.183 36.589 444.97 35.8215 444.544 35.2946 cv
444.118 34.7677 443.547 34.5043 442.831 34.5043 cv
441.856 34.5043 441.182 34.9629 440.812 35.88 cv
440.617 36.3679 440.519 36.9695 440.519 37.685 cv
440.519 38.303 440.623 38.8526 440.831 39.334 cv
441.209 40.2316 441.885 40.6804 442.861 40.6804 cv
443.511 40.6804 444.061 40.4349 444.51 39.9438 cv
cp
443.563 32.3187 mo
444.24 32.5984 444.786 33.1123 445.202 33.8603 cv
445.202 32.3285 li
447.905 32.3285 li
447.905 42.4172 li
447.905 43.7896 447.674 44.8239 447.212 45.5199 cv
446.419 46.7167 444.897 47.3152 442.646 47.3152 cv
441.287 47.3152 440.178 47.0485 439.319 46.5151 cv
438.46 45.9817 437.985 45.1849 437.894 44.1246 cv
440.919 44.1246 li
440.997 44.4499 441.124 44.684 441.3 44.8271 cv
441.599 45.0808 442.103 45.2077 442.812 45.2077 cv
443.814 45.2077 444.484 44.8727 444.822 44.2027 cv
445.043 43.7734 445.154 43.0514 445.154 42.0366 cv
445.154 41.3537 li
444.887 41.809 444.601 42.1505 444.295 42.3781 cv
443.742 42.8009 443.023 43.0123 442.139 43.0123 cv
440.773 43.0123 439.682 42.5326 438.865 41.5732 cv
438.049 40.6138 437.641 39.3145 437.641 37.6753 cv
437.641 36.0947 438.034 34.7661 438.821 33.6896 cv
439.608 32.6131 440.724 32.0748 442.168 32.0748 cv
442.701 32.0748 443.166 32.1561 443.563 32.3187 cv
cp
457.131 40.134 mo
457.567 39.5551 457.785 38.7323 457.785 37.6655 cv
457.785 36.5988 457.567 35.7776 457.131 35.2019 cv
456.695 34.6262 456.071 34.3384 455.258 34.3384 cv
454.445 34.3384 453.819 34.6262 453.38 35.2019 cv
452.941 35.7776 452.721 36.5988 452.721 37.6655 cv
452.721 38.7323 452.941 39.5551 453.38 40.134 cv
453.819 40.713 454.445 41.0024 455.258 41.0024 cv
456.071 41.0024 456.695 40.713 457.131 40.134 cv
cp
459.356 41.6708 mo
458.458 42.7798 457.095 43.3343 455.268 43.3343 cv
453.44 43.3343 452.077 42.7798 451.179 41.6708 cv
450.282 40.5617 449.833 39.2266 449.833 37.6655 cv
449.833 36.1304 450.282 34.8002 451.179 33.6749 cv
452.077 32.5496 453.44 31.987 455.268 31.987 cv
457.095 31.987 458.458 32.5496 459.356 33.6749 cv
460.253 34.8002 460.702 36.1304 460.702 37.6655 cv
460.702 39.2266 460.253 40.5617 459.356 41.6708 cv
cp
468.587 32.0797 mo
468.623 32.0829 468.702 32.0878 468.826 32.0943 cv
468.826 34.9433 li
468.65 34.9238 468.494 34.9108 468.358 34.9043 cv
468.221 34.8978 468.11 34.8946 468.026 34.8946 cv
466.907 34.8946 466.156 35.2588 465.772 35.9873 cv
465.557 36.3971 465.45 37.0281 465.45 37.8802 cv
465.45 42.9636 li
462.65 42.9636 li
462.65 32.3285 li
465.304 32.3285 li
465.304 34.1823 li
465.733 33.4733 466.107 32.9887 466.426 32.7285 cv
466.946 32.2927 467.623 32.0748 468.455 32.0748 cv
468.507 32.0748 468.551 32.0764 468.587 32.0797 cv
cp
473.312 31.0601 mo
470.492 31.0601 li
470.492 28.494 li
473.312 28.494 li
473.312 31.0601 li
cp
470.492 32.3285 mo
473.312 32.3285 li
473.312 42.9636 li
470.492 42.9636 li
470.492 32.3285 li
cp
474.902 34.4067 mo
474.902 32.4261 li
476.386 32.4261 li
476.386 29.4599 li
479.137 29.4599 li
479.137 32.4261 li
480.864 32.4261 li
480.864 34.4067 li
479.137 34.4067 li
479.137 40.0267 li
479.137 40.4625 479.192 40.7341 479.303 40.8414 cv
479.413 40.9487 479.752 41.0024 480.318 41.0024 cv
480.402 41.0024 480.492 41.0008 480.586 40.9975 cv
480.68 40.9943 480.773 40.9894 480.864 40.9829 cv
480.864 43.0611 li
479.547 43.1099 li
478.233 43.1554 477.335 42.9278 476.854 42.4269 cv
476.542 42.1082 476.386 41.6171 476.386 40.9536 cv
476.386 34.4067 li
474.902 34.4067 li
cp
490.3 32.3968 mo
490.837 32.6244 491.277 32.9724 491.622 33.4408 cv
491.915 33.8376 492.094 34.2457 492.159 34.6653 cv
492.224 35.0848 492.256 35.7694 492.256 36.7191 cv
492.256 42.9636 li
489.417 42.9636 li
489.417 36.4947 li
489.417 35.9223 489.319 35.4605 489.124 35.1092 cv
488.871 34.6149 488.389 34.3677 487.68 34.3677 cv
486.945 34.3677 486.387 34.6132 486.007 35.1043 cv
485.626 35.5954 485.436 36.2963 485.436 37.207 cv
485.436 42.9636 li
482.665 42.9636 li
482.665 28.6306 li
485.436 28.6306 li
485.436 33.714 li
485.839 33.096 486.306 32.6651 486.836 32.4212 cv
487.366 32.1773 487.924 32.0553 488.51 32.0553 cv
489.167 32.0553 489.763 32.1691 490.3 32.3968 cv
cp
508.107 32.3675 mo
508.563 32.5496 508.976 32.8684 509.346 33.3237 cv
509.646 33.6945 509.847 34.1498 509.951 34.6897 cv
510.016 35.0474 510.049 35.571 510.049 36.2605 cv
510.029 42.9636 li
507.18 42.9636 li
507.18 36.1922 li
507.18 35.7889 507.115 35.4572 506.985 35.197 cv
506.738 34.7027 506.283 34.4555 505.619 34.4555 cv
504.852 34.4555 504.322 34.7742 504.029 35.4117 cv
503.879 35.7499 503.805 36.1565 503.805 36.6313 cv
503.805 42.9636 li
501.004 42.9636 li
501.004 36.6313 li
501.004 36.0004 500.939 35.5418 500.809 35.2556 cv
500.575 34.7417 500.116 34.4848 499.433 34.4848 cv
498.64 34.4848 498.106 34.7417 497.833 35.2556 cv
497.684 35.5483 497.609 35.9841 497.609 36.563 cv
497.609 42.9636 li
494.789 42.9636 li
494.789 32.348 li
497.492 32.348 li
497.492 33.8994 li
497.837 33.3465 498.162 32.9529 498.467 32.7188 cv
499.007 32.3025 499.707 32.0943 500.565 32.0943 cv
501.378 32.0943 502.035 32.2732 502.536 32.631 cv
502.939 32.9627 503.245 33.3887 503.453 33.9091 cv
503.818 33.2847 504.27 32.8261 504.809 32.5334 cv
505.382 32.2407 506.019 32.0943 506.722 32.0943 cv
507.19 32.0943 507.652 32.1854 508.107 32.3675 cv
cp
f
grestore
grestore
grestore
gsave
0 0 mo
981 0 li
981 415 li
0 415 li
0 0 li
cp
eclp
gsave
0 0 mo
981 0 li
981 414 li
0 414 li
0 0 li
cp
eclp
595.27 104.99 mo
595 205.32 li
594.98 211.98 594.977 218.64 594.99 225.3 cv
595.25 360.8 li
@
595.26 369.04 mo
589.75 358.06 li
595.25 360.8 li
600.74 358.04 li
595.26 369.04 li
cp
f
595.26 369.04 mo
589.75 358.06 li
595.25 360.8 li
600.74 358.04 li
595.26 369.04 li
cp
@
581.39 104.99 mo
581.39 221.16 li
@
581.39 229.41 mo
575.9 218.41 li
581.39 221.16 li
586.89 218.41 li
581.39 229.41 li
cp
f
581.39 229.41 mo
575.9 218.41 li
581.39 221.16 li
586.89 218.41 li
581.39 229.41 li
cp
@
grestore
grestore
gsave
0 0 mo
981 0 li
981 415 li
0 415 li
0 0 li
cp
eclp
gsave
0 0 mo
981 0 li
981 414 li
0 414 li
0 0 li
cp
eclp
gsave
493 18 mo
688.826 18 li
688.826 89.936 li
493 89.936 li
493 18 li
cp
eclp
541.447 31.9407 mo
539.847 31.9407 li
539.847 34.9849 li
537.125 34.9849 li
537.125 31.9407 li
531.524 31.9407 li
531.524 29.5112 li
536.725 20.9251 li
539.847 20.9251 li
539.847 29.7649 li
541.447 29.7649 li
541.447 31.9407 li
cp
537.125 29.7649 mo
537.125 23.6571 li
533.583 29.7649 li
537.125 29.7649 li
cp
543.346 32.0773 mo
546.302 32.0773 li
546.302 34.9849 li
543.346 34.9849 li
543.346 32.0773 li
cp
557.62 23.1009 mo
557.62 26.2719 li
561.152 26.2719 li
561.783 26.2719 562.295 26.1532 562.689 25.9158 cv
563.083 25.6784 563.279 25.2572 563.279 24.6523 cv
563.279 23.9823 563.019 23.54 562.499 23.3253 cv
562.05 23.1757 561.477 23.1009 560.781 23.1009 cv
557.62 23.1009 li
cp
557.62 28.6526 mo
557.62 32.4871 li
561.152 32.4871 li
561.783 32.4871 562.274 32.4025 562.626 32.2334 cv
563.263 31.9212 563.582 31.3228 563.582 30.4382 cv
563.582 29.6901 563.273 29.1763 562.655 28.8966 cv
562.31 28.7404 561.826 28.6591 561.201 28.6526 cv
557.62 28.6526 li
cp
565.484 22.135 mo
565.927 22.7464 566.148 23.4782 566.148 24.3303 cv
566.148 25.2084 565.927 25.9142 565.484 26.4476 cv
565.237 26.7468 564.873 27.02 564.392 27.2671 cv
565.127 27.5338 565.681 27.9566 566.055 28.5355 cv
566.429 29.1145 566.616 29.817 566.616 30.643 cv
566.616 31.4952 566.401 32.2594 565.972 32.9359 cv
565.699 33.3848 565.357 33.762 564.948 34.0677 cv
564.486 34.419 563.941 34.6597 563.313 34.7897 cv
562.686 34.9198 562.004 34.9849 561.269 34.9849 cv
554.752 34.9849 li
554.752 20.6032 li
561.738 20.6032 li
563.5 20.6292 564.749 21.1398 565.484 22.135 cv
cp
574.811 24.101 mo
574.847 24.1043 574.926 24.1091 575.05 24.1157 cv
575.05 26.9647 li
574.874 26.9452 574.718 26.9322 574.582 26.9257 cv
574.445 26.9191 574.335 26.9159 574.25 26.9159 cv
573.131 26.9159 572.38 27.2802 571.996 28.0087 cv
571.781 28.4185 571.674 29.0494 571.674 29.9015 cv
571.674 34.9849 li
568.874 34.9849 li
568.874 24.3498 li
571.528 24.3498 li
571.528 26.2036 li
571.957 25.4946 572.331 25.01 572.65 24.7499 cv
573.17 24.314 573.847 24.0961 574.679 24.0961 cv
574.731 24.0961 574.775 24.0978 574.811 24.101 cv
cp
583.322 32.1554 mo
583.758 31.5765 583.976 30.7536 583.976 29.6869 cv
583.976 28.6201 583.758 27.7989 583.322 27.2232 cv
582.886 26.6476 582.262 26.3598 581.449 26.3598 cv
580.636 26.3598 580.01 26.6476 579.57 27.2232 cv
579.131 27.7989 578.912 28.6201 578.912 29.6869 cv
578.912 30.7536 579.131 31.5765 579.57 32.1554 cv
580.01 32.7343 580.636 33.0237 581.449 33.0237 cv
582.262 33.0237 582.886 32.7343 583.322 32.1554 cv
cp
585.547 33.6921 mo
584.649 34.8011 583.286 35.3557 581.458 35.3557 cv
579.631 35.3557 578.268 34.8011 577.37 33.6921 cv
576.473 32.5831 576.024 31.248 576.024 29.6869 cv
576.024 28.1518 576.473 26.8216 577.37 25.6963 cv
578.268 24.571 579.631 24.0083 581.458 24.0083 cv
583.286 24.0083 584.649 24.571 585.547 25.6963 cv
586.444 26.8216 586.893 28.1518 586.893 29.6869 cv
586.893 31.248 586.444 32.5831 585.547 33.6921 cv
cp
594.734 29.8137 mo
594.558 29.9243 594.381 30.0137 594.202 30.082 cv
594.023 30.1503 593.778 30.2137 593.465 30.2723 cv
592.841 30.3894 li
592.255 30.4934 591.836 30.6203 591.582 30.7699 cv
591.153 31.0236 590.938 31.4171 590.938 31.9505 cv
590.938 32.4253 591.07 32.7684 591.333 32.9798 cv
591.597 33.1912 591.917 33.2969 592.294 33.2969 cv
592.893 33.2969 593.444 33.1213 593.948 32.7701 cv
594.452 32.4188 594.714 31.7781 594.734 30.8479 cv
594.734 29.8137 li
cp
593.046 28.516 mo
593.56 28.451 593.927 28.3697 594.148 28.2721 cv
594.545 28.103 594.743 27.8396 594.743 27.4818 cv
594.743 27.046 594.592 26.7451 594.29 26.5793 cv
593.987 26.4134 593.543 26.3305 592.958 26.3305 cv
592.301 26.3305 591.836 26.4931 591.563 26.8183 cv
591.368 27.059 591.237 27.3842 591.172 27.794 cv
588.489 27.794 li
588.548 26.8639 588.808 26.0996 589.27 25.5011 cv
590.005 24.5645 591.267 24.0961 593.056 24.0961 cv
594.22 24.0961 595.254 24.3271 596.158 24.7889 cv
597.062 25.2507 597.514 26.1223 597.514 27.4037 cv
597.514 32.2822 li
597.514 32.6205 597.521 33.0302 597.534 33.5116 cv
597.553 33.8759 597.609 34.123 597.7 34.2531 cv
597.791 34.3832 597.927 34.4905 598.11 34.5751 cv
598.11 34.9849 li
595.085 34.9849 li
595 34.7702 594.942 34.5686 594.909 34.38 cv
594.877 34.1913 594.851 33.9767 594.831 33.736 cv
594.448 34.1523 594.005 34.5068 593.504 34.7995 cv
592.906 35.1443 592.229 35.3166 591.475 35.3166 cv
590.512 35.3166 589.717 35.0418 589.089 34.4922 cv
588.462 33.9425 588.148 33.1636 588.148 32.1554 cv
588.148 30.8479 588.652 29.9015 589.66 29.3161 cv
590.213 28.9974 591.026 28.7697 592.099 28.6331 cv
593.046 28.516 li
cp
605.609 24.5206 mo
606.11 24.8035 606.516 25.1954 606.828 25.6963 cv
606.828 20.6227 li
609.648 20.6227 li
609.648 34.9849 li
606.945 34.9849 li
606.945 33.5116 li
606.549 34.1425 606.097 34.6011 605.589 34.8873 cv
605.082 35.1735 604.451 35.3166 603.696 35.3166 cv
602.454 35.3166 601.408 34.8141 600.56 33.8092 cv
599.711 32.8042 599.286 31.5147 599.286 29.9405 cv
599.286 28.1258 599.704 26.698 600.54 25.6572 cv
601.376 24.6165 602.493 24.0961 603.892 24.0961 cv
604.536 24.0961 605.108 24.2376 605.609 24.5206 cv
cp
606.292 32.0968 mo
606.702 31.5114 606.906 30.7536 606.906 29.8235 cv
606.906 28.5225 606.578 27.5924 605.921 27.033 cv
605.518 26.6947 605.049 26.5256 604.516 26.5256 cv
603.703 26.5256 603.106 26.833 602.726 27.4476 cv
602.345 28.0623 602.155 28.825 602.155 29.7357 cv
602.155 30.7179 602.348 31.5033 602.735 32.092 cv
603.122 32.6806 603.709 32.975 604.497 32.975 cv
605.284 32.975 605.882 32.6823 606.292 32.0968 cv
cp
618.513 28.1648 mo
618.461 27.768 618.328 27.4102 618.113 27.0915 cv
617.801 26.6622 617.316 26.4476 616.659 26.4476 cv
615.723 26.4476 615.082 26.9126 614.737 27.8428 cv
614.555 28.3372 614.464 28.9941 614.464 29.8137 cv
614.464 30.5943 614.555 31.222 614.737 31.6968 cv
615.069 32.5814 615.694 33.0237 616.611 33.0237 cv
617.261 33.0237 617.723 32.8481 617.996 32.4969 cv
618.269 32.1456 618.435 31.6903 618.494 31.1309 cv
621.333 31.1309 li
621.268 31.9765 620.962 32.7766 620.416 33.5311 cv
619.544 34.7475 618.253 35.3557 616.542 35.3557 cv
614.832 35.3557 613.573 34.8483 612.766 33.8336 cv
611.96 32.8188 611.557 31.5017 611.557 29.882 cv
611.557 28.0542 612.002 26.6329 612.893 25.6182 cv
613.784 24.6035 615.014 24.0961 616.581 24.0961 cv
617.915 24.0961 619.006 24.3954 619.855 24.9938 cv
620.704 25.5922 621.206 26.6492 621.362 28.1648 cv
618.513 28.1648 li
cp
629.125 29.8137 mo
628.949 29.9243 628.772 30.0137 628.593 30.082 cv
628.414 30.1503 628.169 30.2137 627.857 30.2723 cv
627.232 30.3894 li
626.647 30.4934 626.227 30.6203 625.974 30.7699 cv
625.544 31.0236 625.33 31.4171 625.33 31.9505 cv
625.33 32.4253 625.461 32.7684 625.725 32.9798 cv
625.988 33.1912 626.308 33.2969 626.686 33.2969 cv
627.284 33.2969 627.835 33.1213 628.34 32.7701 cv
628.844 32.4188 629.105 31.7781 629.125 30.8479 cv
629.125 29.8137 li
cp
627.437 28.516 mo
627.951 28.451 628.318 28.3697 628.54 28.2721 cv
628.936 28.103 629.135 27.8396 629.135 27.4818 cv
629.135 27.046 628.984 26.7451 628.681 26.5793 cv
628.379 26.4134 627.935 26.3305 627.349 26.3305 cv
626.692 26.3305 626.227 26.4931 625.954 26.8183 cv
625.759 27.059 625.629 27.3842 625.564 27.794 cv
622.881 27.794 li
622.939 26.8639 623.199 26.0996 623.661 25.5011 cv
624.396 24.5645 625.658 24.0961 627.447 24.0961 cv
628.611 24.0961 629.645 24.3271 630.549 24.7889 cv
631.454 25.2507 631.906 26.1223 631.906 27.4037 cv
631.906 32.2822 li
631.906 32.6205 631.912 33.0302 631.925 33.5116 cv
631.945 33.8759 632 34.123 632.091 34.2531 cv
632.182 34.3832 632.319 34.4905 632.501 34.5751 cv
632.501 34.9849 li
629.476 34.9849 li
629.392 34.7702 629.333 34.5686 629.301 34.38 cv
629.268 34.1913 629.242 33.9767 629.223 33.736 cv
628.839 34.1523 628.396 34.5068 627.896 34.7995 cv
627.297 35.1443 626.621 35.3166 625.866 35.3166 cv
624.904 35.3166 624.108 35.0418 623.481 34.4922 cv
622.853 33.9425 622.539 33.1636 622.539 32.1554 cv
622.539 30.8479 623.043 29.9015 624.051 29.3161 cv
624.604 28.9974 625.417 28.7697 626.491 28.6331 cv
627.437 28.516 li
cp
636.527 31.5895 mo
636.585 32.0838 636.712 32.4351 636.907 32.6432 cv
637.252 33.014 637.889 33.1994 638.819 33.1994 cv
639.366 33.1994 639.8 33.1181 640.122 32.9554 cv
640.444 32.7928 640.605 32.5489 640.605 32.2237 cv
640.605 31.9115 640.475 31.674 640.215 31.5114 cv
639.955 31.3488 638.989 31.0691 637.317 30.6723 cv
636.114 30.3731 635.265 29.9991 634.77 29.5503 cv
634.276 29.108 634.029 28.4705 634.029 27.6379 cv
634.029 26.6557 634.414 25.8117 635.185 25.106 cv
635.956 24.4002 637.04 24.0474 638.439 24.0474 cv
639.766 24.0474 640.847 24.3124 641.683 24.8425 cv
642.519 25.3727 642.999 26.2882 643.122 27.5891 cv
640.342 27.5891 li
640.303 27.2314 640.202 26.9484 640.039 26.7403 cv
639.733 26.363 639.213 26.1744 638.478 26.1744 cv
637.873 26.1744 637.442 26.2687 637.185 26.4573 cv
636.928 26.646 636.8 26.8671 636.8 27.1208 cv
636.8 27.4395 636.936 27.6704 637.21 27.8135 cv
637.483 27.9631 638.449 28.2201 640.107 28.5843 cv
641.213 28.8445 642.043 29.238 642.595 29.7649 cv
643.142 30.2983 643.415 30.965 643.415 31.7651 cv
643.415 32.8188 643.023 33.6791 642.239 34.3458 cv
641.456 35.0125 640.244 35.3459 638.605 35.3459 cv
636.933 35.3459 635.699 34.993 634.902 34.2873 cv
634.105 33.5815 633.707 32.6823 633.707 31.5895 cv
636.527 31.5895 li
cp
644.367 26.428 mo
644.367 24.4474 li
645.85 24.4474 li
645.85 21.4813 li
648.602 21.4813 li
648.602 24.4474 li
650.329 24.4474 li
650.329 26.428 li
648.602 26.428 li
648.602 32.048 li
648.602 32.4839 648.657 32.7554 648.768 32.8628 cv
648.878 32.9701 649.216 33.0237 649.782 33.0237 cv
649.867 33.0237 649.956 33.0221 650.051 33.0189 cv
650.145 33.0156 650.238 33.0107 650.329 33.0042 cv
650.329 35.0825 li
649.012 35.1312 li
647.698 35.1768 646.8 34.9491 646.319 34.4483 cv
646.006 34.1295 645.85 33.6384 645.85 32.975 cv
645.85 26.428 li
644.367 26.428 li
cp
0 0 0 1 cmyk
f
524.15 44.5818 mo
527.302 44.5818 li
533.029 54.6217 li
533.029 44.5818 li
535.829 44.5818 li
535.829 58.9636 li
532.824 58.9636 li
526.95 48.748 li
526.95 58.9636 li
524.15 58.9636 li
524.15 44.5818 li
cp
541.097 50.9433 mo
540.742 51.3466 540.52 51.893 540.429 52.5825 cv
544.751 52.5825 li
544.705 51.8475 544.483 51.2897 544.082 50.9092 cv
543.682 50.5287 543.186 50.3384 542.595 50.3384 cv
541.951 50.3384 541.451 50.5401 541.097 50.9433 cv
cp
544.985 48.5431 mo
545.694 48.8749 546.279 49.3985 546.741 50.114 cv
547.158 50.745 547.427 51.4767 547.551 52.3093 cv
547.623 52.7972 547.652 53.4997 547.639 54.4168 cv
540.36 54.4168 li
540.399 55.4836 540.734 56.2316 541.365 56.6609 cv
541.749 56.9276 542.211 57.061 542.751 57.061 cv
543.323 57.061 543.788 56.8983 544.146 56.5731 cv
544.341 56.3975 544.513 56.1536 544.663 55.8413 cv
547.502 55.8413 li
547.431 56.4723 547.102 57.113 546.517 57.7635 cv
545.606 58.7977 544.331 59.3148 542.692 59.3148 cv
541.339 59.3148 540.146 58.879 539.111 58.0074 cv
538.077 57.1358 537.56 55.7177 537.56 53.7533 cv
537.56 51.9125 538.027 50.501 538.96 49.5188 cv
539.893 48.5366 541.105 48.0455 542.595 48.0455 cv
543.479 48.0455 544.276 48.2114 544.985 48.5431 cv
cp
554.514 48.3285 mo
557.333 48.3285 li
558.953 55.9877 li
560.612 48.3285 li
563.51 48.3285 li
560.426 58.9636 li
557.568 58.9636 li
555.899 51.2165 li
554.211 58.9636 li
551.323 58.9636 li
548.337 48.3285 li
551.323 48.3285 li
552.982 55.9584 li
554.514 48.3285 li
cp
f
578.306 47.5577 mo
577.912 47.239 577.361 47.0796 576.652 47.0796 cv
573.852 47.0796 li
573.852 51.3141 li
576.652 51.3141 li
577.361 51.3141 577.912 51.1417 578.306 50.797 cv
578.699 50.4522 578.896 49.9059 578.896 49.1578 cv
578.896 48.4098 578.699 47.8764 578.306 47.5577 cv
cp
580.584 52.7386 mo
579.726 53.4411 578.499 53.7924 576.906 53.7924 cv
573.852 53.7924 li
573.852 58.9636 li
570.866 58.9636 li
570.866 44.5818 li
577.13 44.5818 li
578.574 44.5818 579.726 44.9526 580.584 45.6941 cv
581.443 46.4356 581.872 47.5837 581.872 49.1383 cv
581.872 50.836 581.443 52.0361 580.584 52.7386 cv
cp
589.798 48.0797 mo
589.833 48.0829 589.913 48.0878 590.037 48.0943 cv
590.037 50.9433 li
589.861 50.9238 589.705 50.9108 589.568 50.9043 cv
589.432 50.8978 589.321 50.8946 589.237 50.8946 cv
588.118 50.8946 587.367 51.2588 586.983 51.9873 cv
586.768 52.3971 586.661 53.0281 586.661 53.8802 cv
586.661 58.9636 li
583.861 58.9636 li
583.861 48.3285 li
586.514 48.3285 li
586.514 50.1823 li
586.944 49.4733 587.318 48.9887 587.637 48.7285 cv
588.157 48.2927 588.833 48.0748 589.666 48.0748 cv
589.718 48.0748 589.762 48.0764 589.798 48.0797 cv
cp
598.309 56.134 mo
598.744 55.5551 598.962 54.7323 598.962 53.6655 cv
598.962 52.5988 598.744 51.7776 598.309 51.2019 cv
597.873 50.6262 597.248 50.3384 596.435 50.3384 cv
595.622 50.3384 594.996 50.6262 594.557 51.2019 cv
594.118 51.7776 593.898 52.5988 593.898 53.6655 cv
593.898 54.7323 594.118 55.5551 594.557 56.134 cv
594.996 56.713 595.622 57.0024 596.435 57.0024 cv
597.248 57.0024 597.873 56.713 598.309 56.134 cv
cp
600.533 57.6708 mo
599.636 58.7798 598.273 59.3343 596.445 59.3343 cv
594.617 59.3343 593.255 58.7798 592.357 57.6708 cv
591.459 56.5617 591.01 55.2266 591.01 53.6655 cv
591.01 52.1304 591.459 50.8002 592.357 49.6749 cv
593.255 48.5496 594.617 47.987 596.445 47.987 cv
598.273 47.987 599.636 48.5496 600.533 49.6749 cv
601.431 50.8002 601.88 52.1304 601.88 53.6655 cv
601.88 55.2266 601.431 56.5617 600.533 57.6708 cv
cp
609.72 53.7924 mo
609.545 53.903 609.367 53.9924 609.189 54.0607 cv
609.01 54.129 608.764 54.1924 608.452 54.2509 cv
607.828 54.368 li
607.242 54.4721 606.823 54.5989 606.569 54.7486 cv
606.14 55.0022 605.925 55.3958 605.925 55.9291 cv
605.925 56.404 606.057 56.7471 606.32 56.9585 cv
606.583 57.1699 606.904 57.2756 607.281 57.2756 cv
607.88 57.2756 608.431 57.1 608.935 56.7487 cv
609.439 56.3975 609.701 55.7568 609.72 54.8266 cv
609.72 53.7924 li
cp
608.032 52.4947 mo
608.546 52.4297 608.914 52.3483 609.135 52.2508 cv
609.532 52.0817 609.73 51.8182 609.73 51.4605 cv
609.73 51.0247 609.579 50.7238 609.276 50.5579 cv
608.974 50.3921 608.53 50.3091 607.945 50.3091 cv
607.288 50.3091 606.823 50.4718 606.549 50.797 cv
606.354 51.0377 606.224 51.3629 606.159 51.7727 cv
603.476 51.7727 li
603.534 50.8425 603.795 50.0782 604.256 49.4798 cv
604.992 48.5431 606.253 48.0748 608.042 48.0748 cv
609.206 48.0748 610.241 48.3057 611.145 48.7675 cv
612.049 49.2294 612.501 50.101 612.501 51.3824 cv
612.501 56.2609 li
612.501 56.5991 612.508 57.0089 612.521 57.4903 cv
612.54 57.8545 612.595 58.1017 612.686 58.2318 cv
612.778 58.3619 612.914 58.4692 613.096 58.5538 cv
613.096 58.9636 li
610.072 58.9636 li
609.987 58.7489 609.929 58.5473 609.896 58.3586 cv
609.863 58.17 609.837 57.9553 609.818 57.7147 cv
609.434 58.131 608.992 58.4855 608.491 58.7782 cv
607.893 59.1229 607.216 59.2953 606.462 59.2953 cv
605.499 59.2953 604.704 59.0205 604.076 58.4708 cv
603.448 57.9212 603.134 57.1423 603.134 56.134 cv
603.134 54.8266 603.639 53.8802 604.647 53.2948 cv
605.2 52.976 606.013 52.7484 607.086 52.6118 cv
608.032 52.4947 li
cp
621.308 52.1435 mo
621.256 51.7467 621.122 51.3889 620.908 51.0702 cv
620.595 50.6409 620.111 50.4262 619.454 50.4262 cv
618.517 50.4262 617.877 50.8913 617.532 51.8215 cv
617.35 52.3158 617.259 52.9728 617.259 53.7924 cv
617.259 54.5729 617.35 55.2006 617.532 55.6755 cv
617.864 56.5601 618.488 57.0024 619.405 57.0024 cv
620.056 57.0024 620.517 56.8268 620.791 56.4755 cv
621.064 56.1243 621.23 55.669 621.288 55.1096 cv
624.128 55.1096 li
624.062 55.9552 623.757 56.7552 623.21 57.5098 cv
622.339 58.7261 621.048 59.3343 619.337 59.3343 cv
617.626 59.3343 616.367 58.827 615.561 57.8122 cv
614.754 56.7975 614.351 55.4803 614.351 53.8607 cv
614.351 52.0329 614.797 50.6116 615.688 49.5969 cv
616.579 48.5822 617.808 48.0748 619.376 48.0748 cv
620.709 48.0748 621.8 48.374 622.649 48.9724 cv
623.498 49.5709 624.001 50.6279 624.157 52.1435 cv
621.308 52.1435 li
cp
624.963 50.4067 mo
624.963 48.4261 li
626.446 48.4261 li
626.446 45.4599 li
629.197 45.4599 li
629.197 48.4261 li
630.924 48.4261 li
630.924 50.4067 li
629.197 50.4067 li
629.197 56.0267 li
629.197 56.4625 629.253 56.7341 629.363 56.8414 cv
629.474 56.9487 629.812 57.0024 630.378 57.0024 cv
630.462 57.0024 630.552 57.0008 630.646 56.9975 cv
630.74 56.9943 630.833 56.9894 630.924 56.9829 cv
630.924 59.0611 li
629.607 59.1099 li
628.293 59.1554 627.395 58.9278 626.914 58.4269 cv
626.602 58.1082 626.446 57.6171 626.446 56.9536 cv
626.446 50.4067 li
624.963 50.4067 li
cp
635.565 47.0601 mo
632.745 47.0601 li
632.745 44.494 li
635.565 44.494 li
635.565 47.0601 li
cp
632.745 48.3285 mo
635.565 48.3285 li
635.565 58.9636 li
632.745 58.9636 li
632.745 48.3285 li
cp
644.804 48.3285 mo
647.79 48.3285 li
643.956 58.9636 li
641.019 58.9636 li
637.204 48.3285 li
640.326 48.3285 li
642.541 56.1731 li
644.804 48.3285 li
cp
652.045 50.9433 mo
651.691 51.3466 651.468 51.893 651.377 52.5825 cv
655.699 52.5825 li
655.653 51.8475 655.431 51.2897 655.031 50.9092 cv
654.631 50.5287 654.135 50.3384 653.543 50.3384 cv
652.899 50.3384 652.4 50.5401 652.045 50.9433 cv
cp
655.933 48.5431 mo
656.642 48.8749 657.228 49.3985 657.689 50.114 cv
658.106 50.745 658.376 51.4767 658.499 52.3093 cv
658.571 52.7972 658.6 53.4997 658.587 54.4168 cv
651.308 54.4168 li
651.347 55.4836 651.682 56.2316 652.313 56.6609 cv
652.697 56.9276 653.159 57.061 653.699 57.061 cv
654.271 57.061 654.736 56.8983 655.094 56.5731 cv
655.289 56.3975 655.462 56.1536 655.611 55.8413 cv
658.45 55.8413 li
658.379 56.4723 658.05 57.113 657.465 57.7635 cv
656.554 58.7977 655.279 59.3148 653.64 59.3148 cv
652.287 59.3148 651.094 58.879 650.06 58.0074 cv
649.025 57.1358 648.508 55.7177 648.508 53.7533 cv
648.508 51.9125 648.975 50.501 649.908 49.5188 cv
650.842 48.5366 652.053 48.0455 653.543 48.0455 cv
654.427 48.0455 655.224 48.2114 655.933 48.5431 cv
cp
f
525.844 78.5028 mo
525.935 79.1598 526.114 79.6509 526.38 79.9761 cv
526.868 80.568 527.704 80.864 528.888 80.864 cv
529.597 80.864 530.173 80.7859 530.615 80.6298 cv
531.454 80.3306 531.874 79.7745 531.874 78.9614 cv
531.874 78.4865 531.665 78.119 531.249 77.8589 cv
530.833 77.6052 530.179 77.3808 529.288 77.1856 cv
527.766 76.8441 li
526.27 76.5059 525.236 76.1384 524.663 75.7416 cv
523.694 75.0781 523.209 74.0406 523.209 72.6291 cv
523.209 71.3412 523.678 70.2712 524.614 69.4191 cv
525.551 68.567 526.927 68.1409 528.742 68.1409 cv
530.257 68.1409 531.55 68.5426 532.62 69.3459 cv
533.69 70.1492 534.251 71.3152 534.303 72.8438 cv
531.415 72.8438 li
531.363 71.9787 530.986 71.364 530.283 70.9997 cv
529.815 70.759 529.233 70.6387 528.537 70.6387 cv
527.763 70.6387 527.145 70.7948 526.683 71.107 cv
526.221 71.4193 525.99 71.8551 525.99 72.4145 cv
525.99 72.9283 526.218 73.3121 526.673 73.5658 cv
526.966 73.7349 527.59 73.9333 528.547 74.161 cv
531.025 74.7561 li
532.111 75.0163 532.931 75.3643 533.484 75.8001 cv
534.342 76.4766 534.771 77.4556 534.771 78.737 cv
534.771 80.0509 534.269 81.1421 533.264 82.0104 cv
532.259 82.8788 530.839 83.313 529.005 83.313 cv
527.132 83.313 525.658 82.8853 524.585 82.0299 cv
523.512 81.1746 522.975 79.9989 522.975 78.5028 cv
525.844 78.5028 li
cp
543.112 76.1221 mo
543.06 75.7253 542.926 75.3676 542.712 75.0489 cv
542.399 74.6196 541.915 74.4049 541.258 74.4049 cv
540.321 74.4049 539.68 74.87 539.336 75.8001 cv
539.154 76.2945 539.063 76.9515 539.063 77.771 cv
539.063 78.5516 539.154 79.1793 539.336 79.6541 cv
539.667 80.5388 540.292 80.9811 541.209 80.9811 cv
541.859 80.9811 542.321 80.8055 542.595 80.4542 cv
542.868 80.103 543.034 79.6476 543.092 79.0882 cv
545.931 79.0882 li
545.866 79.9338 545.561 80.7339 545.014 81.4884 cv
544.143 82.7048 542.852 83.313 541.141 83.313 cv
539.43 83.313 538.171 82.8056 537.365 81.7909 cv
536.558 80.7762 536.155 79.459 536.155 77.8393 cv
536.155 76.0115 536.601 74.5903 537.492 73.5756 cv
538.383 72.5608 539.612 72.0535 541.18 72.0535 cv
542.513 72.0535 543.604 72.3527 544.453 72.9511 cv
545.302 73.5495 545.805 74.6065 545.961 76.1221 cv
543.112 76.1221 li
cp
553.723 77.771 mo
553.548 77.8816 553.37 77.9711 553.192 78.0394 cv
553.013 78.1077 552.767 78.1711 552.455 78.2296 cv
551.83 78.3467 li
551.245 78.4508 550.826 78.5776 550.572 78.7272 cv
550.143 78.9809 549.928 79.3744 549.928 79.9078 cv
549.928 80.3827 550.06 80.7258 550.323 80.9372 cv
550.586 81.1486 550.907 81.2543 551.284 81.2543 cv
551.883 81.2543 552.434 81.0786 552.938 80.7274 cv
553.442 80.3761 553.704 79.7354 553.723 78.8053 cv
553.723 77.771 li
cp
552.035 76.4734 mo
552.549 76.4083 552.917 76.327 553.138 76.2294 cv
553.535 76.0603 553.733 75.7969 553.733 75.4391 cv
553.733 75.0033 553.582 74.7025 553.279 74.5366 cv
552.977 74.3708 552.533 74.2878 551.948 74.2878 cv
551.291 74.2878 550.826 74.4504 550.552 74.7757 cv
550.357 75.0163 550.227 75.3416 550.162 75.7514 cv
547.479 75.7514 li
547.537 74.8212 547.798 74.0569 548.259 73.4585 cv
548.994 72.5218 550.256 72.0535 552.045 72.0535 cv
553.209 72.0535 554.244 72.2844 555.148 72.7462 cv
556.052 73.208 556.504 74.0797 556.504 75.3611 cv
556.504 80.2395 li
556.504 80.5778 556.511 80.9876 556.524 81.4689 cv
556.543 81.8332 556.598 82.0804 556.689 82.2104 cv
556.781 82.3405 556.917 82.4479 557.099 82.5324 cv
557.099 82.9422 li
554.075 82.9422 li
553.99 82.7276 553.931 82.5259 553.899 82.3373 cv
553.866 82.1487 553.84 81.934 553.821 81.6933 cv
553.437 82.1096 552.995 82.4641 552.494 82.7568 cv
551.896 83.1016 551.219 83.274 550.464 83.274 cv
549.502 83.274 548.707 82.9991 548.079 82.4495 cv
547.451 81.8999 547.137 81.1209 547.137 80.1127 cv
547.137 78.8053 547.641 77.8589 548.65 77.2734 cv
549.203 76.9547 550.016 76.7271 551.089 76.5905 cv
552.035 76.4734 li
cp
561.798 82.9422 mo
559.017 82.9422 li
559.017 68.5605 li
561.798 68.5605 li
561.798 82.9422 li
cp
567.36 71.0387 mo
564.54 71.0387 li
564.54 68.4727 li
567.36 68.4727 li
567.36 71.0387 li
cp
564.54 72.3072 mo
567.36 72.3072 li
567.36 82.9422 li
564.54 82.9422 li
564.54 72.3072 li
cp
578.634 72.917 mo
579.333 73.4926 579.683 74.4472 579.683 75.7806 cv
579.683 82.9422 li
576.834 82.9422 li
576.834 76.4734 li
576.834 75.914 576.759 75.4847 576.609 75.1855 cv
576.336 74.6391 575.816 74.3659 575.048 74.3659 cv
574.105 74.3659 573.458 74.7659 573.106 75.566 cv
572.924 75.9888 572.833 76.5287 572.833 77.1856 cv
572.833 82.9422 li
570.062 82.9422 li
570.062 72.3267 li
572.745 72.3267 li
572.745 73.878 li
573.103 73.3316 573.441 72.9381 573.76 72.6974 cv
574.333 72.2681 575.058 72.0535 575.936 72.0535 cv
577.035 72.0535 577.935 72.3413 578.634 72.917 cv
cp
588.45 79.9224 mo
588.899 79.4314 589.123 78.6492 589.123 77.5759 cv
589.123 76.5677 588.91 75.8001 588.484 75.2733 cv
588.058 74.7464 587.488 74.4829 586.772 74.4829 cv
585.796 74.4829 585.123 74.9415 584.752 75.8587 cv
584.557 76.3465 584.46 76.9482 584.46 77.6637 cv
584.46 78.2817 584.564 78.8313 584.772 79.3126 cv
585.149 80.2103 585.826 80.6591 586.801 80.6591 cv
587.452 80.6591 588.001 80.4136 588.45 79.9224 cv
cp
587.504 72.2974 mo
588.18 72.5771 588.727 73.091 589.143 73.839 cv
589.143 72.3072 li
591.846 72.3072 li
591.846 82.3958 li
591.846 83.7683 591.615 84.8025 591.153 85.4985 cv
590.359 86.6954 588.837 87.2938 586.587 87.2938 cv
585.227 87.2938 584.118 87.0271 583.26 86.4938 cv
582.401 85.9604 581.926 85.1636 581.835 84.1033 cv
584.86 84.1033 li
584.938 84.4285 585.065 84.6627 585.24 84.8058 cv
585.539 85.0595 586.044 85.1863 586.753 85.1863 cv
587.754 85.1863 588.424 84.8513 588.762 84.1814 cv
588.984 83.7521 589.094 83.03 589.094 82.0153 cv
589.094 81.3323 li
588.828 81.7877 588.541 82.1291 588.236 82.3568 cv
587.683 82.7796 586.964 82.991 586.079 82.991 cv
584.713 82.991 583.622 82.5113 582.806 81.5519 cv
581.99 80.5924 581.581 79.2931 581.581 77.654 cv
581.581 76.0733 581.975 74.7448 582.762 73.6682 cv
583.549 72.5917 584.665 72.0535 586.109 72.0535 cv
586.642 72.0535 587.107 72.1348 587.504 72.2974 cv
cp
603.199 71.0583 mo
603.199 74.922 li
606.604 74.922 li
607.281 74.922 607.788 74.844 608.126 74.6879 cv
608.724 74.4146 609.024 73.8748 609.024 73.0682 cv
609.024 72.1966 608.734 71.6112 608.155 71.3119 cv
607.83 71.1428 607.342 71.0583 606.692 71.0583 cv
603.199 71.0583 li
cp
609.643 68.9313 mo
610.186 69.1589 610.647 69.4939 611.024 69.9362 cv
611.336 70.3005 611.583 70.7038 611.765 71.1461 cv
611.948 71.5884 612.039 72.0925 612.039 72.6584 cv
612.039 73.3414 611.866 74.013 611.521 74.6732 cv
611.177 75.3334 610.608 75.8001 609.814 76.0733 cv
610.478 76.34 610.947 76.7189 611.224 77.21 cv
611.5 77.7011 611.639 78.4508 611.639 79.459 cv
611.639 80.4249 li
611.639 81.0819 611.665 81.5275 611.717 81.7616 cv
611.795 82.1324 611.977 82.4056 612.263 82.5812 cv
612.263 82.9422 li
608.955 82.9422 li
608.864 82.6235 608.799 82.3666 608.76 82.1714 cv
608.682 81.7681 608.64 81.3551 608.633 80.9323 cv
608.614 79.5956 li
608.601 78.6784 608.433 78.067 608.111 77.7613 cv
607.789 77.4556 607.186 77.3027 606.302 77.3027 cv
603.199 77.3027 li
603.199 82.9422 li
600.262 82.9422 li
600.262 68.5605 li
607.316 68.5605 li
608.324 68.58 609.1 68.7036 609.643 68.9313 cv
cp
617.092 74.922 mo
616.737 75.3253 616.514 75.8717 616.423 76.5612 cv
620.746 76.5612 li
620.7 75.8262 620.477 75.2684 620.077 74.8879 cv
619.677 74.5073 619.181 74.3171 618.589 74.3171 cv
617.945 74.3171 617.446 74.5187 617.092 74.922 cv
cp
620.98 72.5218 mo
621.689 72.8535 622.274 73.3772 622.736 74.0927 cv
623.152 74.7236 623.422 75.4554 623.546 76.288 cv
623.617 76.7758 623.647 77.4783 623.634 78.3955 cv
616.355 78.3955 li
616.394 79.4622 616.729 80.2103 617.36 80.6396 cv
617.744 80.9063 618.206 81.0396 618.746 81.0396 cv
619.318 81.0396 619.783 80.877 620.141 80.5518 cv
620.336 80.3761 620.508 80.1322 620.658 79.82 cv
623.497 79.82 li
623.426 80.451 623.097 81.0917 622.512 81.7421 cv
621.601 82.7764 620.326 83.2935 618.687 83.2935 cv
617.334 83.2935 616.14 82.8577 615.106 81.986 cv
614.072 81.1144 613.555 79.6964 613.555 77.732 cv
613.555 75.8912 614.022 74.4797 614.955 73.4975 cv
615.888 72.5153 617.1 72.0242 618.589 72.0242 cv
619.474 72.0242 620.271 72.1901 620.98 72.5218 cv
cp
627.659 79.5468 mo
627.718 80.0412 627.845 80.3924 628.04 80.6006 cv
628.385 80.9713 629.022 81.1567 629.952 81.1567 cv
630.499 81.1567 630.933 81.0754 631.255 80.9128 cv
631.577 80.7502 631.738 80.5062 631.738 80.181 cv
631.738 79.8688 631.608 79.6314 631.348 79.4688 cv
631.087 79.3061 630.122 79.0264 628.45 78.6297 cv
627.246 78.3304 626.398 77.9564 625.903 77.5076 cv
625.409 77.0653 625.162 76.4278 625.162 75.5952 cv
625.162 74.613 625.547 73.7691 626.318 73.0633 cv
627.089 72.3576 628.173 72.0047 629.572 72.0047 cv
630.899 72.0047 631.98 72.2698 632.816 72.7999 cv
633.652 73.33 634.132 74.2455 634.255 75.5465 cv
631.474 75.5465 li
631.435 75.1887 631.335 74.9058 631.172 74.6976 cv
630.866 74.3203 630.346 74.1317 629.611 74.1317 cv
629.006 74.1317 628.575 74.226 628.318 74.4146 cv
628.061 74.6033 627.933 74.8244 627.933 75.0781 cv
627.933 75.3969 628.069 75.6278 628.342 75.7709 cv
628.616 75.9205 629.582 76.1774 631.24 76.5417 cv
632.346 76.8018 633.175 77.1954 633.728 77.7223 cv
634.275 78.2556 634.548 78.9224 634.548 79.7224 cv
634.548 80.7762 634.156 81.6364 633.372 82.3031 cv
632.588 82.9699 631.377 83.3032 629.738 83.3032 cv
628.066 83.3032 626.832 82.9504 626.035 82.2446 cv
625.238 81.5388 624.84 80.6396 624.84 79.5468 cv
627.659 79.5468 li
cp
639.364 72.3072 mo
639.364 78.7175 li
639.364 79.3224 639.435 79.7777 639.579 80.0834 cv
639.832 80.6233 640.33 80.8933 641.071 80.8933 cv
642.021 80.8933 642.672 80.5095 643.023 79.7419 cv
643.205 79.3256 643.296 78.776 643.296 78.093 cv
643.296 72.3072 li
646.116 72.3072 li
646.116 82.9422 li
643.413 82.9422 li
643.413 81.4397 li
643.387 81.4722 643.322 81.5697 643.218 81.7324 cv
643.114 81.895 642.99 82.0381 642.847 82.1617 cv
642.411 82.5519 641.99 82.8186 641.584 82.9617 cv
641.177 83.1048 640.701 83.1764 640.154 83.1764 cv
638.58 83.1764 637.52 82.6105 636.973 81.4787 cv
636.668 80.8542 636.515 79.9338 636.515 78.7175 cv
636.515 72.3072 li
639.364 72.3072 li
cp
651.625 82.9422 mo
648.844 82.9422 li
648.844 68.5605 li
651.625 68.5605 li
651.625 82.9422 li
cp
653.234 74.3854 mo
653.234 72.4047 li
654.717 72.4047 li
654.717 69.4386 li
657.469 69.4386 li
657.469 72.4047 li
659.196 72.4047 li
659.196 74.3854 li
657.469 74.3854 li
657.469 80.0054 li
657.469 80.4412 657.524 80.7128 657.635 80.8201 cv
657.745 80.9274 658.084 80.9811 658.649 80.9811 cv
658.734 80.9811 658.823 80.9795 658.918 80.9762 cv
659.012 80.9729 659.105 80.9681 659.196 80.9616 cv
659.196 83.0398 li
657.879 83.0886 li
656.565 83.1341 655.667 82.9064 655.186 82.4056 cv
654.874 82.0869 654.717 81.5958 654.717 80.9323 cv
654.717 74.3854 li
653.234 74.3854 li
cp
f
grestore
grestore
grestore
[14.9867 14.9867 ] 0 dsh
655.22 373.63 mo
654.94 273.3 li
654.927 266.64 654.927 259.98 654.94 253.32 cv
655.19 117.82 li
.609766 .380713 .064271 0 cmyk
@
655.21 109.58 mo
649.69 120.56 li
655.19 117.82 li
660.68 120.58 li
655.21 109.58 li
cp
f
[] 0 dsh
655.21 109.58 mo
649.69 120.56 li
655.19 117.82 li
660.68 120.58 li
655.21 109.58 li
cp
@
[14.9867 14.9867 ] 0 dsh
641.34 233.99 mo
641.34 117.82 li
@
641.34 109.57 mo
635.84 120.56 li
641.34 117.82 li
646.83 120.56 li
641.34 109.57 li
cp
f
[] 0 dsh
641.34 109.57 mo
635.84 120.56 li
641.34 117.82 li
646.83 120.56 li
641.34 109.57 li
cp
@
gsave
0 0 mo
981 0 li
981 415 li
0 415 li
0 0 li
cp
eclp
gsave
0 0 mo
981 0 li
981 414 li
0 414 li
0 0 li
cp
eclp
gsave
665 158 mo
776.9 158 li
776.9 229.936 li
665 229.936 li
665 158 li
cp
eclp
681.773 163.579 mo
681.38 163.26 680.828 163.101 680.119 163.101 cv
677.319 163.101 li
677.319 167.335 li
680.119 167.335 li
680.828 167.335 681.38 167.163 681.773 166.818 cv
682.167 166.474 682.363 165.927 682.363 165.179 cv
682.363 164.431 682.167 163.898 681.773 163.579 cv
cp
684.051 168.76 mo
683.193 169.462 681.967 169.814 680.373 169.814 cv
677.319 169.814 li
677.319 174.985 li
674.333 174.985 li
674.333 160.603 li
680.597 160.603 li
682.042 160.603 683.193 160.974 684.051 161.715 cv
684.91 162.457 685.339 163.605 685.339 165.16 cv
685.339 166.857 684.91 168.057 684.051 168.76 cv
cp
693.265 164.101 mo
693.301 164.104 693.38 164.109 693.504 164.116 cv
693.504 166.965 li
693.328 166.945 693.172 166.932 693.036 166.926 cv
692.899 166.919 692.788 166.916 692.704 166.916 cv
691.585 166.916 690.834 167.28 690.45 168.009 cv
690.235 168.418 690.128 169.049 690.128 169.902 cv
690.128 174.985 li
687.328 174.985 li
687.328 164.35 li
689.982 164.35 li
689.982 166.204 li
690.411 165.495 690.785 165.01 691.104 164.75 cv
691.624 164.314 692.301 164.096 693.133 164.096 cv
693.185 164.096 693.229 164.098 693.265 164.101 cv
cp
701.776 172.155 mo
702.212 171.576 702.43 170.754 702.43 169.687 cv
702.43 168.62 702.212 167.799 701.776 167.223 cv
701.34 166.648 700.716 166.36 699.903 166.36 cv
699.089 166.36 698.463 166.648 698.024 167.223 cv
697.585 167.799 697.366 168.62 697.366 169.687 cv
697.366 170.754 697.585 171.576 698.024 172.155 cv
698.463 172.734 699.089 173.024 699.903 173.024 cv
700.716 173.024 701.34 172.734 701.776 172.155 cv
cp
704 173.692 mo
703.103 174.801 701.74 175.356 699.912 175.356 cv
698.084 175.356 696.722 174.801 695.824 173.692 cv
694.927 172.583 694.478 171.248 694.478 169.687 cv
694.478 168.152 694.927 166.822 695.824 165.696 cv
696.722 164.571 698.084 164.008 699.912 164.008 cv
701.74 164.008 703.103 164.571 704 165.696 cv
704.898 166.822 705.347 168.152 705.347 169.687 cv
705.347 171.248 704.898 172.583 704 173.692 cv
cp
713.188 169.814 mo
713.012 169.924 712.835 170.014 712.656 170.082 cv
712.477 170.15 712.231 170.214 711.919 170.272 cv
711.295 170.389 li
710.709 170.493 710.29 170.62 710.036 170.77 cv
709.607 171.024 709.392 171.417 709.392 171.95 cv
709.392 172.425 709.524 172.768 709.787 172.98 cv
710.051 173.191 710.371 173.297 710.748 173.297 cv
711.347 173.297 711.898 173.121 712.402 172.77 cv
712.906 172.419 713.168 171.778 713.188 170.848 cv
713.188 169.814 li
cp
711.5 168.516 mo
712.013 168.451 712.381 168.37 712.602 168.272 cv
712.999 168.103 713.197 167.84 713.197 167.482 cv
713.197 167.046 713.046 166.745 712.744 166.579 cv
712.441 166.413 711.997 166.33 711.412 166.33 cv
710.755 166.33 710.29 166.493 710.017 166.818 cv
709.821 167.059 709.691 167.384 709.626 167.794 cv
706.943 167.794 li
707.002 166.864 707.262 166.1 707.724 165.501 cv
708.459 164.564 709.721 164.096 711.509 164.096 cv
712.674 164.096 713.708 164.327 714.612 164.789 cv
715.516 165.251 715.968 166.122 715.968 167.404 cv
715.968 172.282 li
715.968 172.62 715.975 173.03 715.988 173.512 cv
716.007 173.876 716.063 174.123 716.154 174.253 cv
716.245 174.383 716.381 174.491 716.563 174.575 cv
716.563 174.985 li
713.539 174.985 li
713.454 174.77 713.396 174.569 713.363 174.38 cv
713.331 174.191 713.305 173.977 713.285 173.736 cv
712.901 174.152 712.459 174.507 711.958 174.799 cv
711.36 175.144 710.683 175.317 709.929 175.317 cv
708.966 175.317 708.171 175.042 707.543 174.492 cv
706.916 173.943 706.602 173.164 706.602 172.155 cv
706.602 170.848 707.106 169.902 708.114 169.316 cv
708.667 168.997 709.48 168.77 710.553 168.633 cv
711.5 168.516 li
cp
724.775 168.165 mo
724.723 167.768 724.59 167.41 724.375 167.092 cv
724.063 166.662 723.578 166.448 722.921 166.448 cv
721.984 166.448 721.344 166.913 720.999 167.843 cv
720.817 168.337 720.726 168.994 720.726 169.814 cv
720.726 170.594 720.817 171.222 720.999 171.697 cv
721.331 172.581 721.955 173.024 722.872 173.024 cv
723.523 173.024 723.985 172.848 724.258 172.497 cv
724.531 172.146 724.697 171.69 724.755 171.131 cv
727.595 171.131 li
727.53 171.977 727.224 172.777 726.678 173.531 cv
725.806 174.747 724.515 175.356 722.804 175.356 cv
721.093 175.356 719.835 174.848 719.028 173.834 cv
718.222 172.819 717.818 171.502 717.818 169.882 cv
717.818 168.054 718.264 166.633 719.155 165.618 cv
720.046 164.604 721.275 164.096 722.843 164.096 cv
724.177 164.096 725.268 164.395 726.117 164.994 cv
726.965 165.592 727.468 166.649 727.624 168.165 cv
724.775 168.165 li
cp
728.43 166.428 mo
728.43 164.447 li
729.913 164.447 li
729.913 161.481 li
732.664 161.481 li
732.664 164.447 li
734.391 164.447 li
734.391 166.428 li
732.664 166.428 li
732.664 172.048 li
732.664 172.484 732.72 172.755 732.83 172.863 cv
732.941 172.97 733.279 173.024 733.845 173.024 cv
733.93 173.024 734.019 173.022 734.113 173.019 cv
734.208 173.016 734.3 173.011 734.391 173.004 cv
734.391 175.082 li
733.074 175.131 li
731.76 175.177 730.863 174.949 730.381 174.448 cv
730.069 174.13 729.913 173.638 729.913 172.975 cv
729.913 166.428 li
728.43 166.428 li
cp
739.032 163.081 mo
736.212 163.081 li
736.212 160.515 li
739.032 160.515 li
739.032 163.081 li
cp
736.212 164.35 mo
739.032 164.35 li
739.032 174.985 li
736.212 174.985 li
736.212 164.35 li
cp
748.272 164.35 mo
751.257 164.35 li
747.423 174.985 li
744.486 174.985 li
740.671 164.35 li
743.793 164.35 li
746.008 172.194 li
748.272 164.35 li
cp
755.512 166.965 mo
755.158 167.368 754.935 167.914 754.844 168.604 cv
759.166 168.604 li
759.121 167.869 758.898 167.311 758.498 166.931 cv
758.098 166.55 757.602 166.36 757.01 166.36 cv
756.366 166.36 755.867 166.561 755.512 166.965 cv
cp
759.4 164.564 mo
760.109 164.896 760.695 165.42 761.157 166.135 cv
761.573 166.766 761.843 167.498 761.966 168.331 cv
762.038 168.818 762.067 169.521 762.054 170.438 cv
754.776 170.438 li
754.815 171.505 755.15 172.253 755.781 172.682 cv
756.164 172.949 756.626 173.082 757.166 173.082 cv
757.738 173.082 758.204 172.92 758.561 172.594 cv
758.756 172.419 758.929 172.175 759.078 171.863 cv
761.918 171.863 li
761.846 172.494 761.518 173.134 760.932 173.785 cv
760.022 174.819 758.747 175.336 757.107 175.336 cv
755.755 175.336 754.561 174.9 753.527 174.029 cv
752.492 173.157 751.975 171.739 751.975 169.775 cv
751.975 167.934 752.442 166.522 753.375 165.54 cv
754.309 164.558 755.52 164.067 757.01 164.067 cv
757.895 164.067 758.691 164.233 759.4 164.564 cv
cp
0 0 0 1 cmyk
f
688.649 194.524 mo
688.74 195.181 688.919 195.672 689.185 195.997 cv
689.673 196.589 690.509 196.885 691.693 196.885 cv
692.402 196.885 692.978 196.807 693.42 196.651 cv
694.259 196.352 694.679 195.796 694.679 194.983 cv
694.679 194.508 694.471 194.14 694.054 193.88 cv
693.638 193.627 692.984 193.402 692.093 193.207 cv
690.571 192.865 li
689.075 192.527 688.041 192.16 687.468 191.763 cv
686.499 191.099 686.015 190.062 686.015 188.65 cv
686.015 187.363 686.483 186.293 687.419 185.44 cv
688.356 184.588 689.732 184.162 691.547 184.162 cv
693.062 184.162 694.355 184.564 695.425 185.367 cv
696.495 186.171 697.056 187.337 697.108 188.865 cv
694.22 188.865 li
694.168 188 693.791 187.385 693.088 187.021 cv
692.62 186.78 692.038 186.66 691.342 186.66 cv
690.568 186.66 689.95 186.816 689.488 187.128 cv
689.026 187.441 688.795 187.876 688.795 188.436 cv
688.795 188.95 689.023 189.333 689.478 189.587 cv
689.771 189.756 690.395 189.955 691.352 190.182 cv
693.83 190.777 li
694.916 191.038 695.736 191.386 696.289 191.821 cv
697.147 192.498 697.576 193.477 697.576 194.758 cv
697.576 196.072 697.074 197.163 696.069 198.032 cv
695.064 198.9 693.644 199.334 691.81 199.334 cv
689.937 199.334 688.464 198.907 687.39 198.051 cv
686.317 197.196 685.78 196.02 685.78 194.524 cv
688.649 194.524 li
cp
705.917 192.143 mo
705.865 191.747 705.731 191.389 705.517 191.07 cv
705.204 190.641 704.72 190.426 704.063 190.426 cv
703.126 190.426 702.486 190.891 702.141 191.821 cv
701.959 192.316 701.868 192.973 701.868 193.792 cv
701.868 194.573 701.959 195.201 702.141 195.675 cv
702.473 196.56 703.097 197.002 704.014 197.002 cv
704.665 197.002 705.126 196.827 705.4 196.476 cv
705.673 196.124 705.839 195.669 705.897 195.11 cv
708.736 195.11 li
708.671 195.955 708.366 196.755 707.819 197.51 cv
706.948 198.726 705.657 199.334 703.946 199.334 cv
702.235 199.334 700.976 198.827 700.17 197.812 cv
699.363 196.798 698.96 195.48 698.96 193.861 cv
698.96 192.033 699.406 190.612 700.297 189.597 cv
701.188 188.582 702.417 188.075 703.985 188.075 cv
705.318 188.075 706.409 188.374 707.258 188.972 cv
708.107 189.571 708.61 190.628 708.766 192.143 cv
705.917 192.143 li
cp
716.528 193.792 mo
716.353 193.903 716.175 193.992 715.997 194.061 cv
715.818 194.129 715.572 194.192 715.26 194.251 cv
714.635 194.368 li
714.05 194.472 713.631 194.599 713.377 194.749 cv
712.948 195.002 712.733 195.396 712.733 195.929 cv
712.733 196.404 712.865 196.747 713.128 196.958 cv
713.392 197.17 713.712 197.276 714.089 197.276 cv
714.688 197.276 715.239 197.1 715.743 196.749 cv
716.247 196.397 716.509 195.757 716.528 194.827 cv
716.528 193.792 li
cp
714.84 192.495 mo
715.354 192.43 715.722 192.348 715.943 192.251 cv
716.34 192.082 716.538 191.818 716.538 191.46 cv
716.538 191.025 716.387 190.724 716.084 190.558 cv
715.782 190.392 715.338 190.309 714.753 190.309 cv
714.096 190.309 713.631 190.472 713.357 190.797 cv
713.162 191.038 713.032 191.363 712.967 191.773 cv
710.284 191.773 li
710.342 190.843 710.603 190.078 711.065 189.48 cv
711.799 188.543 713.061 188.075 714.85 188.075 cv
716.015 188.075 717.049 188.306 717.953 188.768 cv
718.857 189.229 719.309 190.101 719.309 191.382 cv
719.309 196.261 li
719.309 196.599 719.316 197.009 719.329 197.49 cv
719.348 197.855 719.403 198.102 719.495 198.232 cv
719.586 198.362 719.722 198.469 719.904 198.554 cv
719.904 198.964 li
716.88 198.964 li
716.795 198.749 716.737 198.547 716.704 198.359 cv
716.671 198.17 716.645 197.955 716.626 197.715 cv
716.242 198.131 715.8 198.485 715.299 198.778 cv
714.701 199.123 714.024 199.295 713.27 199.295 cv
712.307 199.295 711.512 199.02 710.884 198.471 cv
710.256 197.921 709.942 197.142 709.942 196.134 cv
709.942 194.827 710.447 193.88 711.455 193.295 cv
712.008 192.976 712.821 192.748 713.894 192.612 cv
714.84 192.495 li
cp
724.603 198.964 mo
721.823 198.964 li
721.823 184.582 li
724.603 184.582 li
724.603 198.964 li
cp
730.165 187.06 mo
727.345 187.06 li
727.345 184.494 li
730.165 184.494 li
730.165 187.06 li
cp
727.345 188.328 mo
730.165 188.328 li
730.165 198.964 li
727.345 198.964 li
727.345 188.328 li
cp
741.439 188.938 mo
742.138 189.514 742.488 190.469 742.488 191.802 cv
742.488 198.964 li
739.639 198.964 li
739.639 192.495 li
739.639 191.935 739.564 191.506 739.414 191.207 cv
739.141 190.66 738.621 190.387 737.853 190.387 cv
736.91 190.387 736.263 190.787 735.911 191.587 cv
735.729 192.01 735.638 192.55 735.638 193.207 cv
735.638 198.964 li
732.867 198.964 li
732.867 188.348 li
735.551 188.348 li
735.551 189.899 li
735.908 189.353 736.247 188.959 736.565 188.719 cv
737.138 188.289 737.863 188.075 738.741 188.075 cv
739.84 188.075 740.74 188.363 741.439 188.938 cv
cp
751.255 195.944 mo
751.704 195.453 751.929 194.671 751.929 193.597 cv
751.929 192.589 751.716 191.821 751.289 191.295 cv
750.863 190.768 750.293 190.504 749.577 190.504 cv
748.601 190.504 747.928 190.963 747.557 191.88 cv
747.362 192.368 747.265 192.97 747.265 193.685 cv
747.265 194.303 747.369 194.853 747.577 195.334 cv
747.954 196.232 748.631 196.68 749.606 196.68 cv
750.257 196.68 750.806 196.435 751.255 195.944 cv
cp
750.309 188.319 mo
750.985 188.598 751.532 189.112 751.948 189.86 cv
751.948 188.328 li
754.651 188.328 li
754.651 198.417 li
754.651 199.79 754.42 200.824 753.958 201.52 cv
753.164 202.717 751.642 203.315 749.392 203.315 cv
748.032 203.315 746.923 203.048 746.065 202.515 cv
745.206 201.982 744.731 201.185 744.64 200.125 cv
747.665 200.125 li
747.743 200.45 747.87 200.684 748.045 200.827 cv
748.344 201.081 748.849 201.208 749.558 201.208 cv
750.559 201.208 751.229 200.873 751.568 200.203 cv
751.789 199.773 751.899 199.051 751.899 198.037 cv
751.899 197.354 li
751.633 197.809 751.346 198.15 751.041 198.378 cv
750.488 198.801 749.769 199.012 748.884 199.012 cv
747.518 199.012 746.427 198.533 745.611 197.573 cv
744.795 196.614 744.386 195.314 744.386 193.675 cv
744.386 192.095 744.78 190.766 745.567 189.69 cv
746.354 188.613 747.47 188.075 748.914 188.075 cv
749.447 188.075 749.912 188.156 750.309 188.319 cv
cp
f
668.916 210.063 mo
670.087 208.879 671.577 208.287 673.385 208.287 cv
675.805 208.287 677.574 209.081 678.693 210.668 cv
679.311 211.559 679.643 212.454 679.688 213.351 cv
676.683 213.351 li
676.488 212.662 676.237 212.141 675.932 211.79 cv
675.385 211.166 674.575 210.853 673.502 210.853 cv
672.409 210.853 671.548 211.294 670.917 212.175 cv
670.286 213.057 669.97 214.304 669.97 215.917 cv
669.97 217.53 670.304 218.739 670.97 219.542 cv
671.637 220.345 672.484 220.747 673.512 220.747 cv
674.566 220.747 675.369 220.402 675.922 219.713 cv
676.228 219.342 676.481 218.786 676.683 218.044 cv
679.659 218.044 li
679.399 219.612 678.734 220.887 677.664 221.869 cv
676.594 222.851 675.223 223.342 673.551 223.342 cv
671.482 223.342 669.856 222.679 668.672 221.352 cv
667.489 220.018 666.897 218.191 666.897 215.868 cv
666.897 213.358 667.57 211.423 668.916 210.063 cv
cp
688.366 220.113 mo
688.802 219.534 689.02 218.711 689.02 217.644 cv
689.02 216.577 688.802 215.756 688.366 215.181 cv
687.93 214.605 687.306 214.317 686.493 214.317 cv
685.68 214.317 685.053 214.605 684.614 215.181 cv
684.175 215.756 683.956 216.577 683.956 217.644 cv
683.956 218.711 684.175 219.534 684.614 220.113 cv
685.053 220.692 685.68 220.981 686.493 220.981 cv
687.306 220.981 687.93 220.692 688.366 220.113 cv
cp
690.591 221.649 mo
689.693 222.758 688.33 223.313 686.502 223.313 cv
684.675 223.313 683.312 222.758 682.414 221.649 cv
681.517 220.54 681.068 219.205 681.068 217.644 cv
681.068 216.109 681.517 214.779 682.414 213.654 cv
683.312 212.528 684.675 211.966 686.502 211.966 cv
688.33 211.966 689.693 212.528 690.591 213.654 cv
691.488 214.779 691.937 216.109 691.937 217.644 cv
691.937 219.205 691.488 220.54 690.591 221.649 cv
cp
707.183 212.346 mo
707.638 212.528 708.052 212.847 708.422 213.302 cv
708.721 213.673 708.923 214.128 709.027 214.668 cv
709.092 215.026 709.125 215.55 709.125 216.239 cv
709.105 222.942 li
706.256 222.942 li
706.256 216.171 li
706.256 215.768 706.191 215.436 706.061 215.176 cv
705.814 214.681 705.359 214.434 704.695 214.434 cv
703.928 214.434 703.397 214.753 703.105 215.39 cv
702.955 215.729 702.88 216.135 702.88 216.61 cv
702.88 222.942 li
700.08 222.942 li
700.08 216.61 li
700.08 215.979 700.015 215.52 699.885 215.234 cv
699.651 214.72 699.192 214.463 698.509 214.463 cv
697.716 214.463 697.182 214.72 696.909 215.234 cv
696.76 215.527 696.685 215.963 696.685 216.542 cv
696.685 222.942 li
693.865 222.942 li
693.865 212.327 li
696.568 212.327 li
696.568 213.878 li
696.912 213.325 697.238 212.932 697.543 212.697 cv
698.083 212.281 698.782 212.073 699.641 212.073 cv
700.454 212.073 701.111 212.252 701.612 212.61 cv
702.015 212.941 702.321 213.367 702.529 213.888 cv
702.893 213.263 703.345 212.805 703.885 212.512 cv
704.458 212.219 705.095 212.073 705.798 212.073 cv
706.266 212.073 706.728 212.164 707.183 212.346 cv
cp
718.446 215.449 mo
718.072 214.818 717.465 214.502 716.626 214.502 cv
715.618 214.502 714.925 214.981 714.548 215.937 cv
714.353 216.444 714.255 217.088 714.255 217.869 cv
714.255 219.104 714.583 219.973 715.24 220.474 cv
715.631 220.766 716.093 220.913 716.626 220.913 cv
717.4 220.913 717.99 220.614 718.397 220.015 cv
718.803 219.417 719.007 218.62 719.007 217.625 cv
719.007 216.805 718.82 216.08 718.446 215.449 cv
cp
720.582 213.449 mo
721.444 214.366 721.875 215.712 721.875 217.488 cv
721.875 219.361 721.454 220.789 720.612 221.771 cv
719.769 222.754 718.685 223.245 717.358 223.245 cv
716.512 223.245 715.81 223.033 715.25 222.61 cv
714.945 222.376 714.645 222.035 714.353 221.586 cv
714.353 227.128 li
711.601 227.128 li
711.601 212.307 li
714.265 212.307 li
714.265 213.878 li
714.564 213.416 714.883 213.052 715.221 212.785 cv
715.839 212.31 716.574 212.073 717.426 212.073 cv
718.668 212.073 719.721 212.532 720.582 213.449 cv
cp
726.711 222.942 mo
723.93 222.942 li
723.93 208.56 li
726.711 208.56 li
726.711 222.942 li
cp
732.111 214.922 mo
731.757 215.325 731.534 215.872 731.443 216.561 cv
735.765 216.561 li
735.72 215.826 735.497 215.268 735.097 214.888 cv
734.697 214.507 734.201 214.317 733.609 214.317 cv
732.965 214.317 732.466 214.519 732.111 214.922 cv
cp
735.999 212.522 mo
736.708 212.854 737.294 213.377 737.756 214.093 cv
738.172 214.724 738.442 215.455 738.565 216.288 cv
738.637 216.776 738.666 217.478 738.653 218.395 cv
731.375 218.395 li
731.414 219.462 731.749 220.21 732.38 220.64 cv
732.763 220.906 733.225 221.04 733.765 221.04 cv
734.337 221.04 734.802 220.877 735.16 220.552 cv
735.355 220.376 735.528 220.132 735.677 219.82 cv
738.517 219.82 li
738.445 220.451 738.117 221.092 737.531 221.742 cv
736.621 222.776 735.346 223.293 733.706 223.293 cv
732.354 223.293 731.16 222.858 730.126 221.986 cv
729.091 221.114 728.574 219.696 728.574 217.732 cv
728.574 215.891 729.041 214.48 729.974 213.497 cv
730.908 212.515 732.119 212.024 733.609 212.024 cv
734.494 212.024 735.29 212.19 735.999 212.522 cv
cp
739.42 214.385 mo
739.42 212.405 li
740.903 212.405 li
740.903 209.439 li
743.655 209.439 li
743.655 212.405 li
745.382 212.405 li
745.382 214.385 li
743.655 214.385 li
743.655 220.005 li
743.655 220.441 743.71 220.713 743.82 220.82 cv
743.931 220.927 744.269 220.981 744.835 220.981 cv
744.92 220.981 745.009 220.979 745.104 220.976 cv
745.198 220.973 745.291 220.968 745.382 220.962 cv
745.382 223.04 li
744.064 223.089 li
742.75 223.134 741.853 222.906 741.372 222.406 cv
741.059 222.087 740.903 221.596 740.903 220.932 cv
740.903 214.385 li
739.42 214.385 li
cp
750.022 211.039 mo
747.202 211.039 li
747.202 208.473 li
750.022 208.473 li
750.022 211.039 li
cp
747.202 212.307 mo
750.022 212.307 li
750.022 222.942 li
747.202 222.942 li
747.202 212.307 li
cp
759.35 220.113 mo
759.785 219.534 760.003 218.711 760.003 217.644 cv
760.003 216.577 759.785 215.756 759.35 215.181 cv
758.914 214.605 758.289 214.317 757.476 214.317 cv
756.663 214.317 756.037 214.605 755.598 215.181 cv
755.159 215.756 754.94 216.577 754.94 217.644 cv
754.94 218.711 755.159 219.534 755.598 220.113 cv
756.037 220.692 756.663 220.981 757.476 220.981 cv
758.289 220.981 758.914 220.692 759.35 220.113 cv
cp
761.574 221.649 mo
760.677 222.758 759.314 223.313 757.486 223.313 cv
755.658 223.313 754.296 222.758 753.398 221.649 cv
752.5 220.54 752.051 219.205 752.051 217.644 cv
752.051 216.109 752.5 214.779 753.398 213.654 cv
754.296 212.528 755.658 211.966 757.486 211.966 cv
759.314 211.966 760.677 212.528 761.574 213.654 cv
762.472 214.779 762.921 216.109 762.921 217.644 cv
762.921 219.205 762.472 220.54 761.574 221.649 cv
cp
773.488 212.917 mo
774.188 213.493 774.537 214.447 774.537 215.781 cv
774.537 222.942 li
771.688 222.942 li
771.688 216.473 li
771.688 215.914 771.613 215.485 771.464 215.185 cv
771.191 214.639 770.67 214.366 769.903 214.366 cv
768.96 214.366 768.312 214.766 767.961 215.566 cv
767.779 215.989 767.688 216.529 767.688 217.186 cv
767.688 222.942 li
764.917 222.942 li
764.917 212.327 li
767.6 212.327 li
767.6 213.878 li
767.958 213.332 768.296 212.938 768.615 212.697 cv
769.187 212.268 769.913 212.053 770.791 212.053 cv
771.89 212.053 772.789 212.341 773.488 212.917 cv
cp
f
grestore
grestore
grestore
815.08 104.99 mo
814.8 205.32 li
814.787 211.98 814.783 218.64 814.79 225.3 cv
815.05 360.8 li
.0300298 .723232 .546319 .00167849 cmyk
@
815.07 369.04 mo
809.55 358.06 li
815.05 360.8 li
820.54 358.04 li
815.07 369.04 li
cp
f
815.07 369.04 mo
809.55 358.06 li
815.05 360.8 li
820.54 358.04 li
815.07 369.04 li
cp
@
801.2 104.99 mo
801.2 221.16 li
@
801.2 229.41 mo
795.7 218.41 li
801.2 221.16 li
806.69 218.41 li
801.2 229.41 li
cp
f
801.2 229.41 mo
795.7 218.41 li
801.2 221.16 li
806.69 218.41 li
801.2 229.41 li
cp
@
gsave
0 0 mo
981 0 li
981 415 li
0 415 li
0 0 li
cp
eclp
gsave
0 0 mo
981 0 li
981 414 li
0 414 li
0 0 li
cp
eclp
gsave
712 38 mo
897.835 38 li
897.835 85.9573 li
712 85.9573 li
712 38 li
cp
eclp
748.3 51.1992 mo
748.41 51.8041 748.622 52.2708 748.934 52.5993 cv
749.246 52.9278 749.701 53.092 750.3 53.092 cv
750.989 53.092 751.515 52.8497 751.876 52.3652 cv
752.237 51.8806 752.417 51.2707 752.417 50.5357 cv
752.417 49.8137 752.248 49.2039 751.91 48.7063 cv
751.572 48.2087 751.045 47.9599 750.329 47.9599 cv
749.991 47.9599 749.698 48.0022 749.451 48.0867 cv
749.015 48.2428 748.687 48.5323 748.466 48.9551 cv
745.968 48.838 li
746.963 41.0227 li
754.759 41.0227 li
754.759 43.3839 li
748.973 43.3839 li
748.466 46.4768 li
748.895 46.1971 749.23 46.0118 749.471 45.9207 cv
749.874 45.7711 750.365 45.6963 750.944 45.6963 cv
752.115 45.6963 753.136 46.0898 754.008 46.8769 cv
754.879 47.6639 755.315 48.8087 755.315 50.3113 cv
755.315 51.6187 754.895 52.7863 754.056 53.8141 cv
753.217 54.8418 751.962 55.3557 750.29 55.3557 cv
748.944 55.3557 747.838 54.9946 746.973 54.2726 cv
746.108 53.5506 745.626 52.5261 745.529 51.1992 cv
748.3 51.1992 li
cp
757.35 52.0773 mo
760.307 52.0773 li
760.307 54.9849 li
757.35 54.9849 li
757.35 52.0773 li
cp
779.342 43.1497 mo
771.732 43.1497 li
771.732 46.2036 li
778.718 46.2036 li
778.718 48.7014 li
771.732 48.7014 li
771.732 52.3993 li
779.694 52.3993 li
779.694 54.9849 li
768.795 54.9849 li
768.795 40.6032 li
779.342 40.6032 li
779.342 43.1497 li
cp
790.39 44.9596 mo
791.089 45.5353 791.439 46.4898 791.439 47.8233 cv
791.439 54.9849 li
788.59 54.9849 li
788.59 48.516 li
788.59 47.9566 788.515 47.5273 788.366 47.2281 cv
788.092 46.6817 787.572 46.4085 786.805 46.4085 cv
785.861 46.4085 785.214 46.8086 784.863 47.6086 cv
784.681 48.0314 784.59 48.5713 784.59 49.2283 cv
784.59 54.9849 li
781.819 54.9849 li
781.819 44.3693 li
784.502 44.3693 li
784.502 45.9207 li
784.86 45.3743 785.198 44.9808 785.517 44.7401 cv
786.089 44.3108 786.814 44.0961 787.692 44.0961 cv
788.792 44.0961 789.691 44.384 790.39 44.9596 cv
cp
792.899 46.428 mo
792.899 44.4474 li
794.382 44.4474 li
794.382 41.4813 li
797.133 41.4813 li
797.133 44.4474 li
798.86 44.4474 li
798.86 46.428 li
797.133 46.428 li
797.133 52.048 li
797.133 52.4839 797.189 52.7554 797.299 52.8628 cv
797.41 52.9701 797.748 53.0237 798.314 53.0237 cv
798.398 53.0237 798.488 53.0221 798.582 53.0189 cv
798.676 53.0156 798.769 53.0107 798.86 53.0042 cv
798.86 55.0825 li
797.543 55.1312 li
796.229 55.1768 795.331 54.9491 794.85 54.4483 cv
794.538 54.1295 794.382 53.6384 794.382 52.975 cv
794.382 46.428 li
792.899 46.428 li
cp
803.34 46.9647 mo
802.985 47.368 802.762 47.9144 802.671 48.6038 cv
806.994 48.6038 li
806.948 47.8688 806.725 47.3111 806.325 46.9305 cv
805.925 46.55 805.429 46.3597 804.837 46.3597 cv
804.193 46.3597 803.694 46.5614 803.34 46.9647 cv
cp
807.228 44.5645 mo
807.937 44.8962 808.522 45.4198 808.984 46.1353 cv
809.4 46.7663 809.67 47.4981 809.794 48.3307 cv
809.865 48.8185 809.895 49.521 809.882 50.4382 cv
802.603 50.4382 li
802.642 51.5049 802.977 52.2529 803.608 52.6823 cv
803.992 52.9489 804.454 53.0823 804.993 53.0823 cv
805.566 53.0823 806.031 52.9197 806.389 52.5944 cv
806.584 52.4188 806.756 52.1749 806.906 51.8627 cv
809.745 51.8627 li
809.674 52.4936 809.345 53.1343 808.76 53.7848 cv
807.849 54.819 806.574 55.3361 804.935 55.3361 cv
803.582 55.3361 802.388 54.9003 801.354 54.0287 cv
800.32 53.1571 799.803 51.7391 799.803 49.7747 cv
799.803 47.9339 800.269 46.5224 801.203 45.5402 cv
802.136 44.558 803.348 44.0669 804.837 44.0669 cv
805.722 44.0669 806.519 44.2327 807.228 44.5645 cv
cp
817.649 44.101 mo
817.685 44.1043 817.765 44.1091 817.888 44.1157 cv
817.888 46.9647 li
817.713 46.9452 817.556 46.9322 817.42 46.9257 cv
817.283 46.9191 817.173 46.9159 817.088 46.9159 cv
815.969 46.9159 815.218 47.2802 814.834 48.0087 cv
814.62 48.4185 814.512 49.0494 814.512 49.9015 cv
814.512 54.9849 li
811.712 54.9849 li
811.712 44.3498 li
814.366 44.3498 li
814.366 46.2036 li
814.795 45.4946 815.169 45.01 815.488 44.7499 cv
816.008 44.314 816.685 44.0961 817.517 44.0961 cv
817.569 44.0961 817.613 44.0978 817.649 44.101 cv
cp
825.233 40.6032 mo
828.385 40.6032 li
834.112 50.643 li
834.112 40.6032 li
836.912 40.6032 li
836.912 54.9849 li
833.907 54.9849 li
828.034 44.7694 li
828.034 54.9849 li
825.233 54.9849 li
825.233 40.6032 li
cp
842.18 46.9647 mo
841.826 47.368 841.603 47.9144 841.512 48.6038 cv
845.834 48.6038 li
845.789 47.8688 845.566 47.3111 845.166 46.9305 cv
844.766 46.55 844.27 46.3597 843.678 46.3597 cv
843.034 46.3597 842.535 46.5614 842.18 46.9647 cv
cp
846.068 44.5645 mo
846.777 44.8962 847.363 45.4198 847.824 46.1353 cv
848.241 46.7663 848.511 47.4981 848.634 48.3307 cv
848.706 48.8185 848.735 49.521 848.722 50.4382 cv
841.443 50.4382 li
841.482 51.5049 841.817 52.2529 842.448 52.6823 cv
842.832 52.9489 843.294 53.0823 843.834 53.0823 cv
844.406 53.0823 844.871 52.9197 845.229 52.5944 cv
845.424 52.4188 845.597 52.1749 845.746 51.8627 cv
848.586 51.8627 li
848.514 52.4936 848.185 53.1343 847.6 53.7848 cv
846.689 54.819 845.414 55.3361 843.775 55.3361 cv
842.422 55.3361 841.229 54.9003 840.195 54.0287 cv
839.16 53.1571 838.643 51.7391 838.643 49.7747 cv
838.643 47.9339 839.11 46.5224 840.043 45.5402 cv
840.977 44.558 842.188 44.0669 843.678 44.0669 cv
844.562 44.0669 845.359 44.2327 846.068 44.5645 cv
cp
855.597 44.3498 mo
858.417 44.3498 li
860.036 52.009 li
861.695 44.3498 li
864.593 44.3498 li
861.51 54.9849 li
858.651 54.9849 li
856.982 47.2379 li
855.294 54.9849 li
852.406 54.9849 li
849.421 44.3498 li
852.406 44.3498 li
854.065 51.9798 li
855.597 44.3498 li
cp
0 0 0 1 cmyk
f
734.853 74.5241 mo
734.944 75.1811 735.123 75.6722 735.389 75.9974 cv
735.877 76.5894 736.713 76.8853 737.897 76.8853 cv
738.606 76.8853 739.182 76.8073 739.624 76.6512 cv
740.463 76.3519 740.883 75.7958 740.883 74.9827 cv
740.883 74.5079 740.674 74.1404 740.258 73.8802 cv
739.842 73.6265 739.188 73.4021 738.297 73.207 cv
736.775 72.8655 li
735.279 72.5272 734.245 72.1597 733.672 71.7629 cv
732.703 71.0995 732.218 70.062 732.218 68.6505 cv
732.218 67.3625 732.687 66.2925 733.623 65.4404 cv
734.56 64.5883 735.936 64.1623 737.751 64.1623 cv
739.266 64.1623 740.559 64.5639 741.629 65.3673 cv
742.699 66.1706 743.26 67.3365 743.312 68.8651 cv
740.424 68.8651 li
740.372 68 739.995 67.3853 739.292 67.0211 cv
738.824 66.7804 738.242 66.66 737.546 66.66 cv
736.772 66.66 736.154 66.8162 735.692 67.1284 cv
735.23 67.4406 734.999 67.8764 734.999 68.4358 cv
734.999 68.9497 735.227 69.3335 735.682 69.5871 cv
735.975 69.7563 736.599 69.9546 737.555 70.1823 cv
740.034 70.7775 li
741.12 71.0377 741.94 71.3857 742.492 71.8215 cv
743.351 72.498 743.78 73.4769 743.78 74.7583 cv
743.78 76.0723 743.278 77.1634 742.273 78.0318 cv
741.268 78.9001 739.848 79.3343 738.014 79.3343 cv
736.141 79.3343 734.667 78.9066 733.594 78.0513 cv
732.521 77.1959 731.984 76.0202 731.984 74.5241 cv
734.853 74.5241 li
cp
752.121 72.1434 mo
752.069 71.7467 751.935 71.3889 751.721 71.0702 cv
751.408 70.6409 750.924 70.4262 750.267 70.4262 cv
749.33 70.4262 748.689 70.8913 748.345 71.8215 cv
748.162 72.3158 748.071 72.9728 748.071 73.7924 cv
748.071 74.5729 748.162 75.2006 748.345 75.6755 cv
748.676 76.5601 749.301 77.0024 750.218 77.0024 cv
750.868 77.0024 751.33 76.8268 751.603 76.4755 cv
751.877 76.1243 752.042 75.669 752.101 75.1096 cv
754.94 75.1096 li
754.875 75.9552 754.57 76.7552 754.023 77.5098 cv
753.152 78.7261 751.86 79.3343 750.15 79.3343 cv
748.439 79.3343 747.18 78.827 746.374 77.8122 cv
745.567 76.7975 745.164 75.4803 745.164 73.8607 cv
745.164 72.0329 745.609 70.6116 746.501 69.5969 cv
747.392 68.5822 748.621 68.0748 750.189 68.0748 cv
751.522 68.0748 752.613 68.374 753.462 68.9724 cv
754.311 69.5709 754.813 70.6279 754.97 72.1434 cv
752.121 72.1434 li
cp
762.732 73.7924 mo
762.557 73.903 762.379 73.9924 762.2 74.0607 cv
762.022 74.129 761.776 74.1924 761.464 74.251 cv
760.839 74.368 li
760.254 74.4721 759.834 74.5989 759.581 74.7486 cv
759.151 75.0022 758.937 75.3958 758.937 75.9291 cv
758.937 76.404 759.068 76.7471 759.332 76.9585 cv
759.595 77.1699 759.916 77.2756 760.293 77.2756 cv
760.891 77.2756 761.443 77.1 761.947 76.7487 cv
762.451 76.3975 762.713 75.7568 762.732 74.8266 cv
762.732 73.7924 li
cp
761.044 72.4947 mo
761.558 72.4297 761.926 72.3484 762.147 72.2508 cv
762.544 72.0817 762.742 71.8182 762.742 71.4605 cv
762.742 71.0247 762.591 70.7238 762.288 70.5579 cv
761.986 70.3921 761.542 70.3091 760.956 70.3091 cv
760.299 70.3091 759.834 70.4718 759.561 70.797 cv
759.366 71.0377 759.236 71.3629 759.171 71.7727 cv
756.488 71.7727 li
756.546 70.8425 756.807 70.0782 757.268 69.4798 cv
758.003 68.5431 759.265 68.0748 761.054 68.0748 cv
762.218 68.0748 763.253 68.3057 764.157 68.7675 cv
765.061 69.2294 765.513 70.101 765.513 71.3824 cv
765.513 76.2609 li
765.513 76.5991 765.519 77.0089 765.532 77.4903 cv
765.552 77.8545 765.607 78.1017 765.698 78.2318 cv
765.789 78.3619 765.926 78.4692 766.108 78.5538 cv
766.108 78.9636 li
763.083 78.9636 li
762.999 78.7489 762.94 78.5473 762.908 78.3586 cv
762.875 78.17 762.849 77.9553 762.83 77.7147 cv
762.446 78.131 762.004 78.4855 761.503 78.7782 cv
760.904 79.1229 760.228 79.2953 759.473 79.2953 cv
758.511 79.2953 757.716 79.0205 757.088 78.4708 cv
756.46 77.9212 756.146 77.1423 756.146 76.134 cv
756.146 74.8266 756.65 73.8802 757.659 73.2948 cv
758.211 72.976 759.025 72.7484 760.098 72.6118 cv
761.044 72.4947 li
cp
770.807 78.9636 mo
768.026 78.9636 li
768.026 64.5818 li
770.807 64.5818 li
770.807 78.9636 li
cp
776.369 67.0601 mo
773.549 67.0601 li
773.549 64.494 li
776.369 64.494 li
776.369 67.0601 li
cp
773.549 68.3285 mo
776.369 68.3285 li
776.369 78.9636 li
773.549 78.9636 li
773.549 68.3285 li
cp
787.643 68.9383 mo
788.342 69.514 788.692 70.4685 788.692 71.802 cv
788.692 78.9636 li
785.843 78.9636 li
785.843 72.4947 li
785.843 71.9353 785.768 71.506 785.618 71.2068 cv
785.345 70.6604 784.825 70.3872 784.057 70.3872 cv
783.114 70.3872 782.467 70.7872 782.115 71.5873 cv
781.933 72.0101 781.842 72.55 781.842 73.207 cv
781.842 78.9636 li
779.071 78.9636 li
779.071 68.348 li
781.754 68.348 li
781.754 69.8994 li
782.112 69.353 782.45 68.9594 782.769 68.7188 cv
783.341 68.2895 784.067 68.0748 784.945 68.0748 cv
786.044 68.0748 786.943 68.3626 787.643 68.9383 cv
cp
797.459 75.9438 mo
797.908 75.4527 798.132 74.6705 798.132 73.5972 cv
798.132 72.589 797.919 71.8215 797.493 71.2946 cv
797.067 70.7677 796.496 70.5043 795.781 70.5043 cv
794.805 70.5043 794.132 70.9629 793.761 71.88 cv
793.566 72.3679 793.469 72.9695 793.469 73.6851 cv
793.469 74.303 793.573 74.8526 793.781 75.334 cv
794.158 76.2316 794.835 76.6804 795.81 76.6804 cv
796.461 76.6804 797.01 76.4349 797.459 75.9438 cv
cp
796.513 68.3187 mo
797.189 68.5984 797.736 69.1123 798.152 69.8603 cv
798.152 68.3285 li
800.855 68.3285 li
800.855 78.4172 li
800.855 79.7896 800.624 80.8239 800.162 81.5199 cv
799.368 82.7167 797.846 83.3152 795.596 83.3152 cv
794.236 83.3152 793.127 83.0485 792.268 82.5151 cv
791.41 81.9817 790.935 81.1849 790.844 80.1246 cv
793.869 80.1246 li
793.947 80.4499 794.073 80.684 794.249 80.8271 cv
794.548 81.0808 795.052 81.2076 795.761 81.2076 cv
796.763 81.2076 797.433 80.8727 797.771 80.2027 cv
797.992 79.7734 798.103 79.0514 798.103 78.0366 cv
798.103 77.3537 li
797.836 77.809 797.55 78.1505 797.244 78.3781 cv
796.692 78.8009 795.973 79.0123 795.088 79.0123 cv
793.722 79.0123 792.631 78.5326 791.815 77.5732 cv
790.998 76.6138 790.59 75.3145 790.59 73.6753 cv
790.59 72.0947 790.984 70.7661 791.771 69.6896 cv
792.558 68.6131 793.673 68.0748 795.117 68.0748 cv
795.651 68.0748 796.116 68.1561 796.513 68.3187 cv
cp
811.954 78.9636 mo
808.968 78.9636 li
808.968 64.5818 li
811.954 64.5818 li
811.954 78.9636 li
cp
823.111 68.9383 mo
823.81 69.514 824.16 70.4685 824.16 71.802 cv
824.16 78.9636 li
821.311 78.9636 li
821.311 72.4947 li
821.311 71.9353 821.236 71.506 821.087 71.2068 cv
820.813 70.6604 820.293 70.3872 819.525 70.3872 cv
818.582 70.3872 817.935 70.7872 817.584 71.5873 cv
817.402 72.0101 817.311 72.55 817.311 73.207 cv
817.311 78.9636 li
814.54 78.9636 li
814.54 68.348 li
817.223 68.348 li
817.223 69.8994 li
817.581 69.353 817.919 68.9594 818.237 68.7188 cv
818.81 68.2895 819.535 68.0748 820.413 68.0748 cv
821.513 68.0748 822.412 68.3626 823.111 68.9383 cv
cp
825.62 70.4067 mo
825.62 68.4261 li
827.103 68.4261 li
827.103 65.4599 li
829.854 65.4599 li
829.854 68.4261 li
831.581 68.4261 li
831.581 70.4067 li
829.854 70.4067 li
829.854 76.0267 li
829.854 76.4625 829.909 76.7341 830.02 76.8414 cv
830.131 76.9487 830.469 77.0024 831.035 77.0024 cv
831.119 77.0024 831.209 77.0008 831.303 76.9975 cv
831.397 76.9943 831.49 76.9894 831.581 76.9829 cv
831.581 79.0611 li
830.264 79.1099 li
828.95 79.1554 828.052 78.9278 827.571 78.4269 cv
827.259 78.1082 827.103 77.6171 827.103 76.9536 cv
827.103 70.4067 li
825.62 70.4067 li
cp
836.061 70.9433 mo
835.706 71.3466 835.483 71.893 835.392 72.5825 cv
839.714 72.5825 li
839.669 71.8475 839.446 71.2897 839.046 70.9092 cv
838.646 70.5287 838.15 70.3384 837.558 70.3384 cv
836.914 70.3384 836.415 70.5401 836.061 70.9433 cv
cp
839.949 68.5431 mo
840.658 68.8749 841.243 69.3985 841.705 70.114 cv
842.121 70.745 842.391 71.4767 842.515 72.3093 cv
842.586 72.7972 842.616 73.4997 842.603 74.4168 cv
835.324 74.4168 li
835.363 75.4836 835.698 76.2316 836.329 76.6609 cv
836.713 76.9276 837.174 77.061 837.714 77.061 cv
838.287 77.061 838.752 76.8983 839.11 76.5731 cv
839.305 76.3975 839.477 76.1536 839.627 75.8413 cv
842.466 75.8413 li
842.394 76.4723 842.066 77.113 841.481 77.7635 cv
840.57 78.7977 839.295 79.3148 837.656 79.3148 cv
836.303 79.3148 835.109 78.879 834.075 78.0074 cv
833.041 77.1358 832.524 75.7177 832.524 73.7533 cv
832.524 71.9125 832.99 70.501 833.924 69.5188 cv
834.857 68.5366 836.069 68.0455 837.558 68.0455 cv
838.443 68.0455 839.24 68.2114 839.949 68.5431 cv
cp
850.37 68.0797 mo
850.406 68.0829 850.486 68.0878 850.609 68.0943 cv
850.609 70.9433 li
850.433 70.9238 850.277 70.9108 850.141 70.9043 cv
850.004 70.8978 849.894 70.8946 849.809 70.8946 cv
848.69 70.8946 847.939 71.2588 847.555 71.9873 cv
847.341 72.3971 847.233 73.0281 847.233 73.8802 cv
847.233 78.9636 li
844.433 78.9636 li
844.433 68.3285 li
847.087 68.3285 li
847.087 70.1823 li
847.516 69.4733 847.89 68.9887 848.209 68.7285 cv
848.729 68.2927 849.406 68.0748 850.238 68.0748 cv
850.29 68.0748 850.334 68.0764 850.37 68.0797 cv
cp
858.793 68.3285 mo
861.779 68.3285 li
857.944 78.9636 li
855.008 78.9636 li
851.193 68.3285 li
854.315 68.3285 li
856.53 76.1731 li
858.793 68.3285 li
cp
869.2 73.7924 mo
869.024 73.903 868.847 73.9924 868.668 74.0607 cv
868.489 74.129 868.244 74.1924 867.932 74.251 cv
867.307 74.368 li
866.722 74.4721 866.302 74.5989 866.049 74.7486 cv
865.619 75.0022 865.405 75.3958 865.405 75.9291 cv
865.405 76.404 865.536 76.7471 865.8 76.9585 cv
866.063 77.1699 866.383 77.2756 866.761 77.2756 cv
867.359 77.2756 867.91 77.1 868.415 76.7487 cv
868.919 76.3975 869.18 75.7568 869.2 74.8266 cv
869.2 73.7924 li
cp
867.512 72.4947 mo
868.026 72.4297 868.393 72.3484 868.615 72.2508 cv
869.011 72.0817 869.21 71.8182 869.21 71.4605 cv
869.21 71.0247 869.059 70.7238 868.756 70.5579 cv
868.454 70.3921 868.01 70.3091 867.424 70.3091 cv
866.767 70.3091 866.302 70.4718 866.029 70.797 cv
865.834 71.0377 865.704 71.3629 865.639 71.7727 cv
862.956 71.7727 li
863.014 70.8425 863.274 70.0782 863.736 69.4798 cv
864.471 68.5431 865.733 68.0748 867.522 68.0748 cv
868.686 68.0748 869.72 68.3057 870.625 68.7675 cv
871.529 69.2294 871.981 70.101 871.981 71.3824 cv
871.981 76.2609 li
871.981 76.5991 871.987 77.0089 872 77.4903 cv
872.02 77.8545 872.075 78.1017 872.166 78.2318 cv
872.257 78.3619 872.394 78.4692 872.576 78.5538 cv
872.576 78.9636 li
869.551 78.9636 li
869.467 78.7489 869.408 78.5473 869.376 78.3586 cv
869.343 78.17 869.317 77.9553 869.298 77.7147 cv
868.914 78.131 868.471 78.4855 867.971 78.7782 cv
867.372 79.1229 866.696 79.2953 865.941 79.2953 cv
864.978 79.2953 864.183 79.0205 863.556 78.4708 cv
862.928 77.9212 862.614 77.1423 862.614 76.134 cv
862.614 74.8266 863.118 73.8802 864.126 73.2948 cv
864.679 72.976 865.492 72.7484 866.566 72.6118 cv
867.512 72.4947 li
cp
877.275 78.9636 mo
874.494 78.9636 li
874.494 64.5818 li
877.275 64.5818 li
877.275 78.9636 li
cp
f
grestore
grestore
grestore
gsave
0 0 mo
981 0 li
981 415 li
0 415 li
0 0 li
cp
eclp
gsave
0 0 mo
981 0 li
981 414 li
0 414 li
0 0 li
cp
eclp
[14.9867 14.9867 ] 0 dsh
895.01 373.63 mo
894.73 273.3 li
894.71 266.64 894.707 259.98 894.72 253.32 cv
894.98 117.82 li
.609766 .380713 .064271 0 cmyk
@
894.99 109.58 mo
889.48 120.56 li
894.98 117.82 li
900.47 120.58 li
894.99 109.58 li
cp
f
[] 0 dsh
894.99 109.58 mo
889.48 120.56 li
894.98 117.82 li
900.47 120.58 li
894.99 109.58 li
cp
@
[14.9867 14.9867 ] 0 dsh
881.13 233.99 mo
881.13 117.82 li
@
881.13 109.57 mo
875.63 120.56 li
881.13 117.82 li
886.62 120.56 li
881.13 109.57 li
cp
f
[] 0 dsh
881.13 109.57 mo
875.63 120.56 li
881.13 117.82 li
886.62 120.56 li
881.13 109.57 li
cp
@
grestore
grestore
gsave
0 0 mo
981 0 li
981 415 li
0 415 li
0 0 li
cp
eclp
gsave
0 0 mo
981 0 li
981 414 li
0 414 li
0 0 li
cp
eclp
gsave
913 180 mo
966.952 180 li
966.952 227.957 li
913 227.957 li
913 180 li
cp
eclp
915.521 182.623 mo
925.717 182.623 li
925.717 185.15 li
918.507 185.15 li
918.507 188.457 li
924.82 188.457 li
924.82 190.955 li
918.507 190.955 li
918.507 196.985 li
915.521 196.985 li
915.521 182.623 li
cp
930.348 185.081 mo
927.528 185.081 li
927.528 182.515 li
930.348 182.515 li
930.348 185.081 li
cp
927.528 186.35 mo
930.348 186.35 li
930.348 196.985 li
927.528 196.985 li
927.528 186.35 li
cp
941.622 186.96 mo
942.321 187.535 942.671 188.49 942.671 189.823 cv
942.671 196.985 li
939.822 196.985 li
939.822 190.516 li
939.822 189.957 939.747 189.527 939.597 189.228 cv
939.324 188.682 938.804 188.409 938.036 188.409 cv
937.093 188.409 936.446 188.809 936.095 189.609 cv
935.913 190.031 935.821 190.571 935.821 191.228 cv
935.821 196.985 li
933.051 196.985 li
933.051 186.369 li
935.734 186.369 li
935.734 187.921 li
936.091 187.374 936.43 186.981 936.748 186.74 cv
937.321 186.311 938.046 186.096 938.924 186.096 cv
940.023 186.096 940.923 186.384 941.622 186.96 cv
cp
951.087 191.814 mo
950.912 191.924 950.734 192.014 950.555 192.082 cv
950.377 192.15 950.131 192.214 949.819 192.272 cv
949.194 192.389 li
948.609 192.493 948.189 192.62 947.936 192.77 cv
947.506 193.024 947.292 193.417 947.292 193.95 cv
947.292 194.425 947.423 194.768 947.687 194.98 cv
947.95 195.191 948.271 195.297 948.648 195.297 cv
949.246 195.297 949.798 195.121 950.302 194.77 cv
950.806 194.419 951.068 193.778 951.087 192.848 cv
951.087 191.814 li
cp
949.399 190.516 mo
949.913 190.451 950.281 190.37 950.502 190.272 cv
950.899 190.103 951.097 189.84 951.097 189.482 cv
951.097 189.046 950.946 188.745 950.643 188.579 cv
950.341 188.413 949.897 188.33 949.311 188.33 cv
948.654 188.33 948.189 188.493 947.916 188.818 cv
947.721 189.059 947.591 189.384 947.526 189.794 cv
944.843 189.794 li
944.901 188.864 945.161 188.1 945.623 187.501 cv
946.358 186.564 947.62 186.096 949.409 186.096 cv
950.573 186.096 951.608 186.327 952.512 186.789 cv
953.416 187.251 953.868 188.122 953.868 189.404 cv
953.868 194.282 li
953.868 194.62 953.874 195.03 953.887 195.512 cv
953.907 195.876 953.962 196.123 954.053 196.253 cv
954.144 196.383 954.281 196.491 954.463 196.575 cv
954.463 196.985 li
951.438 196.985 li
951.354 196.77 951.295 196.569 951.263 196.38 cv
951.23 196.191 951.204 195.977 951.185 195.736 cv
950.801 196.152 950.359 196.507 949.858 196.799 cv
949.259 197.144 948.583 197.317 947.828 197.317 cv
946.866 197.317 946.07 197.042 945.443 196.492 cv
944.815 195.943 944.501 195.164 944.501 194.155 cv
944.501 192.848 945.005 191.902 946.014 191.316 cv
946.566 190.997 947.38 190.77 948.453 190.633 cv
949.399 190.516 li
cp
959.162 196.985 mo
956.381 196.985 li
956.381 182.603 li
959.162 182.603 li
959.162 196.985 li
cp
0 0 0 1 cmyk
f
927.118 215.529 mo
930.767 215.529 li
928.972 209.87 li
927.118 215.529 li
cp
927.304 206.582 mo
930.699 206.582 li
935.792 220.964 li
932.533 220.964 li
931.607 218.007 li
926.308 218.007 li
925.313 220.964 li
922.172 220.964 li
927.304 206.582 li
cp
943.738 214.143 mo
943.686 213.747 943.553 213.389 943.338 213.07 cv
943.026 212.641 942.541 212.426 941.884 212.426 cv
940.948 212.426 940.307 212.891 939.962 213.821 cv
939.78 214.316 939.689 214.973 939.689 215.792 cv
939.689 216.573 939.78 217.201 939.962 217.675 cv
940.294 218.56 940.919 219.002 941.836 219.002 cv
942.486 219.002 942.948 218.827 943.221 218.476 cv
943.494 218.124 943.66 217.669 943.719 217.11 cv
946.558 217.11 li
946.493 217.955 946.187 218.755 945.641 219.51 cv
944.769 220.726 943.478 221.334 941.767 221.334 cv
940.057 221.334 938.798 220.827 937.991 219.812 cv
937.185 218.798 936.782 217.48 936.782 215.861 cv
936.782 214.033 937.227 212.612 938.118 211.597 cv
939.009 210.582 940.239 210.075 941.806 210.075 cv
943.14 210.075 944.231 210.374 945.08 210.972 cv
945.929 211.571 946.431 212.628 946.587 214.143 cv
943.738 214.143 li
cp
948.457 206.631 mo
951.189 206.631 li
951.189 214.378 li
954.652 210.377 li
958.097 210.377 li
954.379 214.446 li
958.243 220.964 li
954.887 220.964 li
952.34 216.417 li
951.189 217.617 li
951.189 220.964 li
948.457 220.964 li
948.457 206.631 li
cp
f
grestore
grestore
grestore
282.55 103.99 mo
282.28 204.32 li
282.26 210.98 282.257 217.64 282.27 224.3 cv
282.52 359.8 li
@
282.54 368.04 mo
277.02 357.06 li
282.52 359.8 li
288.01 357.04 li
282.54 368.04 li
cp
f
282.54 368.04 mo
277.02 357.06 li
282.52 359.8 li
288.01 357.04 li
282.54 368.04 li
cp
@
268.67 103.99 mo
268.67 220.16 li
@
268.67 228.41 mo
263.18 217.42 li
268.67 220.16 li
274.17 217.42 li
268.67 228.41 li
cp
f
268.67 228.41 mo
263.18 217.42 li
268.67 220.16 li
274.17 217.42 li
268.67 228.41 li
cp
@
gsave
0 0 mo
981 0 li
981 415 li
0 415 li
0 0 li
cp
eclp
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
