%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: IMS_architecture.pdf
%%Creator: Adobe Acrobat 10.0.0
%%For: jpduan
%%CreationDate: 10/11/2017, 12:55:32 PM
%%BoundingBox: 0 0 1341 588
%%HiResBoundingBox: 0 0 1341 588
%%CropBox: 0 0 1341 588
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 626 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2017-10-11T04:51:35"
   xmp:CreatorTool=""
   pdf:Producer="Qt 5.3.0"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -588 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 588 li
1341 588 li
1341 0 li
cp
clp
0 0 mo
1341 0 li
1341 587 li
0 587 li
0 0 li
false sop
0 0 0 0 cmyk
f
gsave
0 0 mo
1341 0 li
1341 588 li
0 588 li
0 0 li
eclp
gsave
0 0 mo
1341 0 li
1341 587 li
0 587 li
0 0 li
eclp
46 395 mo
0 395 li
0 314 li
46 314 li
46 395 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 588 ]ct
[48 0 0 83 -1 192 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 48 
/H 83 
/M[48 0 0 -83 0 83 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcP*:!<E8Z"oeY<!3-#"!<V-^rrW3#JcP'9!s/f;%,VBo$jI%?_Z6\:"p58?%1<=Ki!TVt$P*;n!9sOi
!<EK:$OI7P#N6$p$3pbE$NU:M!3#r(!s8i:%gNOO%d=Au$j[7M%1NgV%0Qfl!9X=f#RCnK%2&gT%,hX"
$kEpS%g`Qd!2]`%#6tVL%LX!Z&*=B!%L!7Q&InsJNWA,?#7(SI%1s'_%c@j%&J5Ha%13Hg!2BPo$/uQh
&cW0"!9!qX$.TXf$.8gH!<3Ae'(HV7$'YGH!<3DV'E8Ei!1a,i$Kr2l'`SQ-!8@MR$ec="(Ddf$(CU`)
!1Eof%/q(C(%<%*(]Oo4!8%;O%+Q0o%,1cK!<3Jq)!Dh:%@mLL!!E`?)&X:i)<i"1)?10&!0dK`%Ik@u
)ZL8>!7CiL%hBX#f,Xf$i;iBJT`G*'j;me3rst:nhZ3ZeeK+Z#e,Z'?rt"96miMK>Q2o\?rt*^&rt*c^
RfNI"l6,F9rt(Ruf`;$as!%CagEQY1g&RK?!YQ+jmNUm>rt:h%ec>^_eKb),h#N]?rt=fHjs9s?T)d=?
rtEp/rtF;jOoYLqo-WKErtD+,ciF([g*lkJrtXPoNr]1op*eiIrtV@1blIbYeLCM5joC>?rtY>Zh(&F>
VuXs?rta-8rtai!M#dPlr%6VSrth^9`rQ,UeLpk<li;b?!uMk.0&/)W0E2ll!5nm;)#c2g0%quY)".HW
!!!l;))9\rru&'AnGpr:ru'?Aru'erO9#;!r\FO/q(ptcru.[5c2[na)Dp#$ru0u!N<&tsqDA4.lSJ/i
ru.d8b5hP]eM[@GkQ$J?ruCnogG]'NWW:*?ruBQJruC>)LB.>pr]1!;g,]0RXT6<?ruKWMruLM-KE2#m
eN3^NYQ2N?ruT]PruU\1JcGiP*Ziioru\QI^B"9UeNNpToDjICr;cj?eNa'V[K*r?ruflW!^IkNpAfdF
q>gO<eNj-W\H'/?ruooYruq4=JcPNFruooZs!#)U[K-=OeO0?\r;_ELoDnn8eO0?]^AtS?s!-&_![Aoi
JcP<@s!-&`s!4lM^]=B[eOTWbo)O@BrW)sEejoj6,pfr!]`A'Ys%3,Zge%Mlp&K[EqZ-XBeOfce\,a)?
s!H8hs!IOAJcPQGs!H8is!G>X[fHFUeP6&kquD<Ko`5"?eP?,m^&YM?s!ZDns![mIJcP?A#Uh)s9iFh_
:e]hD##\5l:eiDe_#U_?#Uh*!9iOeb:K6RSq+q5j:/Xne.0(fL!:Kmn.OnFp:fpIk:Z51U;bg=l9.;=.
!3Q;--n%hh;bp@l:uG7Q<DN]r;CO&L!:0[k()C"T;c6Up<oI!X<rQ#!<YlRm!36)*"U.Ro<`W*s;rL[[
:g$dr8d,BT!9X=d(fjO:<E3#U<<?9%)TVoT!!O*/<E`='jAu7\"'APp(5W%N!!<67,:h\'![A<YaT/"7
!s'#Z/*8D[/-7%/!W<"K~>

%%EndBinary
grestore
np
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
.5 319.5 mo
.5 316.74 3.02 314.5 6.12 314.5 cv
39.88 314.5 li
42.98 314.5 45.5 316.74 45.5 319.5 cv
45.5 389.5 li
45.5 392.26 42.98 394.5 39.88 394.5 cv
6.13 394.5 li
3.02 394.5 .5 392.26 .5 389.5 cv
.5 319.5 li
cp
0 0 0 .718471 cmyk
@
24.0625 318.5 mo
24.0625 318.776 23.8107 319 23.5 319 cv
23.1893 319 22.9375 318.776 22.9375 318.5 cv
22.9375 318.224 23.1893 318 23.5 318 cv
23.8107 318 24.0625 318.224 24.0625 318.5 cv
cp
@
3.31 326.5 mo
42.69 326.5 li
42.69 382.5 li
3.31 382.5 li
3.31 326.5 li
cp
@
17.38 321.3 mo
17.37 321.09 17.47 320.88 17.64 320.73 cv
17.81 320.58 18.04 320.5 18.28 320.5 cv
27.73 320.5 li
27.96 320.5 28.19 320.58 28.36 320.73 cv
28.53 320.88 28.63 321.09 28.63 321.3 cv
28.63 321.51 28.53 321.72 28.36 321.87 cv
28.19 322.02 27.96 322.1 27.73 322.1 cv
18.28 322.1 li
18.04 322.1 17.81 322.02 17.64 321.87 cv
17.47 321.72 17.37 321.51 17.38 321.3 cv
cp
@
28 388.5 mo
28 390.709 25.9853 392.5 23.5 392.5 cv
21.0147 392.5 19 390.709 19 388.5 cv
19 386.291 21.0147 384.5 23.5 384.5 cv
25.9853 384.5 28 386.291 28 388.5 cv
cp
@
21.09 387.4 mo
21.09 387.12 21.34 386.9 21.65 386.9 cv
24.35 386.9 li
24.66 386.9 24.91 387.12 24.91 387.4 cv
24.91 389.8 li
24.91 390.08 24.66 390.3 24.35 390.3 cv
21.65 390.3 li
21.34 390.3 21.09 390.08 21.09 389.8 cv
21.09 387.4 li
cp
@
570.5 241.5 mo
610.5 241.5 li
610.5 319.76 li
570.5 319.76 li
cp
0 0 0 .226719 cmyk
f
570.5 241.5 mo
610.5 241.5 li
610.5 319.76 li
570.5 319.76 li
570.5 241.5 li
cp
0 0 0 1 cmyk
@
572.32 319.76 mo
608.68 319.76 li
608.68 321.5 li
572.32 321.5 li
cp
0 0 0 .226719 cmyk
f
572.32 319.76 mo
608.68 319.76 li
608.68 321.5 li
572.32 321.5 li
572.32 319.76 li
cp
0 0 0 1 cmyk
@
572.86 242.28 mo
607.4 242.28 li
607.4 318.63 li
572.86 318.63 li
cp
0 0 0 .0654307 cmyk
f
583.41 243.24 mo
596.69 243.24 li
596.69 243.76 li
583.41 243.76 li
cp
0 0 0 .226719 cmyk
f
583.41 243.24 mo
596.69 243.24 li
596.69 243.76 li
583.41 243.76 li
583.41 243.24 li
cp
0 0 0 .718471 cmyk
@
573.68 244.98 mo
606.41 244.98 li
606.41 251.07 li
573.68 251.07 li
cp
0 0 0 .226719 cmyk
f
573.68 244.98 mo
606.41 244.98 li
606.41 251.07 li
573.68 251.07 li
573.68 244.98 li
cp
0 0 0 .718471 cmyk
@
572.32 251.94 mo
608.68 251.94 li
608.68 254.55 li
572.32 254.55 li
cp
0 0 0 .226719 cmyk
f
571.59 272.81 mo
608.68 272.81 li
608.68 275.42 li
571.59 275.42 li
cp
f
575.04 257.15 mo
605.04 257.15 li
605.04 259.76 li
575.04 259.76 li
cp
f
575.04 262.37 mo
605.04 262.37 li
605.04 264.98 li
575.04 264.98 li
cp
f
574.14 277.15 mo
605.96 277.15 li
605.96 317.15 li
574.14 317.15 li
cp
f
574.14 277.15 mo
605.96 277.15 li
605.96 317.15 li
574.14 317.15 li
574.14 277.15 li
cp
0 0 0 .718471 cmyk
@
575.04 267.59 mo
605.04 267.59 li
605.04 270.2 li
575.04 270.2 li
cp
0 0 0 .226719 cmyk
f
700.5 111.5 mo
740.5 111.5 li
740.5 184.87 li
700.5 184.87 li
cp
f
700.5 111.5 mo
740.5 111.5 li
740.5 184.87 li
700.5 184.87 li
700.5 111.5 li
cp
0 0 0 1 cmyk
@
702.32 184.87 mo
738.68 184.87 li
738.68 186.5 li
702.32 186.5 li
cp
0 0 0 .226719 cmyk
f
702.32 184.87 mo
738.68 184.87 li
738.68 186.5 li
702.32 186.5 li
702.32 184.87 li
cp
0 0 0 1 cmyk
@
702.86 112.23 mo
737.4 112.23 li
737.4 183.8 li
702.86 183.8 li
cp
0 0 0 .0654307 cmyk
f
713.41 113.13 mo
726.69 113.13 li
726.69 113.62 li
713.41 113.62 li
cp
0 0 0 .226719 cmyk
f
713.41 113.13 mo
726.69 113.13 li
726.69 113.62 li
713.41 113.62 li
713.41 113.13 li
cp
0 0 0 .718471 cmyk
@
703.68 114.76 mo
736.41 114.76 li
736.41 120.47 li
703.68 120.47 li
cp
0 0 0 .226719 cmyk
f
703.68 114.76 mo
736.41 114.76 li
736.41 120.47 li
703.68 120.47 li
703.68 114.76 li
cp
0 0 0 .718471 cmyk
@
702.32 121.28 mo
738.68 121.28 li
738.68 123.73 li
702.32 123.73 li
cp
0 0 0 .226719 cmyk
f
701.59 140.85 mo
738.68 140.85 li
738.68 143.3 li
701.59 143.3 li
cp
f
705.04 126.17 mo
735.04 126.17 li
735.04 128.62 li
705.04 128.62 li
cp
f
705.04 131.07 mo
735.04 131.07 li
735.04 133.52 li
705.04 133.52 li
cp
f
704.14 144.93 mo
735.96 144.93 li
735.96 182.43 li
704.14 182.43 li
cp
f
704.14 144.93 mo
735.96 144.93 li
735.96 182.43 li
704.14 182.43 li
704.14 144.93 li
cp
0 0 0 .718471 cmyk
@
705.04 135.96 mo
735.04 135.96 li
735.04 138.41 li
705.04 138.41 li
cp
0 0 0 .226719 cmyk
f
890 82.0001 mo
850 82.0001 li
850 0 li
890 0 li
890 82.0001 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 588 ]ct
[42 0 0 84 849 505 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 42 
/H 84 
/M[42 0 0 -84 0 84 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 42 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 42 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 42 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 42 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcMSH&HN">"UPMD$OdFO$OR1D#6Y(t!.k4L!!`Q/$OdIQ&I\CC#7D+P%1EUJ!hKDC!!if8%hB*X
%h'*F%gWdV%h&mX%gWE^!3ZA0!Xf;F%LEa[%1Wg@%13LR%1s3Z%M9!T!qZJJ!!ETB'+GQZ%2'<^%2TNh
q%!lJ%i5Z_'+t`e%20E^T)d^J!=]Y?%gWXT(Cgrl$kWpD%gNLT$l9Ea(CpBS!>,d_!4Dk;$5!d`&J>cj
&JGci'+krS&e5Tf'+tok&J>cj&JYfg$M+7Y!<3-#'E/U@''g/7&J5Wh'*86-!9F1_$O[X^rY"9*"VMF]
'FP;i!5&=3&c37B($QD4(&J^F&b,jb!<3`4'_E.+'`o'_':T!d!<!Z4(ZQ81(]>)e!5JU1(B>37(B>3G
([V3h!:1Qh(mb6i!7r+(!5nlh)<h-j!9b?j)Nt0k!7r4'!6>/l*T[9n!9>0m*KL3n!7r:%!6bGp+5m4o
!3H7Q+92Cp!<47r,,tXs!7rFD!3lOU,Q%Ot!;e%t,c1Ru!7rOC!4;gY-27J!!;@i!-DCM"!7rXB!4`*]
.J*V%!:qZ$.@pP%!7r^@!5/Ba/+<P'!:MN(/Xc\)!7rg?!5SZe0'iS*!:)<*09uV+!7rp>!6"ri0^&M,
!9Z*,0p2P-!7s$=!6G5m1unY0!95p/1l_S0!7s*;!;?KF!7s-[!3Q=R2u`l3!<+q22lQf3!7s6Z!3uUV
3r8o6!;\e64/Dr7!7s<X!4DmZ4SJi8!;8S84eVl9!7sHX!4i0^5P"l;!:iD;5b.o<!7sNV!58Hb6LOo>
!:E2=6C@i>!7sTT!5\`f7I'rA!:!&A7[3uB!7s]S!6,#j8*9lC!9QiC8<EoD!7sfR!6P;n8`KfE!<5UN
9DD0[8<!WD!<5==9`I>Y!8%8W.k=:f9Me;U9B](T:J">U:/!,eeGucQ#R:T,:JOVZ9iC1M#>J#i9MJ+a
#Q=^V!!+B?"ADQe:JBtI"]%lf:/<15!8.>T02kSC:?G=S<)-=Dc2b$J"=m8@:0-UU"B8)g:Fl,=K`D/e
858;G"&qu_&YB'W!!30?53YrH4WFLC!3Q;($n=J>nP]Ne5:R*/!.k1_!u<194[r%=;Gp7^7QiCN('Bd$
JcLo5J,~>

%%EndBinary
grestore
np
2 lw
850 12 mo
850 -2.67 890 -2.67 890 12 cv
890 70 li
890 84.67 850 84.67 850 70 cv
850 12 li
cp
0 0 0 .718471 cmyk
@
850 12 mo
850 23 890 23 890 12 cv
850 17.5 mo
850 28.5 890 28.5 890 17.5 cv
850 23 mo
850 34 890 34 890 23 cv
@
6.35938 412.785 mo
6.35938 423.426 li
6.35938 424.676 6.59375 425.715 7.0625 426.543 cv
7.75781 427.793 8.92969 428.418 10.5781 428.418 cv
12.5547 428.418 13.8984 427.742 14.6094 426.391 cv
14.9922 425.656 15.1836 424.668 15.1836 423.426 cv
15.1836 412.785 li
17.5508 412.785 li
17.5508 422.453 li
17.5508 424.57 17.2656 426.199 16.6953 427.34 cv
15.6484 429.418 13.6719 430.457 10.7656 430.457 cv
7.85938 430.457 5.88672 429.418 4.84766 427.34 cv
4.27734 426.199 3.99219 424.57 3.99219 422.453 cv
3.99219 412.785 li
6.35938 412.785 li
cp
22.1289 426.063 mo
22.1914 426.766 22.3672 427.305 22.6563 427.68 cv
23.1875 428.359 24.1094 428.699 25.4219 428.699 cv
26.2031 428.699 26.8906 428.529 27.4844 428.189 cv
28.0781 427.85 28.375 427.324 28.375 426.613 cv
28.375 426.074 28.1367 425.664 27.6602 425.383 cv
27.3555 425.211 26.7539 425.012 25.8555 424.785 cv
24.1797 424.363 li
23.1094 424.098 22.3203 423.801 21.8125 423.473 cv
20.9063 422.902 20.4531 422.113 20.4531 421.105 cv
20.4531 419.918 20.8809 418.957 21.7363 418.223 cv
22.5918 417.488 23.7422 417.121 25.1875 417.121 cv
27.0781 417.121 28.4414 417.676 29.2773 418.785 cv
29.8008 419.488 30.0547 420.246 30.0391 421.059 cv
28.0469 421.059 li
28.0078 420.582 27.8398 420.148 27.543 419.758 cv
27.0586 419.203 26.2188 418.926 25.0234 418.926 cv
24.2266 418.926 23.623 419.078 23.2129 419.383 cv
22.8027 419.688 22.5977 420.09 22.5977 420.59 cv
22.5977 421.137 22.8672 421.574 23.4063 421.902 cv
23.7188 422.098 24.1797 422.27 24.7891 422.418 cv
26.1836 422.758 li
27.6992 423.125 28.7148 423.48 29.2305 423.824 cv
30.0508 424.363 30.4609 425.211 30.4609 426.367 cv
30.4609 427.484 30.0371 428.449 29.1895 429.262 cv
28.3418 430.074 27.0508 430.48 25.3164 430.48 cv
23.4492 430.48 22.127 430.057 21.3496 429.209 cv
20.5723 428.361 20.1563 427.313 20.1016 426.063 cv
22.1289 426.063 li
cp
40.6914 417.795 mo
41.5273 418.213 42.1641 418.754 42.6016 419.418 cv
43.0234 420.051 43.3047 420.789 43.4453 421.633 cv
43.5703 422.211 43.6328 423.133 43.6328 424.398 cv
34.4336 424.398 li
34.4727 425.672 34.7734 426.693 35.3359 427.463 cv
35.8984 428.232 36.7695 428.617 37.9492 428.617 cv
39.0508 428.617 39.9297 428.254 40.5859 427.527 cv
40.9609 427.105 41.2266 426.617 41.3828 426.063 cv
43.457 426.063 li
43.4023 426.523 43.2207 427.037 42.9121 427.604 cv
42.6035 428.17 42.2578 428.633 41.875 428.992 cv
41.2344 429.617 40.4414 430.039 39.4961 430.258 cv
38.9883 430.383 38.4141 430.445 37.7734 430.445 cv
36.2109 430.445 34.8867 429.877 33.8008 428.74 cv
32.7148 427.604 32.1719 426.012 32.1719 423.965 cv
32.1719 421.949 32.7188 420.313 33.8125 419.055 cv
34.9063 417.797 36.3359 417.168 38.1016 417.168 cv
38.9922 417.168 39.8555 417.377 40.6914 417.795 cv
cp
41.4648 422.723 mo
41.3789 421.809 41.1797 421.078 40.8672 420.531 cv
40.2891 419.516 39.3242 419.008 37.9727 419.008 cv
37.0039 419.008 36.1914 419.357 35.5352 420.057 cv
34.8789 420.756 34.5313 421.645 34.4922 422.723 cv
41.4648 422.723 li
cp
46.2773 417.449 mo
48.2813 417.449 li
48.2813 419.617 li
48.4453 419.195 48.8477 418.682 49.4883 418.076 cv
50.1289 417.471 50.8672 417.168 51.7031 417.168 cv
51.7422 417.168 51.8086 417.172 51.9023 417.18 cv
51.9961 417.188 52.1563 417.203 52.3828 417.227 cv
52.3828 419.453 li
52.2578 419.43 52.1426 419.414 52.0371 419.406 cv
51.9316 419.398 51.8164 419.395 51.6914 419.395 cv
50.6289 419.395 49.8125 419.736 49.2422 420.42 cv
48.6719 421.104 48.3867 421.891 48.3867 422.781 cv
48.3867 430 li
46.2773 430 li
46.2773 417.449 li
cp
0 0 0 1 cmyk
f
564.051 339.785 mo
571.797 339.785 li
573.328 339.785 574.563 340.217 575.5 341.08 cv
576.438 341.943 576.906 343.156 576.906 344.719 cv
576.906 346.063 576.488 347.232 575.652 348.229 cv
574.816 349.225 573.531 349.723 571.797 349.723 cv
566.383 349.723 li
566.383 357 li
564.051 357 li
564.051 339.785 li
cp
573.145 342.152 mo
572.629 341.91 571.922 341.789 571.023 341.789 cv
566.383 341.789 li
566.383 347.754 li
571.023 347.754 li
572.07 347.754 572.92 347.531 573.572 347.086 cv
574.225 346.641 574.551 345.855 574.551 344.73 cv
574.551 343.465 574.082 342.605 573.145 342.152 cv
cp
578.996 349.23 mo
584.879 349.23 li
584.879 351.398 li
578.996 351.398 li
578.996 349.23 li
cp
600.141 341.039 mo
601.344 342.188 602.012 343.492 602.145 344.953 cv
599.871 344.953 li
599.613 343.844 599.1 342.965 598.33 342.316 cv
597.561 341.668 596.48 341.344 595.09 341.344 cv
593.395 341.344 592.025 341.939 590.982 343.131 cv
589.939 344.322 589.418 346.148 589.418 348.609 cv
589.418 350.625 589.889 352.26 590.83 353.514 cv
591.771 354.768 593.176 355.395 595.043 355.395 cv
596.762 355.395 598.07 354.734 598.969 353.414 cv
599.445 352.719 599.801 351.805 600.035 350.672 cv
602.309 350.672 li
602.105 352.484 601.434 354.004 600.293 355.23 cv
598.926 356.707 597.082 357.445 594.762 357.445 cv
592.762 357.445 591.082 356.84 589.723 355.629 cv
587.934 354.027 587.039 351.555 587.039 348.211 cv
587.039 345.672 587.711 343.59 589.055 341.965 cv
590.508 340.199 592.512 339.316 595.066 339.316 cv
597.246 339.316 598.938 339.891 600.141 341.039 cv
cp
606.664 351.445 mo
606.719 352.422 606.949 353.215 607.355 353.824 cv
608.129 354.965 609.492 355.535 611.445 355.535 cv
612.32 355.535 613.117 355.41 613.836 355.16 cv
615.227 354.676 615.922 353.809 615.922 352.559 cv
615.922 351.621 615.629 350.953 615.043 350.555 cv
614.449 350.164 613.52 349.824 612.254 349.535 cv
609.922 349.008 li
608.398 348.664 607.32 348.285 606.688 347.871 cv
605.594 347.152 605.047 346.078 605.047 344.648 cv
605.047 343.102 605.582 341.832 606.652 340.84 cv
607.723 339.848 609.238 339.352 611.199 339.352 cv
613.004 339.352 614.537 339.787 615.799 340.658 cv
617.061 341.529 617.691 342.922 617.691 344.836 cv
615.5 344.836 li
615.383 343.914 615.133 343.207 614.75 342.715 cv
614.039 341.816 612.832 341.367 611.129 341.367 cv
609.754 341.367 608.766 341.656 608.164 342.234 cv
607.563 342.813 607.262 343.484 607.262 344.25 cv
607.262 345.094 607.613 345.711 608.316 346.102 cv
608.777 346.352 609.82 346.664 611.445 347.039 cv
613.859 347.59 li
615.023 347.855 615.922 348.219 616.555 348.68 cv
617.648 349.484 618.195 350.652 618.195 352.184 cv
618.195 354.09 617.502 355.453 616.115 356.273 cv
614.729 357.094 613.117 357.504 611.281 357.504 cv
609.141 357.504 607.465 356.957 606.254 355.863 cv
605.043 354.777 604.449 353.305 604.473 351.445 cv
606.664 351.445 li
cp
633.469 341.039 mo
634.672 342.188 635.34 343.492 635.473 344.953 cv
633.199 344.953 li
632.941 343.844 632.428 342.965 631.658 342.316 cv
630.889 341.668 629.809 341.344 628.418 341.344 cv
626.723 341.344 625.354 341.939 624.311 343.131 cv
623.268 344.322 622.746 346.148 622.746 348.609 cv
622.746 350.625 623.217 352.26 624.158 353.514 cv
625.1 354.768 626.504 355.395 628.371 355.395 cv
630.09 355.395 631.398 354.734 632.297 353.414 cv
632.773 352.719 633.129 351.805 633.363 350.672 cv
635.637 350.672 li
635.434 352.484 634.762 354.004 633.621 355.23 cv
632.254 356.707 630.41 357.445 628.09 357.445 cv
626.09 357.445 624.41 356.84 623.051 355.629 cv
621.262 354.027 620.367 351.555 620.367 348.211 cv
620.367 345.672 621.039 343.59 622.383 341.965 cv
623.836 340.199 625.84 339.316 628.395 339.316 cv
630.574 339.316 632.266 339.891 633.469 341.039 cv
cp
638.691 339.785 mo
650.633 339.785 li
650.633 341.895 li
641.023 341.895 li
641.023 347.121 li
649.473 347.121 li
649.473 349.172 li
641.023 349.172 li
641.023 357 li
638.691 357 li
638.691 339.785 li
cp
f
845.352 351.445 mo
845.406 352.422 845.637 353.215 846.043 353.824 cv
846.816 354.965 848.18 355.535 850.133 355.535 cv
851.008 355.535 851.805 355.41 852.523 355.16 cv
853.914 354.676 854.609 353.809 854.609 352.559 cv
854.609 351.621 854.316 350.953 853.73 350.555 cv
853.137 350.164 852.207 349.824 850.941 349.535 cv
848.609 349.008 li
847.086 348.664 846.008 348.285 845.375 347.871 cv
844.281 347.152 843.734 346.078 843.734 344.648 cv
843.734 343.102 844.27 341.832 845.34 340.84 cv
846.41 339.848 847.926 339.352 849.887 339.352 cv
851.691 339.352 853.225 339.787 854.486 340.658 cv
855.748 341.529 856.379 342.922 856.379 344.836 cv
854.188 344.836 li
854.07 343.914 853.82 343.207 853.438 342.715 cv
852.727 341.816 851.52 341.367 849.816 341.367 cv
848.441 341.367 847.453 341.656 846.852 342.234 cv
846.25 342.813 845.949 343.484 845.949 344.25 cv
845.949 345.094 846.301 345.711 847.004 346.102 cv
847.465 346.352 848.508 346.664 850.133 347.039 cv
852.547 347.59 li
853.711 347.855 854.609 348.219 855.242 348.68 cv
856.336 349.484 856.883 350.652 856.883 352.184 cv
856.883 354.09 856.189 355.453 854.803 356.273 cv
853.416 357.094 851.805 357.504 849.969 357.504 cv
847.828 357.504 846.152 356.957 844.941 355.863 cv
843.73 354.777 843.137 353.305 843.16 351.445 cv
845.352 351.445 li
cp
858.996 349.23 mo
864.879 349.23 li
864.879 351.398 li
858.996 351.398 li
858.996 349.23 li
cp
880.141 341.039 mo
881.344 342.188 882.012 343.492 882.145 344.953 cv
879.871 344.953 li
879.613 343.844 879.1 342.965 878.33 342.316 cv
877.561 341.668 876.48 341.344 875.09 341.344 cv
873.395 341.344 872.025 341.939 870.982 343.131 cv
869.939 344.322 869.418 346.148 869.418 348.609 cv
869.418 350.625 869.889 352.26 870.83 353.514 cv
871.771 354.768 873.176 355.395 875.043 355.395 cv
876.762 355.395 878.07 354.734 878.969 353.414 cv
879.445 352.719 879.801 351.805 880.035 350.672 cv
882.309 350.672 li
882.105 352.484 881.434 354.004 880.293 355.23 cv
878.926 356.707 877.082 357.445 874.762 357.445 cv
872.762 357.445 871.082 356.84 869.723 355.629 cv
867.934 354.027 867.039 351.555 867.039 348.211 cv
867.039 345.672 867.711 343.59 869.055 341.965 cv
870.508 340.199 872.512 339.316 875.066 339.316 cv
877.246 339.316 878.938 339.891 880.141 341.039 cv
cp
886.664 351.445 mo
886.719 352.422 886.949 353.215 887.355 353.824 cv
888.129 354.965 889.492 355.535 891.445 355.535 cv
892.32 355.535 893.117 355.41 893.836 355.16 cv
895.227 354.676 895.922 353.809 895.922 352.559 cv
895.922 351.621 895.629 350.953 895.043 350.555 cv
894.449 350.164 893.52 349.824 892.254 349.535 cv
889.922 349.008 li
888.398 348.664 887.32 348.285 886.688 347.871 cv
885.594 347.152 885.047 346.078 885.047 344.648 cv
885.047 343.102 885.582 341.832 886.652 340.84 cv
887.723 339.848 889.238 339.352 891.199 339.352 cv
893.004 339.352 894.537 339.787 895.799 340.658 cv
897.061 341.529 897.691 342.922 897.691 344.836 cv
895.5 344.836 li
895.383 343.914 895.133 343.207 894.75 342.715 cv
894.039 341.816 892.832 341.367 891.129 341.367 cv
889.754 341.367 888.766 341.656 888.164 342.234 cv
887.563 342.813 887.262 343.484 887.262 344.25 cv
887.262 345.094 887.613 345.711 888.316 346.102 cv
888.777 346.352 889.82 346.664 891.445 347.039 cv
893.859 347.59 li
895.023 347.855 895.922 348.219 896.555 348.68 cv
897.648 349.484 898.195 350.652 898.195 352.184 cv
898.195 354.09 897.502 355.453 896.115 356.273 cv
894.729 357.094 893.117 357.504 891.281 357.504 cv
889.141 357.504 887.465 356.957 886.254 355.863 cv
885.043 354.777 884.449 353.305 884.473 351.445 cv
886.664 351.445 li
cp
913.469 341.039 mo
914.672 342.188 915.34 343.492 915.473 344.953 cv
913.199 344.953 li
912.941 343.844 912.428 342.965 911.658 342.316 cv
910.889 341.668 909.809 341.344 908.418 341.344 cv
906.723 341.344 905.354 341.939 904.311 343.131 cv
903.268 344.322 902.746 346.148 902.746 348.609 cv
902.746 350.625 903.217 352.26 904.158 353.514 cv
905.1 354.768 906.504 355.395 908.371 355.395 cv
910.09 355.395 911.398 354.734 912.297 353.414 cv
912.773 352.719 913.129 351.805 913.363 350.672 cv
915.637 350.672 li
915.434 352.484 914.762 354.004 913.621 355.23 cv
912.254 356.707 910.41 357.445 908.09 357.445 cv
906.09 357.445 904.41 356.84 903.051 355.629 cv
901.262 354.027 900.367 351.555 900.367 348.211 cv
900.367 345.672 901.039 343.59 902.383 341.965 cv
903.836 340.199 905.84 339.316 908.395 339.316 cv
910.574 339.316 912.266 339.891 913.469 341.039 cv
cp
918.691 339.785 mo
930.633 339.785 li
930.633 341.895 li
921.023 341.895 li
921.023 347.121 li
929.473 347.121 li
929.473 349.172 li
921.023 349.172 li
921.023 357 li
918.691 357 li
918.691 339.785 li
cp
f
908.887 36.7852 mo
911.242 36.7852 li
911.242 43.8984 li
920.195 43.8984 li
920.195 36.7852 li
922.551 36.7852 li
922.551 54 li
920.195 54 li
920.195 45.9492 li
911.242 45.9492 li
911.242 54 li
908.887 54 li
908.887 36.7852 li
cp
927.68 48.4453 mo
927.734 49.4219 927.965 50.2148 928.371 50.8242 cv
929.145 51.9648 930.508 52.5352 932.461 52.5352 cv
933.336 52.5352 934.133 52.4102 934.852 52.1602 cv
936.242 51.6758 936.938 50.8086 936.938 49.5586 cv
936.938 48.6211 936.645 47.9531 936.059 47.5547 cv
935.465 47.1641 934.535 46.8242 933.27 46.5352 cv
930.938 46.0078 li
929.414 45.6641 928.336 45.2852 927.703 44.8711 cv
926.609 44.1523 926.063 43.0781 926.063 41.6484 cv
926.063 40.1016 926.598 38.832 927.668 37.8398 cv
928.738 36.8477 930.254 36.3516 932.215 36.3516 cv
934.02 36.3516 935.553 36.7871 936.814 37.6582 cv
938.076 38.5293 938.707 39.9219 938.707 41.8359 cv
936.516 41.8359 li
936.398 40.9141 936.148 40.207 935.766 39.7148 cv
935.055 38.8164 933.848 38.3672 932.145 38.3672 cv
930.77 38.3672 929.781 38.6563 929.18 39.2344 cv
928.578 39.8125 928.277 40.4844 928.277 41.25 cv
928.277 42.0938 928.629 42.7109 929.332 43.1016 cv
929.793 43.3516 930.836 43.6641 932.461 44.0391 cv
934.875 44.5898 li
936.039 44.8555 936.938 45.2188 937.57 45.6797 cv
938.664 46.4844 939.211 47.6523 939.211 49.1836 cv
939.211 51.0898 938.518 52.4531 937.131 53.2734 cv
935.744 54.0938 934.133 54.5039 932.297 54.5039 cv
930.156 54.5039 928.48 53.957 927.27 52.8633 cv
926.059 51.7773 925.465 50.3047 925.488 48.4453 cv
927.68 48.4453 li
cp
943.68 48.4453 mo
943.734 49.4219 943.965 50.2148 944.371 50.8242 cv
945.145 51.9648 946.508 52.5352 948.461 52.5352 cv
949.336 52.5352 950.133 52.4102 950.852 52.1602 cv
952.242 51.6758 952.938 50.8086 952.938 49.5586 cv
952.938 48.6211 952.645 47.9531 952.059 47.5547 cv
951.465 47.1641 950.535 46.8242 949.27 46.5352 cv
946.938 46.0078 li
945.414 45.6641 944.336 45.2852 943.703 44.8711 cv
942.609 44.1523 942.063 43.0781 942.063 41.6484 cv
942.063 40.1016 942.598 38.832 943.668 37.8398 cv
944.738 36.8477 946.254 36.3516 948.215 36.3516 cv
950.02 36.3516 951.553 36.7871 952.814 37.6582 cv
954.076 38.5293 954.707 39.9219 954.707 41.8359 cv
952.516 41.8359 li
952.398 40.9141 952.148 40.207 951.766 39.7148 cv
951.055 38.8164 949.848 38.3672 948.145 38.3672 cv
946.77 38.3672 945.781 38.6563 945.18 39.2344 cv
944.578 39.8125 944.277 40.4844 944.277 41.25 cv
944.277 42.0938 944.629 42.7109 945.332 43.1016 cv
945.793 43.3516 946.836 43.6641 948.461 44.0391 cv
950.875 44.5898 li
952.039 44.8555 952.938 45.2188 953.57 45.6797 cv
954.664 46.4844 955.211 47.6523 955.211 49.1836 cv
955.211 51.0898 954.518 52.4531 953.131 53.2734 cv
951.744 54.0938 950.133 54.5039 948.297 54.5039 cv
946.156 54.5039 944.48 53.957 943.27 52.8633 cv
942.059 51.7773 941.465 50.3047 941.488 48.4453 cv
943.68 48.4453 li
cp
f
584.355 66.7852 mo
586.711 66.7852 li
586.711 84 li
584.355 84 li
584.355 66.7852 li
cp
589.652 76.2305 mo
595.535 76.2305 li
595.535 78.3984 li
589.652 78.3984 li
589.652 76.2305 li
cp
610.797 68.0391 mo
612 69.1875 612.668 70.4922 612.801 71.9531 cv
610.527 71.9531 li
610.27 70.8438 609.756 69.9648 608.986 69.3164 cv
608.217 68.668 607.137 68.3438 605.746 68.3438 cv
604.051 68.3438 602.682 68.9395 601.639 70.1309 cv
600.596 71.3223 600.074 73.1484 600.074 75.6094 cv
600.074 77.625 600.545 79.2598 601.486 80.5137 cv
602.428 81.7676 603.832 82.3945 605.699 82.3945 cv
607.418 82.3945 608.727 81.7344 609.625 80.4141 cv
610.102 79.7188 610.457 78.8047 610.691 77.6719 cv
612.965 77.6719 li
612.762 79.4844 612.09 81.0039 610.949 82.2305 cv
609.582 83.707 607.738 84.4453 605.418 84.4453 cv
603.418 84.4453 601.738 83.8398 600.379 82.6289 cv
598.59 81.0273 597.695 78.5547 597.695 75.2109 cv
597.695 72.6719 598.367 70.5898 599.711 68.9648 cv
601.164 67.1992 603.168 66.3164 605.723 66.3164 cv
607.902 66.3164 609.594 66.8906 610.797 68.0391 cv
cp
617.32 78.4453 mo
617.375 79.4219 617.605 80.2148 618.012 80.8242 cv
618.785 81.9648 620.148 82.5352 622.102 82.5352 cv
622.977 82.5352 623.773 82.4102 624.492 82.1602 cv
625.883 81.6758 626.578 80.8086 626.578 79.5586 cv
626.578 78.6211 626.285 77.9531 625.699 77.5547 cv
625.105 77.1641 624.176 76.8242 622.91 76.5352 cv
620.578 76.0078 li
619.055 75.6641 617.977 75.2852 617.344 74.8711 cv
616.25 74.1523 615.703 73.0781 615.703 71.6484 cv
615.703 70.1016 616.238 68.832 617.309 67.8398 cv
618.379 66.8477 619.895 66.3516 621.855 66.3516 cv
623.66 66.3516 625.193 66.7871 626.455 67.6582 cv
627.717 68.5293 628.348 69.9219 628.348 71.8359 cv
626.156 71.8359 li
626.039 70.9141 625.789 70.207 625.406 69.7148 cv
624.695 68.8164 623.488 68.3672 621.785 68.3672 cv
620.41 68.3672 619.422 68.6563 618.82 69.2344 cv
618.219 69.8125 617.918 70.4844 617.918 71.25 cv
617.918 72.0938 618.27 72.7109 618.973 73.1016 cv
619.434 73.3516 620.477 73.6641 622.102 74.0391 cv
624.516 74.5898 li
625.68 74.8555 626.578 75.2188 627.211 75.6797 cv
628.305 76.4844 628.852 77.6523 628.852 79.1836 cv
628.852 81.0898 628.158 82.4531 626.771 83.2734 cv
625.385 84.0938 623.773 84.5039 621.938 84.5039 cv
619.797 84.5039 618.121 83.957 616.91 82.8633 cv
615.699 81.7773 615.105 80.3047 615.129 78.4453 cv
617.32 78.4453 li
cp
644.125 68.0391 mo
645.328 69.1875 645.996 70.4922 646.129 71.9531 cv
643.855 71.9531 li
643.598 70.8438 643.084 69.9648 642.314 69.3164 cv
641.545 68.668 640.465 68.3438 639.074 68.3438 cv
637.379 68.3438 636.01 68.9395 634.967 70.1309 cv
633.924 71.3223 633.402 73.1484 633.402 75.6094 cv
633.402 77.625 633.873 79.2598 634.814 80.5137 cv
635.756 81.7676 637.16 82.3945 639.027 82.3945 cv
640.746 82.3945 642.055 81.7344 642.953 80.4141 cv
643.43 79.7188 643.785 78.8047 644.02 77.6719 cv
646.293 77.6719 li
646.09 79.4844 645.418 81.0039 644.277 82.2305 cv
642.91 83.707 641.066 84.4453 638.746 84.4453 cv
636.746 84.4453 635.066 83.8398 633.707 82.6289 cv
631.918 81.0273 631.023 78.5547 631.023 75.2109 cv
631.023 72.6719 631.695 70.5898 633.039 68.9648 cv
634.492 67.1992 636.496 66.3164 639.051 66.3164 cv
641.23 66.3164 642.922 66.8906 644.125 68.0391 cv
cp
649.348 66.7852 mo
661.289 66.7852 li
661.289 68.8945 li
651.68 68.8945 li
651.68 74.1211 li
660.129 74.1211 li
660.129 76.1719 li
651.68 76.1719 li
651.68 84 li
649.348 84 li
649.348 66.7852 li
cp
f
589.102 94.5039 mo
587.875 96.8867 587.078 98.6406 586.711 99.7656 cv
586.156 101.477 585.879 103.453 585.879 105.695 cv
585.879 107.961 586.195 110.031 586.828 111.906 cv
587.219 113.063 587.988 114.727 589.137 116.898 cv
587.719 116.898 li
586.578 115.117 585.871 113.98 585.598 113.488 cv
585.324 112.996 585.027 112.328 584.707 111.484 cv
584.27 110.328 583.965 109.094 583.793 107.781 cv
583.707 107.102 583.664 106.453 583.664 105.836 cv
583.664 103.523 584.027 101.465 584.754 99.6602 cv
585.215 98.5117 586.176 96.793 587.637 94.5039 cv
589.102 94.5039 li
cp
605.992 97.2461 mo
607.133 98.7695 607.703 100.719 607.703 103.094 cv
607.703 105.664 607.051 107.801 605.746 109.504 cv
604.215 111.504 602.031 112.504 599.195 112.504 cv
596.547 112.504 594.465 111.629 592.949 109.879 cv
591.598 108.191 590.922 106.059 590.922 103.48 cv
590.922 101.152 591.5 99.1602 592.656 97.5039 cv
594.141 95.3789 596.336 94.3164 599.242 94.3164 cv
602.281 94.3164 604.531 95.293 605.992 97.2461 cv
cp
603.936 108.209 mo
604.854 106.736 605.313 105.043 605.313 103.129 cv
605.313 101.105 604.783 99.4766 603.725 98.2422 cv
602.666 97.0078 601.219 96.3906 599.383 96.3906 cv
597.602 96.3906 596.148 97.002 595.023 98.2246 cv
593.898 99.4473 593.336 101.25 593.336 103.633 cv
593.336 105.539 593.818 107.146 594.783 108.455 cv
595.748 109.764 597.313 110.418 599.477 110.418 cv
601.531 110.418 603.018 109.682 603.936 108.209 cv
cp
617.939 109.346 mo
618.592 108.521 618.918 107.289 618.918 105.648 cv
618.918 104.648 618.773 103.789 618.484 103.07 cv
617.938 101.688 616.938 100.996 615.484 100.996 cv
614.023 100.996 613.023 101.727 612.484 103.188 cv
612.195 103.969 612.051 104.961 612.051 106.164 cv
612.051 107.133 612.195 107.957 612.484 108.637 cv
613.031 109.934 614.031 110.582 615.484 110.582 cv
616.469 110.582 617.287 110.17 617.939 109.346 cv
cp
610.023 99.5078 mo
612.074 99.5078 li
612.074 101.172 li
612.496 100.602 612.957 100.16 613.457 99.8477 cv
614.168 99.3789 615.004 99.1445 615.965 99.1445 cv
617.387 99.1445 618.594 99.6895 619.586 100.779 cv
620.578 101.869 621.074 103.426 621.074 105.449 cv
621.074 108.184 620.359 110.137 618.93 111.309 cv
618.023 112.051 616.969 112.422 615.766 112.422 cv
614.82 112.422 614.027 112.215 613.387 111.801 cv
613.012 111.566 612.594 111.164 612.133 110.594 cv
612.133 117.004 li
610.023 117.004 li
610.023 99.5078 li
cp
623.953 95.9453 mo
626.086 95.9453 li
626.086 99.4492 li
628.09 99.4492 li
628.09 101.172 li
626.086 101.172 li
626.086 109.363 li
626.086 109.801 626.234 110.094 626.531 110.242 cv
626.695 110.328 626.969 110.371 627.352 110.371 cv
627.453 110.371 627.563 110.369 627.68 110.365 cv
627.797 110.361 627.934 110.352 628.09 110.336 cv
628.09 112 li
627.848 112.07 627.596 112.121 627.334 112.152 cv
627.072 112.184 626.789 112.199 626.484 112.199 cv
625.5 112.199 624.832 111.947 624.48 111.443 cv
624.129 110.939 623.953 110.285 623.953 109.48 cv
623.953 101.172 li
622.254 101.172 li
622.254 99.4492 li
623.953 99.4492 li
623.953 95.9453 li
cp
630.188 99.5078 mo
632.332 99.5078 li
632.332 112 li
630.188 112 li
630.188 99.5078 li
cp
630.188 94.7852 mo
632.332 94.7852 li
632.332 97.1758 li
630.188 97.1758 li
630.188 94.7852 li
cp
643.373 109.053 mo
643.893 107.994 644.152 106.816 644.152 105.52 cv
644.152 104.348 643.965 103.395 643.59 102.66 cv
642.996 101.504 641.973 100.926 640.52 100.926 cv
639.23 100.926 638.293 101.418 637.707 102.402 cv
637.121 103.387 636.828 104.574 636.828 105.965 cv
636.828 107.301 637.121 108.414 637.707 109.305 cv
638.293 110.195 639.223 110.641 640.496 110.641 cv
641.895 110.641 642.854 110.111 643.373 109.053 cv
cp
644.68 100.703 mo
645.797 101.781 646.355 103.367 646.355 105.461 cv
646.355 107.484 645.863 109.156 644.879 110.477 cv
643.895 111.797 642.367 112.457 640.297 112.457 cv
638.57 112.457 637.199 111.873 636.184 110.705 cv
635.168 109.537 634.66 107.969 634.66 106 cv
634.66 103.891 635.195 102.211 636.266 100.961 cv
637.336 99.7109 638.773 99.0859 640.578 99.0859 cv
642.195 99.0859 643.563 99.625 644.68 100.703 cv
cp
648.859 99.4492 mo
650.863 99.4492 li
650.863 101.23 li
651.457 100.496 652.086 99.9688 652.75 99.6484 cv
653.414 99.3281 654.152 99.168 654.965 99.168 cv
656.746 99.168 657.949 99.7891 658.574 101.031 cv
658.918 101.711 659.09 102.684 659.09 103.949 cv
659.09 112 li
656.945 112 li
656.945 104.09 li
656.945 103.324 656.832 102.707 656.605 102.238 cv
656.23 101.457 655.551 101.066 654.566 101.066 cv
654.066 101.066 653.656 101.117 653.336 101.219 cv
652.758 101.391 652.25 101.734 651.813 102.25 cv
651.461 102.664 651.232 103.092 651.127 103.533 cv
651.021 103.975 650.969 104.605 650.969 105.426 cv
650.969 112 li
648.859 112 li
648.859 99.4492 li
cp
664.488 110.102 mo
664.934 110.453 665.461 110.629 666.07 110.629 cv
666.813 110.629 667.531 110.457 668.227 110.113 cv
669.398 109.543 669.984 108.609 669.984 107.313 cv
669.984 105.613 li
669.727 105.777 669.395 105.914 668.988 106.023 cv
668.582 106.133 668.184 106.211 667.793 106.258 cv
666.516 106.422 li
665.75 106.523 665.176 106.684 664.793 106.902 cv
664.145 107.27 663.82 107.855 663.82 108.66 cv
663.82 109.27 664.043 109.75 664.488 110.102 cv
cp
668.93 104.395 mo
669.414 104.332 669.738 104.129 669.902 103.785 cv
669.996 103.598 670.043 103.328 670.043 102.977 cv
670.043 102.258 669.787 101.736 669.275 101.412 cv
668.764 101.088 668.031 100.926 667.078 100.926 cv
665.977 100.926 665.195 101.223 664.734 101.816 cv
664.477 102.145 664.309 102.633 664.23 103.281 cv
662.262 103.281 li
662.301 101.734 662.803 100.658 663.768 100.053 cv
664.732 99.4473 665.852 99.1445 667.125 99.1445 cv
668.602 99.1445 669.801 99.4258 670.723 99.9883 cv
671.637 100.551 672.094 101.426 672.094 102.613 cv
672.094 109.844 li
672.094 110.063 672.139 110.238 672.229 110.371 cv
672.318 110.504 672.508 110.57 672.797 110.57 cv
672.891 110.57 672.996 110.564 673.113 110.553 cv
673.23 110.541 673.355 110.523 673.488 110.5 cv
673.488 112.059 li
673.16 112.152 672.91 112.211 672.738 112.234 cv
672.566 112.258 672.332 112.27 672.035 112.27 cv
671.309 112.27 670.781 112.012 670.453 111.496 cv
670.281 111.223 670.16 110.836 670.09 110.336 cv
669.66 110.898 669.043 111.387 668.238 111.801 cv
667.434 112.215 666.547 112.422 665.578 112.422 cv
664.414 112.422 663.463 112.068 662.725 111.361 cv
661.986 110.654 661.617 109.77 661.617 108.707 cv
661.617 107.543 661.98 106.641 662.707 106 cv
663.434 105.359 664.387 104.965 665.566 104.816 cv
668.93 104.395 li
cp
675.605 94.7852 mo
677.715 94.7852 li
677.715 112 li
675.605 112 li
675.605 94.7852 li
cp
680.16 116.898 mo
681.402 114.477 682.203 112.711 682.563 111.602 cv
683.109 109.922 683.383 107.953 683.383 105.695 cv
683.383 103.438 683.066 101.371 682.434 99.4961 cv
682.043 98.3398 681.273 96.6758 680.125 94.5039 cv
681.543 94.5039 li
682.746 96.4258 683.475 97.6113 683.729 98.0605 cv
683.982 98.5098 684.258 99.1289 684.555 99.918 cv
684.93 100.895 685.197 101.859 685.357 102.813 cv
685.518 103.766 685.598 104.684 685.598 105.566 cv
685.598 107.879 685.23 109.941 684.496 111.754 cv
684.035 112.918 683.078 114.633 681.625 116.898 cv
680.16 116.898 li
cp
f
53.2308 355.08 mo
145.751 355.92 li
145.769 353.92 li
53.2492 353.08 li
53.2308 355.08 li
f
47.24 354.02 mo
55.27 350.09 li
53.24 354.08 li
55.2 358.09 li
47.24 354.02 li
cp
f
47.24 354.02 mo
55.27 350.09 li
53.24 354.08 li
55.2 358.09 li
47.24 354.02 li
cp
@
151.76 354.98 mo
143.73 358.91 li
145.76 354.92 li
143.8 350.91 li
151.76 354.98 li
f
151.76 354.98 mo
151.321 354.082 li
145.978 356.696 li
146.877 354.929 li
146.016 353.166 li
151.305 355.87 li
151.76 354.98 li
151.321 354.082 li
151.76 354.98 li
152.215 354.09 li
141.584 348.654 li
144.643 354.911 li
141.482 361.124 li
153.995 355 li
152.215 354.09 li
151.76 354.98 li
f
[6 6 ] 0 dsh
618.24 281 mo
839.76 281 li
.212253 .826078 .729854 .093019 cmyk
@
612.24 281 mo
620.24 277 li
618.24 281 li
620.24 285 li
612.24 281 li
cp
f
[] 0 dsh
612.24 281 mo
620.24 277 li
618.24 281 li
620.24 285 li
612.24 281 li
cp
@
845.76 281 mo
837.76 285 li
839.76 281 li
837.76 277 li
845.76 281 li
cp
f
845.76 281 mo
837.76 285 li
839.76 281 li
837.76 277 li
845.76 281 li
cp
@
850.5 241.5 mo
890.5 241.5 li
890.5 319.76 li
850.5 319.76 li
cp
0 0 0 .226719 cmyk
f
1 lw
850.5 241.5 mo
890.5 241.5 li
890.5 319.76 li
850.5 319.76 li
850.5 241.5 li
cp
0 0 0 1 cmyk
@
852.32 319.76 mo
888.68 319.76 li
888.68 321.5 li
852.32 321.5 li
cp
0 0 0 .226719 cmyk
f
852.32 319.76 mo
888.68 319.76 li
888.68 321.5 li
852.32 321.5 li
852.32 319.76 li
cp
0 0 0 1 cmyk
@
852.86 242.28 mo
887.4 242.28 li
887.4 318.63 li
852.86 318.63 li
cp
0 0 0 .0654307 cmyk
f
863.41 243.24 mo
876.69 243.24 li
876.69 243.76 li
863.41 243.76 li
cp
0 0 0 .226719 cmyk
f
863.41 243.24 mo
876.69 243.24 li
876.69 243.76 li
863.41 243.76 li
863.41 243.24 li
cp
0 0 0 .718471 cmyk
@
853.68 244.98 mo
886.41 244.98 li
886.41 251.07 li
853.68 251.07 li
cp
0 0 0 .226719 cmyk
f
853.68 244.98 mo
886.41 244.98 li
886.41 251.07 li
853.68 251.07 li
853.68 244.98 li
cp
0 0 0 .718471 cmyk
@
852.32 251.94 mo
888.68 251.94 li
888.68 254.55 li
852.32 254.55 li
cp
0 0 0 .226719 cmyk
f
851.59 272.81 mo
888.68 272.81 li
888.68 275.42 li
851.59 275.42 li
cp
f
855.04 257.15 mo
885.04 257.15 li
885.04 259.76 li
855.04 259.76 li
cp
f
855.04 262.37 mo
885.04 262.37 li
885.04 264.98 li
855.04 264.98 li
cp
f
854.14 277.15 mo
885.96 277.15 li
885.96 317.15 li
854.14 317.15 li
cp
f
854.14 277.15 mo
885.96 277.15 li
885.96 317.15 li
854.14 317.15 li
854.14 277.15 li
cp
0 0 0 .718471 cmyk
@
855.04 267.59 mo
885.04 267.59 li
885.04 270.2 li
855.04 270.2 li
cp
0 0 0 .226719 cmyk
f
2 lw
[6 6 ] 0 dsh
602.97 232.33 mo
690.03 149.67 li
.212253 .826078 .729854 .093019 cmyk
@
598.62 236.46 mo
601.67 228.05 li
602.97 232.33 li
607.18 233.85 li
598.62 236.46 li
cp
f
[] 0 dsh
598.62 236.46 mo
601.67 228.05 li
602.97 232.33 li
607.18 233.85 li
598.62 236.46 li
cp
@
694.38 145.54 mo
691.33 153.95 li
690.03 149.67 li
685.82 148.15 li
694.38 145.54 li
cp
f
694.38 145.54 mo
691.33 153.95 li
690.03 149.67 li
685.82 148.15 li
694.38 145.54 li
cp
@
[6 6 ] 0 dsh
748.56 148.97 mo
863.44 236.03 li
@
743.78 145.35 mo
752.57 146.99 li
748.56 148.97 li
747.74 153.37 li
743.78 145.35 li
cp
f
[] 0 dsh
743.78 145.35 mo
752.57 146.99 li
748.56 148.97 li
747.74 153.37 li
743.78 145.35 li
cp
@
868.22 239.65 mo
859.43 238.01 li
863.44 236.03 li
864.26 231.63 li
868.22 239.65 li
cp
f
868.22 239.65 mo
859.43 238.01 li
863.44 236.03 li
864.26 231.63 li
868.22 239.65 li
cp
@
[6 6 ] 0 dsh
869.9 89.24 mo
868.1 236.76 li
@
869.97 83.24 mo
873.87 91.28 li
869.9 89.24 li
865.88 91.19 li
869.97 83.24 li
cp
f
[] 0 dsh
869.97 83.24 mo
873.87 91.28 li
869.9 89.24 li
865.88 91.19 li
869.97 83.24 li
cp
@
868.03 242.76 mo
864.13 234.72 li
868.1 236.76 li
872.12 234.81 li
868.03 242.76 li
cp
f
868.03 242.76 mo
864.13 234.72 li
868.1 236.76 li
872.12 234.81 li
868.03 242.76 li
cp
@
409 434 mo
144 434 li
144 359.891 li
153.995 355 li
152.215 354.09 li
151.76 354.98 li
152.215 354.09 li
144 349.889 li
144 284 li
409 284 li
409 434 li
144 356.174 mo
144 355.904 li
144.137 355.905 li
144 356.174 li
144.151 353.905 mo
144 353.904 li
144 353.596 li
144.151 353.905 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 588 ]ct
[267 0 0 152 143 153 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 267 
/H 152 
/M[267 0 0 -152 0 152 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 267 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 267 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 267 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 267 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcP?A(^(-S',;<$)]TnA+X%sM*?6":)\s%q#Qq(,JcOm4#m(56#71\D$O[CA%13LP$O[:G"U,#1!Oi&\
!.k3&!.k3&!58FM":5MN'c.`,*$-4G+WqjI*#fe8((q&^"5X$0!3lM1!X&]4#mgqH$OltC$4I=N$OR(A
"U"l-lMuM:JcLB&JcLB&O8oOg$P=0m+!DjOr$D%_$R[8I-mL#`)\s(n".9.A!!!'*"pk\H%M00]nI5j6
$4@=N$kE^Q#mCC-!.k4D!!iT,"9\c,!<N;i!!iT*!<`H,"9S\2!.k47!!!&W!!!&7!.k4/!"8l7&K)W9
,U"H`+s\N),R#J?-6jo^r?DLj+W_C0#6E6QJcO4!$j?qI%hTEa&/,H^%h%h:%M9-a%M'*^&eYcg$O?k9
hZ/6._Z0Z;gAh3SkQ&9rJcLB&JcPBB&-WX`+WVXM*[`6X,:+]b-n=a6'.>"K,pXi],9\?U,Te6P+W_I1
"N:@m!9O7m!X]AL%h99]'+tfb%hT<`&Fg5D&IT'[%hT<`&J>Te&JPch((glUdK"k!f`23X!<<-#!!1jT
#6=f*!!*'"!T!g.!6bEC!Or,]!5\^K#8&%#-R'rc-7'ub-mpAk-RgD1,nq[Q-R1#g-mL)d-R^Jj+"&6W
*YJ\T!.k3Y!!WN2%1EdV&cN7H%1EaW$OmIQ$OZ>4$kEgZ$k<dX$4@4N$k<LM$kj0a%LE5p!.k3&!.k3&
!0I6k"VMk%,pjua.jHGi,pk&G-RgMk/1E%tnKo,"-7L5c-7C&b.Olkp-RC2g,UFZW-6=3@#IFJa!!*0-
!=f\?&I/aZ%1s*\%1iFJ":G_L%Lqn;(_72f%1WjS%M0'Z$k!FP&J5Wf%hoNc$j=BHJcPKE"9JW-!<V'W
!!2rs!!2]l!WiE(c2`FrJcLB&hZ+Mp$Q:39,:Frd-Rg;h-RU;k,pt)f-m9oa..AT'.3Buh,q(8n-RUAn
/M&A&.4H_r-70r^+W:ailMuM:dJt*b#7hFZ&.f?[$P3[V%1NdZ%M0-[&.8pVn.-KK&-rgY$P![U$OR:M
%1N[P#n.:W&/5]i&eG9Kp].u-JcPTH"T\T'!<<0"!!!&h!!WH(!<N6$!Vl]t!W`9%\,_*\JcLB&nGj.'
%j3#@+t+cd-S-_q-RpPm./bLr,UY#i-1<3%-7^Aj.4Q_q.kW2%-RpVt.k2qn-7:&`-6XTU&HpniJcOj3
%KZtN'bq>q&eGNa%h9*]rXT;F&.T0Z%hT<]&+L2P%Lj!X%M'$Y$k3^S%LNUR$4..N%hB?e',D8r&IAO(
!.k4&!!<6(!<Mop!!2lq"9AQ*!!2Ng"9AK&!<N0"!W`9%rW!!$!Wi)s!s&K*!VZSG!.k3&!5AL?#T=m8
-71,h.4P3Hq^;=hr?_IhnL+>bs!Rgps!Rgpr$MOn-n+sAr?qdr-RK`<PQ7uh#m:VI'G;#i&.T3K$3(P7
&H*4<'CcV5&H<@B&H<@B&Gm(8%f[(<&-<IQ"JGgl!!**%q#LErrrhZgJcLB&JcLc1$3hCr-7'lb-n-Sp
!%Rq!q^DCjr?hOjnL4Dds![mrs![mrq^DInq^VOnr$ML`#Kd$u!##>4!X]MN&J#Qi&J5Na$47(G&.ndP
r=]&BrtOu7rt58Drt58Dq%<91r=K)E$j5)]JcP?A!s&K+!r2ir!riGG!<3)s!!33&!os?5!.k3&!87D\
"ViI;.kE8%/1W;(r@@mtq^hUpr@7=dq^VUpq'c+hs!n%!r@A1*/M&D&)$L#R!0R<f!tPqS%hK3[%/p_7
%f[+;%K?pu&H*48&eGWe&.f<]%1N^S$O[CR'++i`!.k3Z!<3*"!mq""!.k3&!:0[m!u)k'.P2tu.Om.O
/c@4".f1dm/,q*h.JkUp.JYCh.K:mt/,Ch$.juei(Ba4.JcO[.$3CVN(Cq)d&.AsXrXJl;rt#,@q[NQ8
i=PYprt58Brt#,=r<rrB%M99e%KZV1JcO0u!!;rr!<N;:!<3*"!WN6"!<*"Y!.k3&!4i.F!>-P..4?br
/hJb/0IeY+.k<%t-n+U;nLFPiodg%ls"!mp%P0._/M8Y)0e4Y$-6s3)W;s%#'`eRL((_&i%1j']%1`dU
%M99e'G_JS%K$h3&cW@:&,d":&-!7A')`IQ&.f<]$O[@S'+u)o'FM5JT)\ilqZ$a"!<N9'n,V\Qq#U9m
rrMio"Te`-!rrA7!.k3&!/COW#9bHH-P7m]-87#%0.JJ,/M/M).OlkrnLj>^pFQ1ls"++!'.PI^.kE5'
/M8Y2-7g`"-n6Vf#MoH4!;QU#";):]&/#Zd'E/IK$k!RU%MBBg'GhSU%e1/,&H<::&H<CA'+kii&.f<]
%1NjU'GME#(`!ValMuM:li7(g!s88u"TeZ(!W`?!!:^*[!;urk!ri;q!!E?)!s8T#!!*H/p],mGJcGiP
!!0k8R/dWr'H\bQ0eb=8/L2kpr[\$tq^_[rq^MClk:?K^q^qats"41#s""$s!%7as#:_5]/1N:e!RLh*
!!rZ8'GD,j%LECW"q_Xa()@Stq%EQ>rtPDFitD(trt#&>&J>]k'c.Z"((h,b$4mOU'at-!!.k46!<3)E
!<3*"!ri;s!<3)Z!.k3&!.k44!#Z"\,q(2k0/#+;-nH_s.4H_r.k<)!.k<)!r@%Unq'tnbr@7armk"Jh
r@&"%-7^W'0J,"2""5E=#)3-1!"fDM(`O2(%1NUM',M8t&eYllq%<WBr>#2Cm1K:1rt>>Dr=Ju@q[ic<
rso&?rt5kX'c.Z$&e>Na$k!RZ&/>o_P5rK#rrMcmr;k=HquH`trrW3$q#LEqrr`,u!!/_mJcLB&ZN((.
'eCs80`Na).blW,/bpq%.kND)//J?"!2]_u!=BALr=8i>rtXc1aV"=^"VD@]&JPPm!13`d!W<#u!V-5B
!.k3&!.k1T!!!*A/MAgV1&ij*.]G!)0J+e,0InCOnGn.@nc/do%2KNhr=/c=rtVdNq%<oI&eP`j&J"sB
!.k44!!30$!W<#u!N,q2!.k3&!0I6k"skcK.k!)*0/"q1/1`EZ0)7()0./A*/LiG&#iYi;!!*09!u;Ua
&H*.>')rZF&dT3^',2&k'bU]=!.k4D!!!,u!<3(d!.k3&!.k4,!"KGe-n$W$0eb:90eY13/[[810DI.*
0J+n-1+b%)%%%%A!"K5M'bhH"((h,g%M99e'Z(IO&bm"F'G;&k((q6!#c.O=!!39*!rDut!QtIp!.k3&
!36)*!>d4:/M/M*0)I=%0'P%*0+'<d/het00JP.5(!Q`M!"&`7'c7`'(`!i"'E&RD'_W3H'+#Be'bq;q
'bhGlg&Q^)JcLB&JcLB&pAbR%+>#/q-S[/)/MAdU0`Nf20_m@//2&b.0Jb45/LrFS*<Llol2Uhc(&f!X
',hW&().Gp&JGfl'X8>K'Fkfk&ec#k',M5o'b_Ao!R(Oq!36)"!SII)!.k3-!!WKN/hf+61CGii/hJ_0
0JG490JKadq(N780.f(60/>.83\<'/!qZJE!;ca)!>$"['b_B!(Dmo&(&\gG'WD`T(DIN"',),o%ho`s
&HRI`JcPWI!<WUc!.k3&!7_&[![93K0J5+40eb(30/#"5^+o+3q(N:01G:C:0/>4</ho%3+TeYDa8cYM
&eu&n&f23!(D@Z$(!.-L'DW@Q&f),p'bhAs%gj3m(_QkY!4i.1!m1M_!!*0&r;Zfu_uPAhJcMMF!s9f"
2Z>Q51Arp,0E!U)1%m<$0Ej6g1,:*WhZ/oA$3CeS&.T6_&eYikq\B,ErtM^OnJ)9C'G1ok'G1B4!/1CS
!W`:Q!.k3&!.k4=!"/lO0ebF=1c.!E0erV\r@tK2q_7au#Ve%j1bpg?-3DNoV>q,.&fDMt%M99c&el#p
'c%SP'Wi)L&cNLG&HU\fQiI6i!!!$#n,SmW!!2?bJcLc1!!2foJcH8\!!=Q&1GUdF2)R3I1Getbs"XO/
s"go8nM(2#0/YUH2Zkln-Nf)'nc0("'c[r'%h]Eb&eYikSe_):#oX]m%h/p]'GU\5!8mkW!Moe^!!<B.
!sG+oJcLB&bQ&(Q+ttW)1c7'H2)I-G1\ig+1X@i*1(#Zf2)R?Q1c-g/!P8?H!!`N>*?#V.&J4mRrtNlr
`YAe"*"NPh%2BTo&B=dU!!!/N!4Mt."oe\O!.k3&!13`j*&'6,2)@)g1A*I'1n?E#2$,Ki*U`ud!!iuJ
()7Gp(`!ke(B#!J'`SsK(&\i?(((io()@Jo'GMB(%f?<Y!.k1P!!36#!!!(X!.k3a!3#r&'K%U%3B&ho
1]90/1]9012=iW-1]9*-2?Pfi0brUHS,`m()&O)+'G;2u()Hi`r>,>H!YZ4_U)"+R(`!l!&JGft()[JH
!07*[#5%tY!<30"!!*0'q>c*I!!.]PJcPHD&Ig3K2`*NR1GUX=0etL?1Ggra25iA.1^l?'1G^^=1G^dJ
0/F''!9aCh#T4<j$kF'c)]ASmrtt\Nr>#>H[283H$kX'h)'0h9(_7As)$lu;ec5[NXoRA[rrMus!<WV0
!.k3&!5\^I#;%Se3B]5Z2D?pB1,C^C2#T<12ZG_k1tFMR2%;N)1G^^=1G^pK1,(-^b5epM%L!gm&JPle
(D[i-)]KY4q\]8IrtFW4\J>Vd&K)N0*uGh-',VN+"P<^Q!!!*"!!**%mK!7fp&M/orrW&t"9\o/!!2-\
RfEEhkl?;8NrTRi/N>aK2D[-G1c@6LMDYVo4#/fS/cu**!!**7r>,DNrtp_2!#GVOr>5_S)\a,(&HRml
JcP*:!!1RLJcLB&T)\p62E1UnrA=O4n26ptrAOU3"ue+i00(p5n,SUO"Uu=a'G_J_)#G)2(B#'S)A3f!
(_mGW!/(=Q!<@]OqZ-WsM?&5.JcP*:$k>0R2`WcS1c.'I2`IQkjYd?$4#fAZ2Du,D!8[\Y#T"9l(B#*M
(]P5U(Z#u)(^:rt*"s&$#."<W!!!,-!6>-B!WW6%^AricJcN:\%0J7@2E3]U2`3HN2E3\L2mYFM2E!KN
2D[0K2_kKi!36))!ZVsm()@`(r>GVOjqas4%Moou(`=20()R`"(`!eekQ%.R!"7riOT>@]o`0RDJcLH(
!@'?$3&Wnu2ubf92ubn#3!)*#2ukr:2[DE#3''&Y3&`"B!;6Br&f;B#)A`2ert_(@pDEoGq\TSW()e,0
(`*r!fDr&SrrUdPT)\iljT'l4JcM&9%M:QS3AriW2`EWQ3&ir[rA^'%s#Kp8#rah%2E<`V1(jSC!!N]J
)&X5-!#PSPr>1S5r>5JOrYYtY)&F)+(DdnpNWAnU!WrN+Mu`,C!<N:k!.k3&!9!n_">`"q4$5D_rAag;
s#[MHi&Ufuq`,!C3B0&[2`Wf[2$C>fe,T^T(E"#,)&4+h)?1QR(V^g9)#kEP)#>*T)]0D0(`="h_Z7[V
!!0e6ZiC(,ciAXtJcMnQ#9Gf`4?,A_3W1r;3WD5(3M\YB3]8uW3&iiW3BA,E!2';r%2g$&'c.ed)?1QR
(@rB4)#Y<Z)]0J1)&X80()@GT!0R<^!V-5B!!3-#$&&A2!:g*i!g3QZ!!*6`r]C-@s#L$;s#L*@RlT^n
"ZSJ)5;NMu!3lM)!uCeNq&02Kiu,$<r>5,E!u)Lf"6]`\!!!&X!.k3;!!!&e!.k3.!!"&<49@T+3WM5>
3WD/?4Gu8r3X%N(5!1eMO9#1Y!"f#Eq&98MQl>f>r>>2G!u2Ih'V,6m!!!@k!8@JS!Wf;$iW&r]U&]cF
ec5^W1]9K:4T@MC3rM/?4MNtu48h2C5!D"e$,lnd!!*6Bq&02O`YlE,q\oYS(`XFtdK$o[!<E;E!2TYq
!oF!0!.k3F!"1&35!D+m4?P\e3]d4$s#fm7OZNb.3^5Yg3[a_'PlLn!*Z,ak)>tNP)2]=-)[$rj*ZPoS
!!*-(r;_ELn,NFqPQ6:8]`>A=":I:P5!Jp-s#^*?s#]7'UHJH9r]L9A&*a.l!!3?E)tP!J*:Ol4)Z1NW
*#TV1#PS4d!!!)d!.k1P!!*+S!.k3&!<)s&,<S(P5!;(-4T.GC4T@L14n(W349[l05!D7[T)eB]";;dr
)B/8fru@jSh&?M;)]BV8&?Glm!!!1q!6bED"Tc.6JcLB&b5_\M2*F/e4o7A?56!bF43Tk!4oIJI3]TDi
4[98%!58F8"!&@%oc*oNruKc3W>c$_*YfJ-)?f"!YlFe*"4R=:!!!)g!.k3&!1*Zn)*1#H4Ztni4$,Pe
rB19G4?>MdN'6nt#!+b26omRPOT5Uq+<DL@)B0Xo)uU]R*0(s4)Z:W[*uu.8'H.UM!;lft!<e5Zi;`i_
h>i--JcM_L"9C584@%ggP!0+95WLhh5<8i@!1Nrk!?WL,+mg8'*!.#s,6T50)B8d5!.k4B!<3+`!.k32
!"/o:%1j3i(E"&,(D?l^%1!%0!!Elo4?bfk52AF&5lWkD56)G$!!WE)#71_H&,d%C%h/jO"Te>t!t-A$
+JBe%*![B#,9n*F*=BCYo)Jsq!s8]2#6t/4"U5/7"9JVu!!!/&!5AO6!lb6%!;lou"8i6#!NZ9Q!8dba
"r&(.3'p/%6UsL5pd><P1bL*l$N^2+"=c]#84:QaWB^DKs#U-E!&3C4dJsXW#n.F`(`aA/)]0Lg)$V?+
(_dGb!W<!$'H7l*'\47o*![?!,9n'D*#7oB_uKc<li7%f!Vud!"TSN,"QKK6!.k3&!3ZA6";N4@5W_G$
4[MJ'8jkm58,5O`4ZG\g2E<`J*=`?:6:4%-rBPs"oK`FCs#^0F!!g"6&-<4Q)B]k>*#KJ.)'0Y0)B8Ji
"sP*4*[)^O#TO?[";r1!&Jg9Fk8agH)C-RH)BBh$huMF1"p"o9#71A6m/RRs!W`<'!XAf."T\Z+"Od@?
!!E<'!!!,g!6bEC!k85f!!!&r!5\^K#ot`a5<M+k76j715Xmjs5s[X.4V("R6:44)5X@h!6:4.*7n2l3
Kg>c-6TtZ;5s[k*)7ok]"VD_!+s%[@*#TS4+XA*J+sJ*'*t0,1)As_;+X/*J+<DX()u:P+*;(9U+<V^H
)B'-t!!!)V!;ulu!We)WiW&r]U&]cFOT5jl'eDI.3^,Yo7R0I177@GC4$>kq4Zu+,5S$:L6:O=15!M>"
5<qV#7mNe7cp7q)6U!\"5sn!j^&S07$ksU)+Wr!N,p43L)Aj>4*?HCK+!2^&+V,P0)B9hA+!D[J*#p"<
*#5Xs_&NY%+<DRB)B?j!o`,'t$O$^e!!!&3!3Q;%#M&m,!.k4-!#Pn`5t!k)6q'F05s.G!5!V2"5X[n#
5t4'65n6:O6U3k%6pNq"69[S%3RpEc62s=N5m'PE3<\jPd/Y!c%36E**$$";*?6"?+s8*O+WMRF)''h>
q&Kt`)As>0*$HCG*[DmR-ls_q*fhBB*;po\)&XLtrW&\n!s8Z-!TX64!;c`t!<E7[!.k3P!#Z1o4[qh+
84>m5779F05X7J!5smq)6q'L/pd><T6:aX869kfD69mn%5s.@rMaHSn#t.0J6:4+07R%RF!94%l"rJX/
*?6.@)]Kb<*$H@G*[N'1*r[5]*;CTW)]0On*=3f0+s/*R,9\<VdiY2(#ot$-*ZlIB)BoOV!7h,M"lB:^
"9J].e,YF-rW3'#qZ+_<!!Bh5JcNLb#RN1O5!qb-6q$i;rBp*As$-NKs$?ZPrBgNMs$-?IJj]2u#=LsH
6:OF//]@\s"W&:$+;u.<*$6:$+o`Ya*WI,L+9*Pb+o`Ya*<.,\*rd>^,)@?)*sWc*+!2C>*YuNkrrVin
rrM`lp]1<qN<%]5#6=i*!!33%!O)QU!/pm\![9fo5Q+"N7/fUM6iTRE6N9=N62s:M6iB@O6*EYn6iBCV
6:+.25rd!erW!?-&g&5;+X7pF*ZcCFq]Yt\ruCPOs!.Ofruh1[ruh=c]H=L&#9Fp0+W;7?):nlY!!30%
"8r6"!qcQn!p]jd!l4l3!<3/\!9=+[!h]OF!8%8V)F$GQ5Y"=4rBpNOrC-ZQnO<CCs$ZZQs$l$:NC4+C
7RTX77nc8X!!(1B%1=+#-mL)X(*XqG+Whg)*WI5[+RpNO,l\td)ZLiV)uh#L+G(^C+sJ$J+sIsF,9-p"
!;ur[!<33%!<3*"!rDtL!:0[e!<<4j!.k3a!9sOn%QHpK4@;D'7o2Q?6q$o@s$lrUnOEIEs$m#YrCHrY
s$kI+SOEfR7RTX883]]^mf;/D&Hraf+<i3Y-Q4-P+sA*O+!)L%+8mAQ+8mJb+8Ho5+-I]Q+X%mJ+sJ!H
)'KLf!71]H":Y,,!!2rsrrM-[rr`3"rrMEcJcPWI!!S5[JcN7[%O4A3779[;7n#m784Z6@rC6fUs$ZfS
nOEIIrCHrXs%!)[s$hf5l9u%J6q9a86q0X<8Ku@Y%Lj?t+<M^K*ZQCI*ZcCFq'#b\ruUeSrZD.]ruqC`
ruD%^ru_7]P9Ja*$6pc:*[)[K*ul7:`rQ,@mf<@iJcNdj!!9k7JcLK)!X:VR$VX2[9L;*>77fs?8c;0Z
7fPpW7fPpW7e'"K8H23[8H29[8H29]8%_="7LDRQ84Z0<7n6*B/(ajr!"8rC(*F\>,o[gI*$up/*rdA_
,6&nd+TEPR+TEM_+o`V`*W7,\*rdD*+K6Ij,9n6N+sJ-P)]]p[!9sOa!rN$#!<N<'n,WIi[K)Hj!!2Wj
JcLB&d/X[d2aU#,8P;HB7n#s:8Oc2J8,Z!W8cMEQ8H2<Z8,l!W7K5mX7drs#8.%dS84Z3>7n6?K36qR5
#9=p4+WqpK,9e<V*W@8[+o`\^+7UNS*<.5]+o`qi,l\td,5i[:+nQob,U=HR+X&$R*Z?BO!!*-(eH#UO
quHWprr\)XhZ*WWhuJ?/JcOd1";=$f84EMM$;!ZW779m>84Z6@rCHr[qb$BLs%E;]s%!)Xs$m#Zs$u!<
P"5sM7S-0A7n?0D9L&d[!7_&Z$6pcA+sJ0Q+!;dP+!i!,,PrY_+TEPR+o`S[,QB.k-3#+f,OHY.+T`r9
+:')6+sS<M)Ckp;!!3?1#kn<!!T3tX"8;fq!r)bI!.k3&!3ZA&+4Wo68D?]48HVLR8/'DO!"S!3Jg&2Y
"!Sm2$,6Il!.k3&!.k4J!!"*t8>f#T8HMCR+6ERk!!!Io,+KkU+U9,4+X&$S+:duCi;`ifUB#lGe,TIQ
YQ07Ta8c5c6G5sB8b,FZ8kMZH8kMZG8L2dc!>6Nt,(_$#,6&ea+p0&6+;!Q5nc8[jP5p17JcLB&f`2'm
7np*WKh2><8kT.WrCR/`8P1G^!!3]X.CpaU,P<8f+X&'T+sJ6V+VN<*!X]#7`rL\khuNcXeGoRMdK"k!
V>p];77fl*8qK[\9)D6`8P)Q-ec5d]+Y"i,,D%/V,QAtd,6K5:+r/<%JcMkPrrLdQJcLB&nc/e#77g-D
Q;!fBs%EAcr(@)`9/H/>jT#De+X8NfUEkgEs!%=c![AK]fDkmSX8mhPrrMoqrrL^O!"$19JcNOc"URLp
;+O7#9S,t$9`Icc:&7N`3TC,5!!NNM-7(&gP9c\Er?M7d!@&NP!.k36!<3)q!<3)u!.k3&!71]M!BiqK
:.\'h9S,t49`Icc:&7N`4kK`<+XJ9T.4N:_JgBV,s!@Ug"XG?>,pOD^!!!&G!.k4"!<3)Q!!!&S!.k3@
!!OfJ:JOk[m7i1,_+jr)rCmAf9MIk,!!X5c,9S<Y./P<B-+5,u,lK"k-7'iWf`2!VK)hMDrrM6^JcLB&
kPti#7T*,Z9Me9T:6/0M:&7Te9hdqSgAhHc-71#]*\&G>-A!TE-N>@g-35A4g&M-T#lO`'!PADa!9sRa
!Lj(@!5/C.!!iZt9Meba;bp/P:S1G_:B+,i:B+,h:&mWM!:0[k""5T<+!N'[-D2ZJ,mu(J,palb,palb
,9Hd`hZ*WWr;Zp#!s&G)!.k4I!<3(X!.k3i!!jc@9iY%b:.n=%:P)C-:]F2e:BO?e:I3_8#TtNF*ZQ@K
,ULqfJg];#s!@Rj![]05gAh3Yr;ccsi;eH0`W6#>gAh3SjoBu5OoPdt8kr5Z:KL1`;>X.@:UX(!:A@Tb
526,>#V7D..j,rc+si$mV^MKjq^2Ci*9I7p!!WH(!!**%!L*SI!<3)k!.k3&!8RV\2b6b<=&Vdl;6NcI
:]F5j;#3rf38=K?+=eog-6sld-RQMSJg^+:s!IUj!@A]>!!!'!!!<<(!<^CCJcOU,rrM-[JcLB&mJmS/
;clmr84ufR:K!i^P#20Ss&&_k"&D`j1]7=4!"'&R+X\Zf/LMei-`neL-ibRo-N,=p-R^8Wh#IQ\!!*'#
ZiG[Xm/[.eQiM^<\c<%#<`Mso9h\G[=4:#u;;G(W:f("d:f("d:f("@h#Ia*+<MjU/M&7q/Dqn--dX7@
.K:dq./bLo-5G>:!Y,53joBu5\H)X1bQ*4pLB%Gj=&Ddg##/)t;GpFlM,C0Js%<5e"&`/o+m&e#!"0&\
-RUGr+!2aR,pej)S1"=cs"aU$rZhOm//%OSjoGD_rrJenMZEbXrr`0!JcLB&dJsY=;c?Rh:0(Co;cH`0
;M%g=;ZBVo9Dq`j<)?@+h>dp(,q:;p/Kl8`,pjt]."Wl1-jqLS1,:1',pal^/Ig_?qu?]tquH`urrJ5^
RfNHhrr_TfJcLB&irBJp;H$Cj;,L=n;,L7jX\sjN!`rH#!)`\o"'/>r$/Y^i"X>6<-RpSl,q:CS."WlA
-jq.?.Olbl-RU;g/d:,4!!Kn6JcP'9rrVur!!;!W!!1.@JcMtS$metX;Gp@h<E2mn;cDXQJl9rns&]4t
r)<\t7c"+P'.54V-RpSl,q:D2."Wkb-jh(>.Olbl-RU5h-/JV%%dsCL!4Dn-!m^ju!.k4I!!Yqp<E!"#
<rGnq;O17M;u]_p;Z0Mo4n8U?!!XAi,q(>k-2fCp.\eGP.1.RU.Olen/1VtG!8mhW!Mf^I!;?Hn&rcmC
!65'E'j=R?;bpIrrDNYob#Eslj\uL`;H$Ln<)6LIiW/rX":6J%.Ob9Cs"47%s!s9_SLXXjs""'s!A,8Z
!:^$k!<`B'Q2l^@!"\u-JcLB&f)Q%.=&`-o>?Y5/;ZB_-<J"6F<=2Q!;c?Xp<`W=#-/S\3'-o%U-nuni
/hS\+.OrIfJgot6$8F7b.Oceo-SHtaU]>uHgAhK\!WW3$!<<*0YlK@UUAtNn=&r=";Hd9&;X@A7<5V]8
;#O;q<`W.$'Aict+s\]i/1Vng0/"k-q'ptG[OV;3r@.pt-S-nXfDpL'VZ6u(!WW3$!<<*)jT'l4JcP6>
%L$*:=&W!q>?b'+<E3.'UK3@Ts'5M+"C"\(!!)!Y%Ke=10eP+5,9nip/1`1tYUb;Us"46pr?VLr-3<$)
!!08'JcP?ArrW&t!!2!X!!Bk6JcOU,!!2'Z&-)\B<aS[!=&3%)<)cjt=BLbfSQ5u#>Zk35>#RZR!:g+"
$n3h\.l/_$,:tJt.jug=/!):],5ihh-Qi3cjT#8aT)aKD!!3-%f`2!XX8mhPb5`##>?4X):/tG"=BJX+
=BNUEJl_/;$!:;6>?"R%<E(@'!"']"/1`P,0d\4s.fCdF.tT;-.g[UP-71B!/M/@bhZ*W]df=t"a8c5K
#JC+h!1*Zk3`]-\<Dc[u>5_S'=o29P=1231=T;Y+<W6#!$f:ph-nHf%/hSk+![fHIr@*RQV^_ot,qgo&
/1Lkb!;lfs$]"eI!!*K/nGn.@JcOd1"]8E*=BJW'=T;Y+=ftkY=9qo,=]nU!<)cNI!"LV4/L`,#/hJY%
-7^Su/\NZd/+b=t0/"n/1c-sC,MiD#!PADa!8dbV(>o1E!.k4C!"];;;-6h+>?4^*=Bo*6=]ee!=cunn
<`WC-;GpLp1AV"6!"]570.SG)/1i>'/LMns/1iHU/;5VV0/"m\/N#CA1DnsK!!0/$JcP6>!"Y=pJcNRd
&.fCV>Zt?<>?k62?=$c;='*mSJm$i2%:*7@='Ad&4>niD,9%'S!"]DA/Lr7r-nR&+0dS+s/28m</:oFu
/H7-s/I*:2+s%U8$O,Skrrh<]JcN[grrW&t!<`JH!.k30!!sS`='Jg8>uk*/#$,&:=]nd+M-6`Z&RA[D
='Ad6?Vja&=Bo*%2]W=p!<)s0%Lss<-n-Mm.k`P#,:kB!0:"/Z/H74"./b_*+XAj%0Jb%'0-h/8qZ-$a
rreYgNr]1]qZ$X!"TAB*!!**9&-rDq!.k4@!!<?)$j5eq$6^Qu=]nd+>?b?;rE0)*]ip"kjB;ai>$G3,
-3il<"qM4n/M/_5r@@n%s"FC#at82sf.@1[0J"e#&HhG$JcLW-!!2rsJcLB&k5Z&?-='bW<`WF/>[1E7
=BJj7X]g<[oNDN'>$>0;?W&fhn,NY)&Lf@d1,AeYs"OI+s!YH1Jh?.;#VRk^/M&J#)[3&<JcO:#!XT)6
Z2fIV`;flCn,O"M.pZ:\=BJg5?!UW;=]o$9iELn<^KV"N>?5*5>$4lj$1\'''GN#M0/514/1N.J0E3Ni
/V5R\/IF-c/1ND,1,1L/"ks$/!2KSs!W`H+irFZ2JcPcM$8!i9>$>$1?!UfErEB5-Q<T;P$!p\;?<g`5
>?P)1<$_S;!!X,O.kiY41Ara%0`NYu/qP_T/d=$]/h\n4/,h=*0c#lOJcP6>rrN-$r;Zj&!M0:C!8%8O
!V??n.Ond'>Q%q->Q8$P>_654>RatJ=Bnd,@9m8J@9H,6o`,=5'J2'q0JFt+.kCQPs"0EeO"Lhh/MT(:
2Dd*<.PE4u!"+>YJcGfO!VZQp!s+J`JcOL)![f@%rET;.rETA/\m9nnk?S3tA5uZ9r`BA5@T[2A<#>6.
!YZ5!rA"7%rA"='a"N#tg+Npc/hSe;2D-U5/L`J//e,;jJcO!p!!;lp!WiE.`;kJiZ2ak0p&GFE,@4V[
?=%#I?XNb;ls>9MZX+/J>%V/H?<gcA>[^rN?=,)S!"';M/i>L=/h8G)0)[L(0)I>S0W$N70.\n5/MJt:
0J>".1+Y0qo`+smq>c*IQN.!dq>^R!!s/,rJcLB&nGj%;)I?ZR?XI2K?XI,G?!X.1JmSF_&7SpN?sI)E
?!^`F?<^iE?7GXL$4RFs2)R!=.k<5)r@n7(YV:Y_nLtM10.\b01,C^@0.n\&/ho.%p&G'nY5j.Sg&M<\
!rr?%!",q1JcNIart,08#@LnM?=.&I@#nZS?OC4M@q/tW>[1K;?N=I4AH4[b!"9,=0fM$@.k`>+0eb;O
0nM+l0JG.5/hS\+1G^sK1G^C+/Jn3_!W`<-r;Zg!U]>uHoDnmlr;ccsqZ$Wu!MKLF!6kKL"U/76@UWVQ
B`2<<?H$9'?eSj"?=%&K@U`bS>[1H9?=%2S@pg;Q!!`T.1,1jB.kLZSs"FC,dP$2*aY+,U/M&G/1H%-H
1+4P$-kuFV!"&T(!<E8T!.k3d!<3)k!!30%#hB!-!20Am"o&'$;IER<@Uf=Boj<;XVI0@/s'Ye7$XmIO
?s[/E>\%SO&GZ;2/35R=/1`2+"uItd1,:L9M(tDQs"j[.s!n%#r@S=00f1^2-8l51!;lg#('"=9!<J/[
L]IGUr;ccsrVup"M?&5.iW'<N?!q2U@q&bN@:?6FJme+Vs'>Y5rF>e7#[^qE?#"7Z;?Qaq$mI\n/1rP,
2)R'A1,?HqJhZ7>s#'g1s"!t!#V[qi2'sh21]mLR"qUb7!<N9&_>o/feH#OKr;ccs"onW)!rr<%quD<K
JcPWI!!;us#V'1b@Ui_S?!Wn-Jmn[erEg%E@qB4^A7/eM>[h/N?9J&a%M_&a.4Ql&3&iWI1,:R=XYPJ`
nhU/#%PKIb.P35/1cRHG/2T(-q>^L,rW!!#!!0A*JcOa0rrN-$rrN&u"9AN'!!2or!"-7:JcNLb#T@&U
B5(mc?!Y`aJmlo4qd9qE@qB4^A7/eN?"[YX@U9lJ!"KE!3@um=0/tpG0etL=1#Xm>1;5OB1_25m.Om#%
1c.0O0Io%<3Y)#e"pt>1!WiB'joBu5XT8A%rrW3$r;Zs%!<<*%q>^L!m/V_<M?!ka>$PfNA7AgE?%ZUS
@fL!=@fKj7?4:7NAS#Le?XR;LA5`O,!"K#g3A;j90KM6M1,C^A16sYR1&is-1&j'02ubiG2)R!=.k<S>
/1`V/!W2p"!<<*%rW/JgJcP]KrrMio"9AN'!!2ip!!K"rJcO:#$Vk#=Bk1[Z?=RJUA@l?'A)q/"AcH<@
@JsOA@U`q]BP:XZAS,@]*;]^F0fpj<0eb[N1G^jE1Gd0/Jhkq5(,7O!1,LgI3&ruW2D6^7/2]FA0JPBq
rW)ir!s&K)!K-r;!<3)p!!rW+!<<*#!WW3'Mu\G0j8]QDAmo+X?tEnZ@qK>R@tJ4N@g-=QAm\h5qZ%'B
1,C[H2_Qg@1bUL=1qGGo1=n8c1GUaD3B&Vg!<3)u!<3)9!.k3n!<3)u!!!&8!.k3T!"0HOAn,:YAnGO_
B4p+4Jn2&q#%M.T?Y!@Mqu@040/YRH3&!$B1G:C<2"!/O1SZ`21c$mD3B]P4qZ$Tsr;ciuo`0RDQ2ppc
r;ZfuoDjICJcPWI$rC>EA7&kXBk_-i@q1g9Jn=gj#A.^cA7oFb/c,MV/MK%A1c7-E0JbLD2kr0\1[[%(
0etC51bh!-qZ$U+U]>uHgAh6["0)?Q!6,!I/nnj'ARo=cBk:jcA'/A7A]J?gBjtgnAnG7?!!)rt$lV)\
1c[EN0JG:=2`HpVJi!B^#;Iea0ekI<./NuE$'YFA!:'Uc!X5"mJcO@%!sW4JD>muDD#\&G@Cg$%A_1K"
?Y*h_?Y4(_!sAK%$j/:D3A*<P/M/n?3B>,:Ji(V,#raq)3ANNV2?<jW!!E?'!!E>H!.k3S!!!5R!.k3E
!"22'@VB7]D/Eiq@Ueb;JnCci$"@OT@;9C`@hfaV!"1&-0JkgO/hT+C3]d-qJi/iO#s(7*1H[ZS2@Boh
!!30'!.k3&!!3-$!JLN*!:0[n'PComB4ksoAnGO_UM#0kmUli<@W,snCM7K4.Js/R$p?-t2`EKI2`E`W
YVh"iiACou0fLj@1,Ca&(An.7!Xo&0[/bdYJcLB&]`@p0$:o)KB4kpmAnGO_P@oJ[rauOPBP2'oChIK>
2#@7[.5`e:2)@$I2`Wmk21d^U2$l6#0JbF>1,KsjqZ$[$!Wf+tJcLB&JcNgk$4LZcCN*cpDJ3`ta(^->
aD(ZhrG2EtqZ$p,0/5+92`WfP3R]m<2SD$K3<(l71]JTp!!!,Q!.k3P!;uro!!!Df!.k36!!l25E,BE$
CMmb\BnC&^C&MiI7/?lb+u;"Z0L.QU3&WdR2MF'g1BK?V,)$#K!;?Kl!K[;5!8RV]&8#`s?Y41fDecLj
Jna1XrFQ"As(MF"q>^g-1bLIB5;t8U1qbf!2UjYb3r_>B3r_/=-2@N@"2Y%i!5/Aa!.k4;!!bB"Eb8lt
DJYq[JnjgjrFZ(Cs(_R#q#C[>0Jl!X1cI<LXZ(hjj>[*#s#pBDs#C$)q#CBqZ2fIVJcLB&\,Zd9=(l5_
C27U)e8'YO]kdXeqeZ9lq#C[$0/kpT3&i]SiAcEKYW2Y;rAO[7ruUt9!W`?)kQ$27UB(;pnGiOio)O@B
K)bli#&A!cD.mX'M/.r`s)@mP!c0A;p](L.3B]A`2)1@UJiNWes"XI1s#9rpp](<q".]FD!:Bje!LEe<
!6kKJ05l#FCi3q"Ck?KOD#\5LCB&)L*VTO<*]6&?4uP+;2hF!-2uc#?3r_2>&,-&(!rW-!!L!M8!.k3&
!8RVZ!E3fKBQ7smCk?KaC^FrqC2.O"D/9@ZpAbBu.5a7N3&\?.JiVFCs#0m?s#^6@rr_fl!<N;B!.k3&
!.k3L!"TB:DJOE5DJO0-E,T`7Ci'&as)%:BJo&5=s)%dPrG<'_DJa6+CMIU#Ci+$(E+W)A!"T8m4?,,K
3]K)U3&NTO3B@%%s#0j:JiT_h$TpO84utbb3&Wc\2=geJ"8;fk!<31\!.k3&!.k4A!"KQNE,g&=Df]f8
GAM8:DZ+=GDN&K3D>eAPDuX\SD#\;MD$4crDeV*#!"KAo4YJTN3BK)V4>SoW3rM;C2mYPs3qt`J3B9&Y
4$,Sg5<h7m3'',^66Yq#!!2Ngrrg+;JcLB&JcNIa',+_nDJ<d%F)>`9Dej-+DK'Q5Dq])\DUEA!DuFP[
CMe30H$!F,!!)Wk&I^`b3^,\h5Vt5Z3Bo_h3]/dg3eocr3W;&H3]oMd3^5P]1I)B>!!*04q#CBqVZ;;K
m/R.i".0(?!6bEL)JO#)E,902EcV.ps).jUs)6%tJo9ObqeuFN#&/*lE,'Pqn,O"23'';l3ArrX4#T;f
3]],UeN/:CdQ7CgrAk3H4?5Yb4"E-Hn,NFlqZ$Tsf`6U(\GuX2"3^as!1*Zk*bfJ(EH,r4Ac?]LErU+Y
DuO^-E3XBXDuFV\EH,r7G&h\H+n#C9'Lk8H4?Pnk#rk712`<QU4$5Wa4/P+<3qYK;5X%(]4ZsVR!;lg#
!<rN(!<J/[K)blWJcLB&i;aE6Dffl;Bl.g-EcQ5BEH,r:ZZ1S:pi67OrG`*`EbfB4H#I!jmJme65=@Rs
3^5nq3&iiU4?Pbi^c[32nN?b3of<:=4#AlU0`g\B"9AK&!<L":JcO'r!!0M.JcNIan,NtBB5_O)E-$&A
FDu2:DK'QiEK>,<ErBt\E,]f:EX6],F*)PFG@qo^!"0>p5sIY#3&rrX4?WR+YWRM"s#^0?q`Og<"[,%,
3C=JH!!*--Y5j.ShuNcXV#Z)I])W<R>A\=tFEMYGDf9N2E,aEKJoTLarGqpXrGW*`EH6)@F)c>EGsU]q
%LP*[5sRIm3&j&a5<h=qj?/#Vbrl"fq`=a>qDn^@2**8Q!!!)\!.k3P!!!&P!.k3*!!<I%Ed7h2Ec>o7
FoHK@F/F!mFEDSFFEDSFCj'rADfU#BG]Rk;!qH?d!"B&_3^5bi5X7Ft4ZknmR6?fu&j&0<4ZPkr5<M.q
4Z5&b5QLiblMpqd#+>OD!;c`r!Jpf.!9sOa"m>pj!BkFJEH-$uE<:<&EklaJF7"#ZFEDPDGAh;>F)u>D
G^+!Kk5Ynk+#lMG5sdb!3BfMgbrpYAj?<N*rAtHO4[_Fp69d[r5;kGe'sdml!65*>!Vl_I!.k4-!"'KQ
E-$2GE-?/GGd)7@F8^.iFEDSFDKKl=F)lAAF)i,Y!"'6"6TI4n4@)%i3P@S-4n:c73t+884?u2!5s[b"
4[';8!!!3$!!!&=!.k4$!!!5a!!!ST!.k3l!!"8(!!rs"GB\:PFEi"TjE,uqbB3]*$ZpK3G&M8AD0'W:
7,e1Q"XuPr6Tm\$3&pFkJj$h2rB(HN4[DG#5"%Lu4Zt+J!!!&q!.k3&!.k3&!:g*p)-(X"GBIeFR<=p?
s)\3_rH8HcG'.eGF`V^iqZ,^X#80'T4#A]W7&E/,4paJ>5!D(k5!D%o#"(U?69dgehZ*Z[%'9M]!:Tsi
#7(Hu!.k3a!!WKaEdi@]DU!?VG3!iHFT6O_G6iJ5FEh\FEC^,e!!WKF3'&rg5MAAS5hA:$6N9:K4U=G=
6Us:*4spC+!9=+[!MBFE!!30+",-`,!6Y?F#=W?GK=uJ\GP$+ZF8pF^GQrA;FDl>A1YMg2"tW+qaZkAA
k<Ju7s$-HF#!YF?4[D4Ng&M6V!sJZ*f)UC&c2[nO"U`r`!!M3[JcM&9!X_53nTKM-^ioa!s)n9b"a5'2
G%;B?!!3BH1B'Li5I3TS7/oON4U"#55sdR?h>m?O!!.uXRK*?m!UB`;!.k4,!#I7rEcuPKI<B^YG^+L^
FF8@UFa\7RHZf:4$#ss3HZjRVGBe?1GQi;8G^"@To61=^G^"@VrHA6erce<c!I&_bGPl[cGkZF\Gl)^`
FpiM<H$OXZGBnCVG'<e-"F,0:G^0+0!-\?ck]m)M#C1T>GBS1RG5c^pH$=IUG'A+TH$=IXGl2aoG'J7S
FEr"OEHc_SHNJId"Od>m*BHSY5X\%(4?ktl5!h=t77'4.5X[t'4Zttm84Yd&qa(*Dr^$QKr^$NJr^$KI
q`t<K5=%R35ls885lO(K5Q=%K5Q3qK5PRME5PIGG5=%P"r]^BJqEb'E!'pNJrBUNN5=%U15Q*nA56O8<
5=%U656*tH5lj28r'C<I"$]"85Q!eX5X.J#6:=(-69RRq4?k.pOoU(6k5YPh"Td*Q!!CIGJcOF'!!1LJ
*s!N`EHcGKIXHHeG'\LVE-ueKH$+4RH?sj^EH-ARG5c^bGQ<!eH2VsiGBeCXrceBfqfi3gGB\<1G6N89
GBeCYrceZlG^4RYGBeE1Gl)^\GkcIaG^4T6GR8Y?GBS.TG^4LXqK`$a#BtB:GBe@XGl;pbGl;pfH2`'g
H2`$eGli57GPuddH2VplG^"FYG^+LYqf`HnH$FLMI;jC^FamL4nc7PI(',('5"%It5s[b"5!VCp5=n(&
77'.&rBC6Qs#g-D!'gEIq`t3KrBUHN5l3hI5l*bH5lO(L5l<qJ6N07N5l3kB5la1G62s:M5mBS>5<hG!
6N07R5X@Y$62Ek@5lj5:rBU6GrBLQN5!VA!5X><7"$Sn65PmbH5lEtR69me&5<hJ!q`t]V5Xe(%7mKR6
4$>&'!!%TNJcPNF!!/&ZJcN1Y*!IKaFE_tSI<KmWI!gHmJoYpZI<p3dHZX@VH[,O8!IB%hHMDaeG^+K6
HMMgfG^+N5GkZI`GiEuNG^"CWrcncqH$Xa]G^4OYk'7,VH$FUZGl2m_Gm8M>H?jd\GlN$cGn"tAH$=O[
G^4U[H$OXZrHSZkF+SshI;i'nb5`.W'.lI24Zu+s6:4@(4#T)j8jE;?s#pBQs$$<HrBLBL5l!bH62X(I
5QX5;6N07Q5XI_$r^-TL!($QM#XCXA5X7Y$69tE7!C0!M5l3kJ7/fOK5l3nD5QO2:qa(9Jr^-NJ"[YOA
5X@^35l*hG5lF%H5lO(S5sR_#5X@^564,tC6UF()4$>e[$-N;N!X]>Jp&G'np],mG`rH/B!<UFE!<EN$
!.k3\!!!JP!;um9"!'X7H$=XXF+8diJ8K=QH@(!dHusIXI!L#3HN&3WHN&3aHN/9fH2r6dHMr*hHMr*h
HM2X^HMr*jG^=Z9H2W$hH2W'gH2i3jH2i3jH2;jeH22aqH$Xd^H$Xd^H?sj_H$K:5s*FWh#'tN?H?jg`
rd"Ngrd"fpG'/4UGYK+.!:Tt*!=p>/5=%b*6TR=f3CHG&5!_J!5=e=05Q*qL62j1N5lO(L6N9FM6MEeB
6MNhP6:+%,5sdk'6Ms+N6:4-=63'=M63'CO63T_E6pj:-!(-TL"$f1?6iB@M5la1L62a+T6UO1,5smt*
r]pQO62O"G5m0M?5sdp;6O,kA6:!t*6::T9#X^sF5smn'6U:Q9#t%!D6ps3t4=(O!!9!nX!Vuct!<</&
!0[B_!q?8B!.k3i!#,GI-UCRLJr>;)EIiRaH%(3dGC+]8HMMpeHN/?jH2r<jHN&9_HN&6kHi89iHi89j
HiJElHiJElH2`*iH2W'gH2W$hH2MsmH[C$`H?jf4H38G=H[G^;"abTAH$Xl;H2r<hH2r<kHN&9jH4>7J
H$Oa`H@1$bI!^-ard"WmH?oI8"aPE@H$ar<H3/A:H3\hFH$jBp,m(j^&ciF[.5E%l.jS1q4Zc"u5!DD(
q*Y*Hr'LHPo0WRF5skW>r^-TO!($3Ds$?NL"@PUE6:1Z=!CB*O6iKCT6UaF26i97M6iTLN6NBFO6NKJ<
rBgrZ6UO706UF..6U=*<5m0M@6UO395nQFN6:+(.6U<t'6:=.,6U=(,r^$WQ6ki!T6UO+)6:!t+6:+%-
6p`jg-l2s"!!`Z7$k3XV"U!]`JcOj3";DL_$3?q&JcO7"!!;Kec2\;26Sp_a69@7l4ZPM`3rD#:3;tl6
2Z>T42#T611B'$*0`Ea(0)dI$/H%*t.fLk!-n$Gkr?qRkr?_CfrZ_Lh,9nE2+oEJ^+8m8Y*W@#_)]Te8
)]BXl)$1Wk)#Y9L('53b(&\gJ',2,X')iLB&H*.<%fQn@$k3UR$O?>)_#OiU'.,.I+<i!N*[2g++T3DY
*Wd?'*rR,T*!.&u)Z:WP)Yt?J)#+mK()@Ya(AnpG'`SpJ'`JdF&c`UE&c`UE')`FB&H<@=&H!(9%fQn@
%LigT%1W1Cr!WK2!"8]3q?cs'q?I!)!!BV/!<WAM!.k4C!!!%]!.k3>!"CeQ1cIN`4$,Sg3B9,]r&O^8
!&sp:q_nF2rA=I/s"aR.q_8"&r@\($r@Imtr@7dq""5QF./bOm-N,7h,lT"j+sS<Vr?;(]rZD([r#PbV
"reO$)B0S5q\]GP(E!)ertY_Q()7Mur=f;H'GLBWrXo,@r=Ai:rXB#>%1EXQ#IOO=&ecT@)^$=K*ZcL*
,5`S^+8R#[*?H:#*VgZV)]K^o)uCQM)>Y3F(BP?f(&f!H(&\jH(&o!I'E/UE'E/UE'E/XC&cWFB&c*(:
&,Qk9%0[4N$k*RSq[EB1rX&W5r!N9,q$?g%!<rY8!!<3$!s+,V^]4?8_uPAhR/ha~>

%%EndBinary
grestore
np
144.137 355.905 mo
144 355.904 li
144 353.904 li
144.151 353.905 li
144.643 354.911 li
144.137 355.905 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 588 ]ct
[3 0 0 4 143 231 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 4 
/M[3 0 0 -4 0 4 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!~>
<~s8W-!s8W-!s8W-!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
145.978 356.696 mo
146.877 354.929 li
146.016 353.166 li
149.525 354.96 li
145.978 356.696 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 588 ]ct
[6 0 0 6 145 230 ]ct
snap_to_device
<<
/T 1
/W 6 
/H 6 
/M[6 0 0 -6 0 6 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
<~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
144 359.891 mo
144 356.174 li
144.137 355.905 li
144.643 354.911 li
144.151 353.905 li
144 353.596 li
144 349.889 li
152.215 354.09 li
151.76 354.98 li
152.215 354.09 li
153.995 355 li
144 359.891 li
146.016 353.166 mo
146.877 354.929 li
145.978 356.696 li
149.525 354.96 li
146.016 353.166 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 588 ]ct
[12 0 0 12 143 227 ]ct
snap_to_device
<<
/T 1
/W 12 
/H 12 
/M[12 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!*!!!!!!!!!!!!!$_!!!!!!!!!!!!"HE!!!!!!!!!!!"qb!!!!!!!!!!!"%Z*^!!!!!!!!!!
,"bR0!!!!!!!!!.8kr5Z~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!&!!!!!!!!!!!!!!B!!!!!!!!!!!!!f]!!!!!!!!!!!"(&"!!!!!!!!!!""5T<!!!!!!!!!!
+=J]\!!!!!!!!!)/1E(l~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!"!!!!!!!!!!!!!3'!!!!!!!!!!!!3E+!!!!!!!!!!!<<*"!!!!!!!!!!
#64`(!!!!!!!!!!!<<*#~>
<~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W,Us8W-!s8W-!s8VmOs8W-!s8W-!s8Qj7s8W-!s8W-!s1/11s8W-!s8W-!nf@c2s8W-!s8W-!
CB+>7s8W-!s8W,G!<<*"~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
1 lw
194.45 433.09 mo
173.07 430.95 154.94 418.15 147.75 400.14 cv
140.56 382.12 145.58 362.03 160.67 348.41 cv
175.75 334.78 198.27 329.99 218.67 336.08 cv
231.81 297.39 277.76 275.49 321.3 287.17 cv
364.84 298.84 389.49 339.66 376.35 378.35 cv
392.44 377.84 406.32 388.28 408.41 402.46 cv
410.5 416.64 400.11 429.9 384.43 433.09 cv
384.51 432.9 194.13 433.5 194.13 433.5 cv
194.45 433.09 li
cp
.635492 .400641 .0580453 0 cmyk
@
217.664 459.945 mo
215.051 452.34 li
212.273 459.945 li
217.664 459.945 li
cp
213.832 449.785 mo
216.469 449.785 li
222.715 467 li
220.16 467 li
218.414 461.844 li
211.605 461.844 li
209.742 467 li
207.352 467 li
213.832 449.785 li
cp
232.838 455.117 mo
233.725 455.805 234.258 456.988 234.438 458.668 cv
232.387 458.668 li
232.262 457.895 231.977 457.252 231.531 456.74 cv
231.086 456.229 230.371 455.973 229.387 455.973 cv
228.043 455.973 227.082 456.629 226.504 457.941 cv
226.129 458.793 225.941 459.844 225.941 461.094 cv
225.941 462.352 226.207 463.41 226.738 464.27 cv
227.27 465.129 228.105 465.559 229.246 465.559 cv
230.121 465.559 230.814 465.291 231.326 464.756 cv
231.838 464.221 232.191 463.488 232.387 462.559 cv
234.438 462.559 li
234.203 464.223 233.617 465.439 232.68 466.209 cv
231.742 466.979 230.543 467.363 229.082 467.363 cv
227.441 467.363 226.133 466.764 225.156 465.564 cv
224.18 464.365 223.691 462.867 223.691 461.07 cv
223.691 458.867 224.227 457.152 225.297 455.926 cv
226.367 454.699 227.73 454.086 229.387 454.086 cv
230.801 454.086 231.951 454.43 232.838 455.117 cv
cp
244.838 455.117 mo
245.725 455.805 246.258 456.988 246.438 458.668 cv
244.387 458.668 li
244.262 457.895 243.977 457.252 243.531 456.74 cv
243.086 456.229 242.371 455.973 241.387 455.973 cv
240.043 455.973 239.082 456.629 238.504 457.941 cv
238.129 458.793 237.941 459.844 237.941 461.094 cv
237.941 462.352 238.207 463.41 238.738 464.27 cv
239.27 465.129 240.105 465.559 241.246 465.559 cv
242.121 465.559 242.814 465.291 243.326 464.756 cv
243.838 464.221 244.191 463.488 244.387 462.559 cv
246.438 462.559 li
246.203 464.223 245.617 465.439 244.68 466.209 cv
243.742 466.979 242.543 467.363 241.082 467.363 cv
239.441 467.363 238.133 466.764 237.156 465.564 cv
236.18 464.365 235.691 462.867 235.691 461.07 cv
235.691 458.867 236.227 457.152 237.297 455.926 cv
238.367 454.699 239.73 454.086 241.387 454.086 cv
242.801 454.086 243.951 454.43 244.838 455.117 cv
cp
256.363 454.795 mo
257.199 455.213 257.836 455.754 258.273 456.418 cv
258.695 457.051 258.977 457.789 259.117 458.633 cv
259.242 459.211 259.305 460.133 259.305 461.398 cv
250.105 461.398 li
250.145 462.672 250.445 463.693 251.008 464.463 cv
251.57 465.232 252.441 465.617 253.621 465.617 cv
254.723 465.617 255.602 465.254 256.258 464.527 cv
256.633 464.105 256.898 463.617 257.055 463.063 cv
259.129 463.063 li
259.074 463.523 258.893 464.037 258.584 464.604 cv
258.275 465.17 257.93 465.633 257.547 465.992 cv
256.906 466.617 256.113 467.039 255.168 467.258 cv
254.66 467.383 254.086 467.445 253.445 467.445 cv
251.883 467.445 250.559 466.877 249.473 465.74 cv
248.387 464.604 247.844 463.012 247.844 460.965 cv
247.844 458.949 248.391 457.313 249.484 456.055 cv
250.578 454.797 252.008 454.168 253.773 454.168 cv
254.664 454.168 255.527 454.377 256.363 454.795 cv
cp
257.137 459.723 mo
257.051 458.809 256.852 458.078 256.539 457.531 cv
255.961 456.516 254.996 456.008 253.645 456.008 cv
252.676 456.008 251.863 456.357 251.207 457.057 cv
250.551 457.756 250.203 458.645 250.164 459.723 cv
257.137 459.723 li
cp
263.145 463.063 mo
263.207 463.766 263.383 464.305 263.672 464.68 cv
264.203 465.359 265.125 465.699 266.438 465.699 cv
267.219 465.699 267.906 465.529 268.5 465.189 cv
269.094 464.85 269.391 464.324 269.391 463.613 cv
269.391 463.074 269.152 462.664 268.676 462.383 cv
268.371 462.211 267.77 462.012 266.871 461.785 cv
265.195 461.363 li
264.125 461.098 263.336 460.801 262.828 460.473 cv
261.922 459.902 261.469 459.113 261.469 458.105 cv
261.469 456.918 261.896 455.957 262.752 455.223 cv
263.607 454.488 264.758 454.121 266.203 454.121 cv
268.094 454.121 269.457 454.676 270.293 455.785 cv
270.816 456.488 271.07 457.246 271.055 458.059 cv
269.063 458.059 li
269.023 457.582 268.855 457.148 268.559 456.758 cv
268.074 456.203 267.234 455.926 266.039 455.926 cv
265.242 455.926 264.639 456.078 264.229 456.383 cv
263.818 456.688 263.613 457.09 263.613 457.59 cv
263.613 458.137 263.883 458.574 264.422 458.902 cv
264.734 459.098 265.195 459.27 265.805 459.418 cv
267.199 459.758 li
268.715 460.125 269.73 460.48 270.246 460.824 cv
271.066 461.363 271.477 462.211 271.477 463.367 cv
271.477 464.484 271.053 465.449 270.205 466.262 cv
269.357 467.074 268.066 467.48 266.332 467.48 cv
264.465 467.48 263.143 467.057 262.365 466.209 cv
261.588 465.361 261.172 464.313 261.117 463.063 cv
263.145 463.063 li
cp
275.145 463.063 mo
275.207 463.766 275.383 464.305 275.672 464.68 cv
276.203 465.359 277.125 465.699 278.438 465.699 cv
279.219 465.699 279.906 465.529 280.5 465.189 cv
281.094 464.85 281.391 464.324 281.391 463.613 cv
281.391 463.074 281.152 462.664 280.676 462.383 cv
280.371 462.211 279.77 462.012 278.871 461.785 cv
277.195 461.363 li
276.125 461.098 275.336 460.801 274.828 460.473 cv
273.922 459.902 273.469 459.113 273.469 458.105 cv
273.469 456.918 273.896 455.957 274.752 455.223 cv
275.607 454.488 276.758 454.121 278.203 454.121 cv
280.094 454.121 281.457 454.676 282.293 455.785 cv
282.816 456.488 283.07 457.246 283.055 458.059 cv
281.063 458.059 li
281.023 457.582 280.855 457.148 280.559 456.758 cv
280.074 456.203 279.234 455.926 278.039 455.926 cv
277.242 455.926 276.639 456.078 276.229 456.383 cv
275.818 456.688 275.613 457.09 275.613 457.59 cv
275.613 458.137 275.883 458.574 276.422 458.902 cv
276.734 459.098 277.195 459.27 277.805 459.418 cv
279.199 459.758 li
280.715 460.125 281.73 460.48 282.246 460.824 cv
283.066 461.363 283.477 462.211 283.477 463.367 cv
283.477 464.484 283.053 465.449 282.205 466.262 cv
281.357 467.074 280.066 467.48 278.332 467.48 cv
276.465 467.48 275.143 467.057 274.365 466.209 cv
273.588 465.361 273.172 464.313 273.117 463.063 cv
275.145 463.063 li
cp
292.828 449.785 mo
295.582 449.785 li
304.277 463.73 li
304.277 449.785 li
306.492 449.785 li
306.492 467 li
303.879 467 li
295.055 453.066 li
295.055 467 li
292.828 467 li
292.828 449.785 li
cp
317.691 454.795 mo
318.527 455.213 319.164 455.754 319.602 456.418 cv
320.023 457.051 320.305 457.789 320.445 458.633 cv
320.57 459.211 320.633 460.133 320.633 461.398 cv
311.434 461.398 li
311.473 462.672 311.773 463.693 312.336 464.463 cv
312.898 465.232 313.77 465.617 314.949 465.617 cv
316.051 465.617 316.93 465.254 317.586 464.527 cv
317.961 464.105 318.227 463.617 318.383 463.063 cv
320.457 463.063 li
320.402 463.523 320.221 464.037 319.912 464.604 cv
319.604 465.17 319.258 465.633 318.875 465.992 cv
318.234 466.617 317.441 467.039 316.496 467.258 cv
315.988 467.383 315.414 467.445 314.773 467.445 cv
313.211 467.445 311.887 466.877 310.801 465.74 cv
309.715 464.604 309.172 463.012 309.172 460.965 cv
309.172 458.949 309.719 457.313 310.813 456.055 cv
311.906 454.797 313.336 454.168 315.102 454.168 cv
315.992 454.168 316.855 454.377 317.691 454.795 cv
cp
318.465 459.723 mo
318.379 458.809 318.18 458.078 317.867 457.531 cv
317.289 456.516 316.324 456.008 314.973 456.008 cv
314.004 456.008 313.191 456.357 312.535 457.057 cv
311.879 457.756 311.531 458.645 311.492 459.723 cv
318.465 459.723 li
cp
323.641 450.945 mo
325.773 450.945 li
325.773 454.449 li
327.777 454.449 li
327.777 456.172 li
325.773 456.172 li
325.773 464.363 li
325.773 464.801 325.922 465.094 326.219 465.242 cv
326.383 465.328 326.656 465.371 327.039 465.371 cv
327.141 465.371 327.25 465.369 327.367 465.365 cv
327.484 465.361 327.621 465.352 327.777 465.336 cv
327.777 467 li
327.535 467.07 327.283 467.121 327.021 467.152 cv
326.76 467.184 326.477 467.199 326.172 467.199 cv
325.188 467.199 324.52 466.947 324.168 466.443 cv
323.816 465.939 323.641 465.285 323.641 464.48 cv
323.641 456.172 li
321.941 456.172 li
321.941 454.449 li
323.641 454.449 li
323.641 450.945 li
cp
330.848 454.449 mo
333.262 464.34 li
335.711 454.449 li
338.078 454.449 li
340.539 464.281 li
343.105 454.449 li
345.215 454.449 li
341.57 467 li
339.379 467 li
336.824 457.285 li
334.352 467 li
332.16 467 li
328.539 454.449 li
330.848 454.449 li
cp
355.061 464.053 mo
355.58 462.994 355.84 461.816 355.84 460.52 cv
355.84 459.348 355.652 458.395 355.277 457.66 cv
354.684 456.504 353.66 455.926 352.207 455.926 cv
350.918 455.926 349.98 456.418 349.395 457.402 cv
348.809 458.387 348.516 459.574 348.516 460.965 cv
348.516 462.301 348.809 463.414 349.395 464.305 cv
349.98 465.195 350.91 465.641 352.184 465.641 cv
353.582 465.641 354.541 465.111 355.061 464.053 cv
cp
356.367 455.703 mo
357.484 456.781 358.043 458.367 358.043 460.461 cv
358.043 462.484 357.551 464.156 356.566 465.477 cv
355.582 466.797 354.055 467.457 351.984 467.457 cv
350.258 467.457 348.887 466.873 347.871 465.705 cv
346.855 464.537 346.348 462.969 346.348 461 cv
346.348 458.891 346.883 457.211 347.953 455.961 cv
349.023 454.711 350.461 454.086 352.266 454.086 cv
353.883 454.086 355.25 454.625 356.367 455.703 cv
cp
360.605 454.449 mo
362.609 454.449 li
362.609 456.617 li
362.773 456.195 363.176 455.682 363.816 455.076 cv
364.457 454.471 365.195 454.168 366.031 454.168 cv
366.07 454.168 366.137 454.172 366.23 454.18 cv
366.324 454.188 366.484 454.203 366.711 454.227 cv
366.711 456.453 li
366.586 456.43 366.471 456.414 366.365 456.406 cv
366.26 456.398 366.145 456.395 366.02 456.395 cv
364.957 456.395 364.141 456.736 363.57 457.42 cv
363 458.104 362.715 458.891 362.715 459.781 cv
362.715 467 li
360.605 467 li
360.605 454.449 li
cp
368.484 449.785 mo
370.512 449.785 li
370.512 459.781 li
375.926 454.449 li
378.621 454.449 li
373.816 459.148 li
378.891 467 li
376.195 467 li
372.281 460.672 li
370.512 462.289 li
370.512 467 li
368.484 467 li
368.484 449.785 li
cp
0 0 0 1 cmyk
f
554.051 563.785 mo
565.992 563.785 li
565.992 565.895 li
556.383 565.895 li
556.383 571.121 li
564.832 571.121 li
564.832 573.172 li
556.383 573.172 li
556.383 581 li
554.051 581 li
554.051 563.785 li
cp
568.203 568.508 mo
570.348 568.508 li
570.348 581 li
568.203 581 li
568.203 568.508 li
cp
568.203 563.785 mo
570.348 563.785 li
570.348 566.176 li
568.203 566.176 li
568.203 563.785 li
cp
573.59 568.449 mo
575.594 568.449 li
575.594 570.617 li
575.758 570.195 576.16 569.682 576.801 569.076 cv
577.441 568.471 578.18 568.168 579.016 568.168 cv
579.055 568.168 579.121 568.172 579.215 568.18 cv
579.309 568.188 579.469 568.203 579.695 568.227 cv
579.695 570.453 li
579.57 570.43 579.455 570.414 579.35 570.406 cv
579.244 570.398 579.129 570.395 579.004 570.395 cv
577.941 570.395 577.125 570.736 576.555 571.42 cv
575.984 572.104 575.699 572.891 575.699 573.781 cv
575.699 581 li
573.59 581 li
573.59 568.449 li
cp
589.332 568.795 mo
590.168 569.213 590.805 569.754 591.242 570.418 cv
591.664 571.051 591.945 571.789 592.086 572.633 cv
592.211 573.211 592.273 574.133 592.273 575.398 cv
583.074 575.398 li
583.113 576.672 583.414 577.693 583.977 578.463 cv
584.539 579.232 585.41 579.617 586.59 579.617 cv
587.691 579.617 588.57 579.254 589.227 578.527 cv
589.602 578.105 589.867 577.617 590.023 577.063 cv
592.098 577.063 li
592.043 577.523 591.861 578.037 591.553 578.604 cv
591.244 579.17 590.898 579.633 590.516 579.992 cv
589.875 580.617 589.082 581.039 588.137 581.258 cv
587.629 581.383 587.055 581.445 586.414 581.445 cv
584.852 581.445 583.527 580.877 582.441 579.74 cv
581.355 578.604 580.813 577.012 580.813 574.965 cv
580.813 572.949 581.359 571.313 582.453 570.055 cv
583.547 568.797 584.977 568.168 586.742 568.168 cv
587.633 568.168 588.496 568.377 589.332 568.795 cv
cp
590.105 573.723 mo
590.02 572.809 589.82 572.078 589.508 571.531 cv
588.93 570.516 587.965 570.008 586.613 570.008 cv
585.645 570.008 584.832 570.357 584.176 571.057 cv
583.52 571.756 583.172 572.645 583.133 573.723 cv
590.105 573.723 li
cp
595.832 568.449 mo
598.246 578.34 li
600.695 568.449 li
603.063 568.449 li
605.523 578.281 li
608.09 568.449 li
610.199 568.449 li
606.555 581 li
604.363 581 li
601.809 571.285 li
599.336 581 li
597.145 581 li
593.523 568.449 li
595.832 568.449 li
cp
614.473 579.102 mo
614.918 579.453 615.445 579.629 616.055 579.629 cv
616.797 579.629 617.516 579.457 618.211 579.113 cv
619.383 578.543 619.969 577.609 619.969 576.313 cv
619.969 574.613 li
619.711 574.777 619.379 574.914 618.973 575.023 cv
618.566 575.133 618.168 575.211 617.777 575.258 cv
616.5 575.422 li
615.734 575.523 615.16 575.684 614.777 575.902 cv
614.129 576.27 613.805 576.855 613.805 577.66 cv
613.805 578.27 614.027 578.75 614.473 579.102 cv
cp
618.914 573.395 mo
619.398 573.332 619.723 573.129 619.887 572.785 cv
619.98 572.598 620.027 572.328 620.027 571.977 cv
620.027 571.258 619.771 570.736 619.26 570.412 cv
618.748 570.088 618.016 569.926 617.063 569.926 cv
615.961 569.926 615.18 570.223 614.719 570.816 cv
614.461 571.145 614.293 571.633 614.215 572.281 cv
612.246 572.281 li
612.285 570.734 612.787 569.658 613.752 569.053 cv
614.717 568.447 615.836 568.145 617.109 568.145 cv
618.586 568.145 619.785 568.426 620.707 568.988 cv
621.621 569.551 622.078 570.426 622.078 571.613 cv
622.078 578.844 li
622.078 579.063 622.123 579.238 622.213 579.371 cv
622.303 579.504 622.492 579.57 622.781 579.57 cv
622.875 579.57 622.98 579.564 623.098 579.553 cv
623.215 579.541 623.34 579.523 623.473 579.5 cv
623.473 581.059 li
623.145 581.152 622.895 581.211 622.723 581.234 cv
622.551 581.258 622.316 581.27 622.02 581.27 cv
621.293 581.27 620.766 581.012 620.438 580.496 cv
620.266 580.223 620.145 579.836 620.074 579.336 cv
619.645 579.898 619.027 580.387 618.223 580.801 cv
617.418 581.215 616.531 581.422 615.563 581.422 cv
614.398 581.422 613.447 581.068 612.709 580.361 cv
611.971 579.654 611.602 578.77 611.602 577.707 cv
611.602 576.543 611.965 575.641 612.691 575 cv
613.418 574.359 614.371 573.965 615.551 573.816 cv
618.914 573.395 li
cp
625.59 563.785 mo
627.699 563.785 li
627.699 581 li
625.59 581 li
625.59 563.785 li
cp
630.918 563.785 mo
633.027 563.785 li
633.027 581 li
630.918 581 li
630.918 563.785 li
cp
f
816 472.45 mo
816 538 li
917.02 538 li
917.02 472.45 li
816 472.45 li
cp
816 472.45 mo
823.98 464 li
925 464 li
917.02 472.45 li
816 472.45 li
cp
917.02 472.45 mo
925 464 li
925 529.55 li
917.02 538 li
917.02 472.45 li
cp
1 .606744 .209903 .0367742 cmyk
f
2 lw
1 lj
816 472.45 mo
816 538 li
917.02 538 li
917.02 472.45 li
816 472.45 li
cp
816 472.45 mo
823.98 464 li
925 464 li
917.02 472.45 li
816 472.45 li
cp
917.02 472.45 mo
925 464 li
925 529.55 li
917.02 538 li
917.02 472.45 li
cp
0 0 0 0 cmyk
@
896.83 486.73 mo
896.83 483.03 li
906.4 489.38 li
896.83 495.72 li
896.83 492.01 li
884.59 492.01 li
884.59 486.73 li
896.83 486.73 li
cp
846.31 503.11 mo
846.31 499.41 li
855.35 505.76 li
846.31 512.1 li
846.31 508.41 li
822.91 508.41 li
822.91 503.11 li
846.31 503.11 li
cp
896.83 519.51 mo
896.83 515.8 li
906.4 522.14 li
896.83 528.48 li
896.83 524.79 li
884.59 524.79 li
884.59 519.51 li
896.83 519.51 li
cp
0 0 0 1 cmyk
f
895.76 485.66 mo
895.76 481.97 li
904.8 487.79 li
895.76 494.66 li
895.76 490.42 li
883.52 490.42 li
883.52 485.66 li
895.76 485.66 li
cp
844.71 502.06 mo
844.71 497.83 li
854.28 504.7 li
844.71 511.04 li
844.71 506.82 li
821.85 506.82 li
821.85 502.06 li
844.71 502.06 li
cp
0 0 0 0 cmyk
f
905.33 503.11 mo
905.33 499.41 li
914.38 505.76 li
905.33 512.1 li
905.33 508.41 li
884.07 508.41 li
884.07 503.11 li
905.33 503.11 li
cp
0 0 0 1 cmyk
f
904.26 502.06 mo
904.26 497.83 li
913.31 504.7 li
904.26 511.04 li
904.26 506.82 li
883 506.82 li
883 502.06 li
904.26 502.06 li
cp
895.76 518.45 mo
895.76 514.75 li
904.8 521.09 li
895.76 527.44 li
895.76 523.73 li
883.52 523.73 li
883.52 518.45 li
895.76 518.45 li
cp
0 0 0 0 cmyk
f
0 lj
879.81 477.73 mo
879.81 532.72 li
855.88 532.72 li
855.88 477.73 li
879.81 477.73 li
cp
.434333 .0663157 .0752575 0 cmyk
@
873.43 520.03 mo
873.43 527.44 li
863.33 527.44 li
863.33 520.03 li
873.43 520.03 li
cp
878.21 527.44 mo
878.21 529.55 li
876.62 529.55 li
876.62 527.44 li
878.21 527.44 li
cp
878.21 522.68 mo
878.21 525.31 li
876.62 525.31 li
876.62 522.68 li
878.21 522.68 li
cp
878.21 518.45 mo
878.21 520.55 li
876.62 520.55 li
876.62 518.45 li
878.21 518.45 li
cp
878.21 514.21 mo
878.21 516.34 li
876.62 516.34 li
876.62 514.21 li
878.21 514.21 li
cp
878.21 509.45 mo
878.21 511.58 li
876.62 511.58 li
876.62 509.45 li
878.21 509.45 li
cp
878.21 505.23 mo
878.21 507.34 li
876.62 507.34 li
876.62 505.23 li
878.21 505.23 li
cp
878.21 500.48 mo
878.21 503.11 li
876.62 503.11 li
876.62 500.48 li
878.21 500.48 li
cp
878.21 496.24 mo
878.21 498.35 li
876.62 498.35 li
876.62 496.24 li
878.21 496.24 li
cp
878.21 491.48 mo
878.21 493.59 li
876.62 493.59 li
876.62 491.48 li
878.21 491.48 li
cp
878.21 487.25 mo
878.21 489.38 li
876.62 489.38 li
876.62 487.25 li
878.21 487.25 li
cp
878.21 483.03 mo
878.21 484.62 li
876.62 485.14 li
876.62 483.03 li
878.21 483.03 li
cp
860.14 527.44 mo
860.14 529.55 li
858 529.55 li
858 527.44 li
860.14 527.44 li
cp
860.14 522.68 mo
860.14 525.31 li
858 525.31 li
858 522.68 li
860.14 522.68 li
cp
860.14 518.45 mo
860.14 520.55 li
858 520.55 li
858 518.45 li
860.14 518.45 li
cp
860.14 514.21 mo
860.14 516.34 li
858 516.34 li
858 514.21 li
860.14 514.21 li
cp
860.14 509.45 mo
860.14 511.58 li
858 511.58 li
858 509.45 li
860.14 509.45 li
cp
860.14 505.23 mo
860.14 507.34 li
858 507.34 li
858 505.23 li
860.14 505.23 li
cp
860.14 500.48 mo
860.14 503.11 li
858 503.11 li
858 500.48 li
860.14 500.48 li
cp
860.14 496.24 mo
860.14 498.35 li
858 498.35 li
858 496.24 li
860.14 496.24 li
cp
860.14 491.48 mo
860.14 493.59 li
858 493.59 li
858 491.48 li
860.14 491.48 li
cp
860.14 487.25 mo
860.14 489.38 li
858 489.38 li
858 487.25 li
860.14 487.25 li
cp
860.14 483.03 mo
860.14 485.14 li
858 485.14 li
858 483.03 li
860.14 483.03 li
cp
873.43 507.87 mo
873.43 515.27 li
863.33 515.27 li
863.33 507.87 li
873.43 507.87 li
cp
873.43 496.24 mo
873.43 503.65 li
863.33 503.65 li
863.33 496.24 li
873.43 496.24 li
cp
873.43 484.62 mo
873.43 491.48 li
863.33 491.48 li
863.33 484.62 li
873.43 484.62 li
cp
0 0 0 0 cmyk
f
830.88 477.73 mo
824.5 476.69 821.31 479.86 821.85 482.49 cv
817.07 483.55 818.66 489.38 820.79 489.38 cv
820.26 492.01 826.1 494.66 829.29 493.07 cv
830.88 495.72 834.62 495.72 838.86 496.24 cv
842.05 496.24 844.19 495.72 845.78 494.13 cv
845.78 494.66 845.78 494.66 845.78 494.66 cv
851.62 494.66 853.76 490.96 852.69 488.31 cv
853.22 488.31 853.22 488.31 853.22 488.31 cv
854.81 487.79 855.35 483.55 851.62 483.03 cv
852.16 482.49 852.16 482.49 852.16 482.49 cv
853.22 479.86 850.03 477.21 845.24 477.73 cv
845.24 477.21 845.24 477.21 845.24 477.21 cv
842.05 474.56 832.48 475.1 831.43 477.73 cv
830.88 477.73 li
cp
f
1.06 lw
830.88 477.73 mo
824.5 476.69 821.31 479.86 821.85 482.49 cv
817.07 483.55 818.66 489.38 820.79 489.38 cv
820.26 492.01 826.1 494.66 829.29 493.07 cv
830.88 495.72 834.62 495.72 838.86 496.24 cv
842.05 496.24 844.19 495.72 845.78 494.13 cv
845.78 494.66 845.78 494.66 845.78 494.66 cv
851.62 494.66 853.76 490.96 852.69 488.31 cv
853.22 488.31 853.22 488.31 853.22 488.31 cv
854.81 487.79 855.35 483.55 851.62 483.03 cv
852.16 482.49 852.16 482.49 852.16 482.49 cv
853.22 479.86 850.03 477.21 845.24 477.73 cv
845.24 477.21 845.24 477.21 845.24 477.21 cv
842.05 474.56 832.48 475.1 831.43 477.73 cv
830.88 477.73 li
cp
0 0 0 1 cmyk
@
841.355 563.785 mo
841.355 565.836 li
835.555 565.836 li
835.555 581 li
833.188 581 li
833.188 565.836 li
827.387 565.836 li
827.387 563.785 li
841.355 563.785 li
cp
843.262 568.449 mo
845.266 568.449 li
845.266 570.617 li
845.43 570.195 845.832 569.682 846.473 569.076 cv
847.113 568.471 847.852 568.168 848.688 568.168 cv
848.727 568.168 848.793 568.172 848.887 568.18 cv
848.98 568.188 849.141 568.203 849.367 568.227 cv
849.367 570.453 li
849.242 570.43 849.127 570.414 849.021 570.406 cv
848.916 570.398 848.801 570.395 848.676 570.395 cv
847.613 570.395 846.797 570.736 846.227 571.42 cv
845.656 572.104 845.371 572.891 845.371 573.781 cv
845.371 581 li
843.262 581 li
843.262 568.449 li
cp
853.473 579.102 mo
853.918 579.453 854.445 579.629 855.055 579.629 cv
855.797 579.629 856.516 579.457 857.211 579.113 cv
858.383 578.543 858.969 577.609 858.969 576.313 cv
858.969 574.613 li
858.711 574.777 858.379 574.914 857.973 575.023 cv
857.566 575.133 857.168 575.211 856.777 575.258 cv
855.5 575.422 li
854.734 575.523 854.16 575.684 853.777 575.902 cv
853.129 576.27 852.805 576.855 852.805 577.66 cv
852.805 578.27 853.027 578.75 853.473 579.102 cv
cp
857.914 573.395 mo
858.398 573.332 858.723 573.129 858.887 572.785 cv
858.98 572.598 859.027 572.328 859.027 571.977 cv
859.027 571.258 858.771 570.736 858.26 570.412 cv
857.748 570.088 857.016 569.926 856.063 569.926 cv
854.961 569.926 854.18 570.223 853.719 570.816 cv
853.461 571.145 853.293 571.633 853.215 572.281 cv
851.246 572.281 li
851.285 570.734 851.787 569.658 852.752 569.053 cv
853.717 568.447 854.836 568.145 856.109 568.145 cv
857.586 568.145 858.785 568.426 859.707 568.988 cv
860.621 569.551 861.078 570.426 861.078 571.613 cv
861.078 578.844 li
861.078 579.063 861.123 579.238 861.213 579.371 cv
861.303 579.504 861.492 579.57 861.781 579.57 cv
861.875 579.57 861.98 579.564 862.098 579.553 cv
862.215 579.541 862.34 579.523 862.473 579.5 cv
862.473 581.059 li
862.145 581.152 861.895 581.211 861.723 581.234 cv
861.551 581.258 861.316 581.27 861.02 581.27 cv
860.293 581.27 859.766 581.012 859.438 580.496 cv
859.266 580.223 859.145 579.836 859.074 579.336 cv
858.645 579.898 858.027 580.387 857.223 580.801 cv
856.418 581.215 855.531 581.422 854.563 581.422 cv
853.398 581.422 852.447 581.068 851.709 580.361 cv
850.971 579.654 850.602 578.77 850.602 577.707 cv
850.602 576.543 850.965 575.641 851.691 575 cv
852.418 574.359 853.371 573.965 854.551 573.816 cv
857.914 573.395 li
cp
864.531 568.449 mo
866.535 568.449 li
866.535 570.23 li
867.129 569.496 867.758 568.969 868.422 568.648 cv
869.086 568.328 869.824 568.168 870.637 568.168 cv
872.418 568.168 873.621 568.789 874.246 570.031 cv
874.59 570.711 874.762 571.684 874.762 572.949 cv
874.762 581 li
872.617 581 li
872.617 573.09 li
872.617 572.324 872.504 571.707 872.277 571.238 cv
871.902 570.457 871.223 570.066 870.238 570.066 cv
869.738 570.066 869.328 570.117 869.008 570.219 cv
868.43 570.391 867.922 570.734 867.484 571.25 cv
867.133 571.664 866.904 572.092 866.799 572.533 cv
866.693 572.975 866.641 573.605 866.641 574.426 cv
866.641 581 li
864.531 581 li
864.531 568.449 li
cp
879.129 577.063 mo
879.191 577.766 879.367 578.305 879.656 578.68 cv
880.188 579.359 881.109 579.699 882.422 579.699 cv
883.203 579.699 883.891 579.529 884.484 579.189 cv
885.078 578.85 885.375 578.324 885.375 577.613 cv
885.375 577.074 885.137 576.664 884.66 576.383 cv
884.355 576.211 883.754 576.012 882.855 575.785 cv
881.18 575.363 li
880.109 575.098 879.32 574.801 878.813 574.473 cv
877.906 573.902 877.453 573.113 877.453 572.105 cv
877.453 570.918 877.881 569.957 878.736 569.223 cv
879.592 568.488 880.742 568.121 882.188 568.121 cv
884.078 568.121 885.441 568.676 886.277 569.785 cv
886.801 570.488 887.055 571.246 887.039 572.059 cv
885.047 572.059 li
885.008 571.582 884.84 571.148 884.543 570.758 cv
884.059 570.203 883.219 569.926 882.023 569.926 cv
881.227 569.926 880.623 570.078 880.213 570.383 cv
879.803 570.688 879.598 571.09 879.598 571.59 cv
879.598 572.137 879.867 572.574 880.406 572.902 cv
880.719 573.098 881.18 573.27 881.789 573.418 cv
883.184 573.758 li
884.699 574.125 885.715 574.48 886.23 574.824 cv
887.051 575.363 887.461 576.211 887.461 577.367 cv
887.461 578.484 887.037 579.449 886.189 580.262 cv
885.342 581.074 884.051 581.48 882.316 581.48 cv
880.449 581.48 879.127 581.057 878.35 580.209 cv
877.572 579.361 877.156 578.313 877.102 577.063 cv
879.129 577.063 li
cp
898.166 569.117 mo
899.053 569.805 899.586 570.988 899.766 572.668 cv
897.715 572.668 li
897.59 571.895 897.305 571.252 896.859 570.74 cv
896.414 570.229 895.699 569.973 894.715 569.973 cv
893.371 569.973 892.41 570.629 891.832 571.941 cv
891.457 572.793 891.27 573.844 891.27 575.094 cv
891.27 576.352 891.535 577.41 892.066 578.27 cv
892.598 579.129 893.434 579.559 894.574 579.559 cv
895.449 579.559 896.143 579.291 896.654 578.756 cv
897.166 578.221 897.52 577.488 897.715 576.559 cv
899.766 576.559 li
899.531 578.223 898.945 579.439 898.008 580.209 cv
897.07 580.979 895.871 581.363 894.41 581.363 cv
892.77 581.363 891.461 580.764 890.484 579.564 cv
889.508 578.365 889.02 576.867 889.02 575.07 cv
889.02 572.867 889.555 571.152 890.625 569.926 cv
891.695 568.699 893.059 568.086 894.715 568.086 cv
896.129 568.086 897.279 568.43 898.166 569.117 cv
cp
909.732 578.053 mo
910.252 576.994 910.512 575.816 910.512 574.52 cv
910.512 573.348 910.324 572.395 909.949 571.66 cv
909.355 570.504 908.332 569.926 906.879 569.926 cv
905.59 569.926 904.652 570.418 904.066 571.402 cv
903.48 572.387 903.188 573.574 903.188 574.965 cv
903.188 576.301 903.48 577.414 904.066 578.305 cv
904.652 579.195 905.582 579.641 906.855 579.641 cv
908.254 579.641 909.213 579.111 909.732 578.053 cv
cp
911.039 569.703 mo
912.156 570.781 912.715 572.367 912.715 574.461 cv
912.715 576.484 912.223 578.156 911.238 579.477 cv
910.254 580.797 908.727 581.457 906.656 581.457 cv
904.93 581.457 903.559 580.873 902.543 579.705 cv
901.527 578.537 901.02 576.969 901.02 575 cv
901.02 572.891 901.555 571.211 902.625 569.961 cv
903.695 568.711 905.133 568.086 906.938 568.086 cv
908.555 568.086 909.922 568.625 911.039 569.703 cv
cp
917.41 578.246 mo
917.98 579.152 918.895 579.605 920.152 579.605 cv
921.129 579.605 921.932 579.186 922.561 578.346 cv
923.189 577.506 923.504 576.301 923.504 574.73 cv
923.504 573.145 923.18 571.971 922.531 571.209 cv
921.883 570.447 921.082 570.066 920.129 570.066 cv
919.066 570.066 918.205 570.473 917.545 571.285 cv
916.885 572.098 916.555 573.293 916.555 574.871 cv
916.555 576.215 916.84 577.34 917.41 578.246 cv
cp
922.145 568.836 mo
922.52 569.07 922.945 569.48 923.422 570.066 cv
923.422 563.727 li
925.449 563.727 li
925.449 581 li
923.551 581 li
923.551 579.254 li
923.059 580.027 922.477 580.586 921.805 580.93 cv
921.133 581.273 920.363 581.445 919.496 581.445 cv
918.098 581.445 916.887 580.857 915.863 579.682 cv
914.84 578.506 914.328 576.941 914.328 574.988 cv
914.328 573.16 914.795 571.576 915.729 570.236 cv
916.662 568.896 917.996 568.227 919.73 568.227 cv
920.691 568.227 921.496 568.43 922.145 568.836 cv
cp
936.379 568.795 mo
937.215 569.213 937.852 569.754 938.289 570.418 cv
938.711 571.051 938.992 571.789 939.133 572.633 cv
939.258 573.211 939.32 574.133 939.32 575.398 cv
930.121 575.398 li
930.16 576.672 930.461 577.693 931.023 578.463 cv
931.586 579.232 932.457 579.617 933.637 579.617 cv
934.738 579.617 935.617 579.254 936.273 578.527 cv
936.648 578.105 936.914 577.617 937.07 577.063 cv
939.145 577.063 li
939.09 577.523 938.908 578.037 938.6 578.604 cv
938.291 579.17 937.945 579.633 937.563 579.992 cv
936.922 580.617 936.129 581.039 935.184 581.258 cv
934.676 581.383 934.102 581.445 933.461 581.445 cv
931.898 581.445 930.574 580.877 929.488 579.74 cv
928.402 578.604 927.859 577.012 927.859 574.965 cv
927.859 572.949 928.406 571.313 929.5 570.055 cv
930.594 568.797 932.023 568.168 933.789 568.168 cv
934.68 568.168 935.543 568.377 936.379 568.795 cv
cp
937.152 573.723 mo
937.066 572.809 936.867 572.078 936.555 571.531 cv
935.977 570.516 935.012 570.008 933.66 570.008 cv
932.691 570.008 931.879 570.357 931.223 571.057 cv
930.566 571.756 930.219 572.645 930.18 573.723 cv
937.152 573.723 li
cp
941.965 568.449 mo
943.969 568.449 li
943.969 570.617 li
944.133 570.195 944.535 569.682 945.176 569.076 cv
945.816 568.471 946.555 568.168 947.391 568.168 cv
947.43 568.168 947.496 568.172 947.59 568.18 cv
947.684 568.188 947.844 568.203 948.07 568.227 cv
948.07 570.453 li
947.945 570.43 947.83 570.414 947.725 570.406 cv
947.619 570.398 947.504 570.395 947.379 570.395 cv
946.316 570.395 945.5 570.736 944.93 571.42 cv
944.359 572.104 944.074 572.891 944.074 573.781 cv
944.074 581 li
941.965 581 li
941.965 568.449 li
cp
f
570 543 mo
570 470.97 li
592.86 470.97 li
592.86 543 li
570 543 li
cp
592.86 470.97 mo
570 470.97 li
590.72 456 li
610 456 li
592.86 470.97 li
cp
610 456 mo
610 524.65 li
592.86 543 li
592.86 470.97 li
610 456 li
cp
1 .606744 .209903 .0367742 cmyk
f
2 lw
1 lj
570 543 mo
570 470.97 li
592.86 470.97 li
592.86 543 li
570 543 li
cp
592.86 470.97 mo
570 470.97 li
590.72 456 li
610 456 li
592.86 470.97 li
cp
610 456 mo
610 524.65 li
592.86 543 li
592.86 470.97 li
610 456 li
cp
0 0 0 0 cmyk
@
604.99 471.64 mo
604.99 460.08 li
604.99 495.43 mo
604.99 483.87 li
604.99 518.53 mo
604.99 506.97 li
610 513.09 mo
592.86 531.44 li
610 501.55 mo
592.86 519.21 li
610 489.99 mo
592.86 506.97 li
610 478.43 mo
592.86 495.43 li
610 467.56 mo
592.86 483.2 li
592.86 470.97 mo
610 456 li
592.86 531.44 mo
570 531.44 li
592.86 519.21 mo
570 519.21 li
592.86 506.97 mo
570 506.97 li
592.86 494.74 mo
570 494.74 li
592.86 483.2 mo
570 483.2 li
599.29 536.19 mo
599.29 524.65 li
599.29 513.09 mo
599.29 501.55 li
599.29 489.32 mo
599.29 477.76 li
@
742.01 548 mo
742.01 494.51 li
690 494.51 li
690 548 li
742.01 548 li
cp
742.01 494.51 mo
742.01 462.41 li
690 462.41 li
690 494.51 li
742.01 494.51 li
cp
690 462.41 mo
699.6 454.76 li
750 454.76 li
742.01 462.41 li
690 462.41 li
cp
742.01 548 mo
750 538.83 li
750 486.85 li
742.01 494.51 li
742.01 548 li
cp
742.01 494.51 mo
750 486.1 li
750 454.76 li
742.01 462.41 li
742.01 494.51 li
cp
1 .606744 .209903 .0367742 cmyk
f
742.01 548 mo
742.01 494.51 li
690 494.51 li
690 548 li
742.01 548 li
cp
742.01 494.51 mo
742.01 462.41 li
690 462.41 li
690 494.51 li
742.01 494.51 li
cp
690 462.41 mo
699.6 454.76 li
750 454.76 li
742.01 462.41 li
690 462.41 li
cp
742.01 548 mo
750 538.83 li
750 486.85 li
742.01 494.51 li
742.01 548 li
cp
742.01 494.51 mo
750 486.1 li
750 454.76 li
742.01 462.41 li
742.01 494.51 li
cp
0 0 0 0 cmyk
@
690 541.88 mo
742.01 541.88 li
690 494.51 mo
741.19 494.51 li
@
711.6 523.54 mo
711.6 530.42 li
709.2 530.42 li
714.79 537.29 li
721.2 530.42 li
718.01 530.42 li
718.01 523.54 li
711.6 523.54 li
cp
711.6 517.44 mo
711.6 510.56 li
709.2 510.56 li
714.79 503.68 li
721.2 510.56 li
718.01 510.56 li
718.01 517.44 li
711.6 517.44 li
cp
697.2 518.2 mo
704.4 518.2 li
704.4 515.15 li
711.6 520.49 li
704.4 526.61 li
704.4 523.54 li
697.2 523.54 li
697.2 518.2 li
cp
733.2 518.2 mo
725.21 518.2 li
725.21 515.15 li
718.01 520.49 li
725.21 526.61 li
725.21 523.54 li
733.2 523.54 li
733.2 518.2 li
cp
f
0 lj
742.01 473.1 mo
690 473.1 li
746.81 457.83 mo
694.8 457.83 li
742.01 483.8 mo
690 483.8 li
750 465.46 mo
742.01 473.1 li
750 475.39 mo
742.01 483.8 li
745.99 458.59 mo
745.99 489.15 li
705.19 462.41 mo
705.19 473.1 li
725.21 462.41 mo
725.21 473.1 li
705.19 484.56 mo
705.19 494.51 li
725.21 484.56 mo
725.21 494.51 li
715.61 473.1 mo
715.61 483.8 li
695.59 473.1 mo
695.59 483.8 li
735.6 473.1 mo
735.6 483.8 li
715.61 454.76 mo
705.19 462.41 li
735.6 454.76 mo
725.21 462.41 li
750 533.49 mo
742.01 541.88 li
@
704.355 563.785 mo
706.711 563.785 li
706.711 581 li
704.355 581 li
704.355 563.785 li
cp
710.707 563.785 mo
718.453 563.785 li
719.984 563.785 721.219 564.217 722.156 565.08 cv
723.094 565.943 723.563 567.156 723.563 568.719 cv
723.563 570.063 723.145 571.232 722.309 572.229 cv
721.473 573.225 720.188 573.723 718.453 573.723 cv
713.039 573.723 li
713.039 581 li
710.707 581 li
710.707 563.785 li
cp
719.801 566.152 mo
719.285 565.91 718.578 565.789 717.68 565.789 cv
713.039 565.789 li
713.039 571.754 li
717.68 571.754 li
718.727 571.754 719.576 571.531 720.229 571.086 cv
720.881 570.641 721.207 569.855 721.207 568.73 cv
721.207 567.465 720.738 566.605 719.801 566.152 cv
cp
728.008 575.445 mo
728.063 576.422 728.293 577.215 728.699 577.824 cv
729.473 578.965 730.836 579.535 732.789 579.535 cv
733.664 579.535 734.461 579.41 735.18 579.16 cv
736.57 578.676 737.266 577.809 737.266 576.559 cv
737.266 575.621 736.973 574.953 736.387 574.555 cv
735.793 574.164 734.863 573.824 733.598 573.535 cv
731.266 573.008 li
729.742 572.664 728.664 572.285 728.031 571.871 cv
726.938 571.152 726.391 570.078 726.391 568.648 cv
726.391 567.102 726.926 565.832 727.996 564.84 cv
729.066 563.848 730.582 563.352 732.543 563.352 cv
734.348 563.352 735.881 563.787 737.143 564.658 cv
738.404 565.529 739.035 566.922 739.035 568.836 cv
736.844 568.836 li
736.727 567.914 736.477 567.207 736.094 566.715 cv
735.383 565.816 734.176 565.367 732.473 565.367 cv
731.098 565.367 730.109 565.656 729.508 566.234 cv
728.906 566.813 728.605 567.484 728.605 568.25 cv
728.605 569.094 728.957 569.711 729.66 570.102 cv
730.121 570.352 731.164 570.664 732.789 571.039 cv
735.203 571.59 li
736.367 571.855 737.266 572.219 737.898 572.68 cv
738.992 573.484 739.539 574.652 739.539 576.184 cv
739.539 578.09 738.846 579.453 737.459 580.273 cv
736.072 581.094 734.461 581.504 732.625 581.504 cv
730.484 581.504 728.809 580.957 727.598 579.863 cv
726.387 578.777 725.793 577.305 725.816 575.445 cv
728.008 575.445 li
cp
0 0 0 1 cmyk
f
[6 6 ] 0 dsh
391.53 362.67 mo
559.47 288.33 li
.212253 .826078 .729854 .093019 cmyk
@
386.04 365.09 mo
391.74 358.2 li
391.53 362.67 li
394.98 365.51 li
386.04 365.09 li
cp
f
[] 0 dsh
386.04 365.09 mo
391.74 358.2 li
391.53 362.67 li
394.98 365.51 li
386.04 365.09 li
cp
@
564.96 285.91 mo
559.26 292.8 li
559.47 288.33 li
556.02 285.49 li
564.96 285.91 li
cp
f
564.96 285.91 mo
559.26 292.8 li
559.47 288.33 li
556.02 285.49 li
564.96 285.91 li
cp
@
559.41 503.06 mo
388.59 374.94 li
.635492 .400641 .0580453 0 cmyk
@
564.21 506.66 mo
555.41 505.06 li
559.41 503.06 li
560.21 498.66 li
564.21 506.66 li
cp
f
564.21 506.66 mo
555.41 505.06 li
559.41 503.06 li
560.21 498.66 li
564.21 506.66 li
cp
@
383.79 371.34 mo
392.59 372.94 li
388.59 374.94 li
387.79 379.34 li
383.79 371.34 li
cp
f
383.79 371.34 mo
392.59 372.94 li
388.59 374.94 li
387.79 379.34 li
383.79 371.34 li
cp
@
681.76 500.9 mo
618.24 500.1 li
@
687.76 500.97 mo
679.71 504.87 li
681.76 500.9 li
679.81 496.87 li
687.76 500.97 li
cp
f
687.76 500.97 mo
679.71 504.87 li
681.76 500.9 li
679.81 496.87 li
687.76 500.97 li
cp
@
612.24 500.03 mo
620.29 496.13 li
618.24 500.1 li
620.19 504.13 li
612.24 500.03 li
cp
f
612.24 500.03 mo
620.29 496.13 li
618.24 500.1 li
620.19 504.13 li
612.24 500.03 li
cp
@
807.76 501 mo
758.24 501 li
@
813.76 501 mo
805.76 505 li
807.76 501 li
805.76 497 li
813.76 501 li
cp
f
813.76 501 mo
805.76 505 li
807.76 501 li
805.76 497 li
813.76 501 li
cp
@
752.24 501 mo
760.24 497 li
758.24 501 li
760.24 505 li
752.24 501 li
cp
f
752.24 501 mo
760.24 497 li
758.24 501 li
760.24 505 li
752.24 501 li
cp
@
1337 472 mo
1161.73 472 li
1179.82 471.043 1196.78 463.321 1207.57 450.531 cv
1213.75 459.419 1224.96 464.564 1236.67 464.566 cv
1240.28 464.566 1243.95 464.076 1247.53 463.051 cv
1261.29 459.113 1270.35 448.262 1270.35 436.268 cv
1270.35 435.075 1270.26 433.871 1270.08 432.663 cv
1274.77 433.758 1279.55 434.292 1284.3 434.292 cv
1298.56 434.291 1312.47 429.468 1322.66 420.556 cv
1330.64 413.566 1335.55 404.728 1337 395.444 cv
1337 472 li
1154.09 472 mo
1034 472 li
1034 271 li
1337 271 li
1337 383.877 li
1336.55 380.96 1335.74 378.057 1334.58 375.211 cv
1328.2 359.581 1312.1 348.24 1292.77 345.626 cv
1294.9 339.928 1295.92 334.143 1295.92 328.448 cv
1295.92 305.193 1278.98 283.48 1251.84 274.814 cv
1243.85 272.263 1235.64 271.052 1227.55 271.052 cv
1201.43 271.054 1176.62 283.678 1165.24 304.777 cv
1154.83 295.422 1140.54 290.499 1126.05 290.498 cv
1117.26 290.498 1108.39 292.31 1100.27 296.056 cv
1082.85 304.081 1072.47 319.35 1072.47 335.488 cv
1072.47 339.301 1073.05 343.159 1074.25 346.977 cv
1061.96 350.97 1052.06 356.799 1045.19 363.708 cv
1038.24 370.703 1034.39 378.828 1034.39 387.24 cv
1034.39 389.817 1034.75 392.418 1035.49 395.017 cv
1038.28 404.804 1046.11 413.437 1057.23 419.991 cv
1068.29 426.498 1082.62 430.967 1098.62 432.466 cv
1104.02 452.171 1122.72 467.319 1146.31 471.163 cv
1148.9 471.586 1151.5 471.863 1154.09 472 cv
1157.92 471.101 mo
1157.91 471.101 1157.91 471.101 1157.91 471.101 cv
1154.12 471.101 1150.29 470.798 1146.47 470.176 cv
1123.07 466.363 1104.64 451.282 1099.49 431.872 cv
1099.4 431.533 li
1099.06 431.502 li
1083.04 430.049 1068.72 425.594 1057.74 419.129 cv
1046.76 412.663 1039.14 404.196 1036.45 394.743 cv
1035.73 392.231 1035.39 389.723 1035.39 387.24 cv
1035.39 379.142 1039.09 371.272 1045.9 364.413 cv
1052.72 357.557 1062.65 351.732 1075.03 347.776 cv
1075.51 347.623 li
1075.35 347.144 li
1074.08 343.27 1073.47 339.355 1073.47 335.488 cv
1073.47 319.792 1083.56 304.859 1100.69 296.964 cv
1108.67 293.283 1117.39 291.498 1126.05 291.498 cv
1126.05 291.498 1126.05 291.498 1126.05 291.498 cv
1140.53 291.497 1154.81 296.504 1165.04 305.947 cv
1165.52 306.39 li
1165.82 305.812 li
1165.82 305.812 li
1176.83 284.774 1201.5 272.052 1227.54 272.052 cv
1227.54 272.052 1227.54 272.052 1227.55 272.052 cv
1235.54 272.052 1243.65 273.249 1251.54 275.766 cv
1278.34 284.331 1294.92 305.698 1294.92 328.448 cv
1294.92 334.219 1293.85 340.082 1291.61 345.859 cv
1291.38 346.457 li
1292.02 346.536 li
1311.33 348.946 1327.37 360.188 1333.66 375.589 cv
1335.53 380.196 1336.45 384.946 1336.45 389.658 cv
1336.45 400.698 1331.43 411.539 1322 419.804 cv
1312.02 428.536 1298.34 433.292 1284.3 433.292 cv
1284.3 433.292 1284.3 433.292 1284.3 433.292 cv
1279.38 433.292 1274.43 432.71 1269.58 431.515 cv
1268.83 431.329 li
1268.97 432.091 li
1269.23 433.492 1269.35 434.888 1269.35 436.268 cv
1269.36 447.733 1260.67 458.243 1247.25 462.089 cv
1243.76 463.088 1240.19 463.566 1236.67 463.566 cv
1225.01 463.568 1213.89 458.319 1208.03 449.425 cv
1207.65 448.859 li
1207.22 449.383 li
1195.95 463.115 1177.39 471.101 1157.92 471.101 cv
1144.03 421.147 mo
1156.31 437.883 li
1168.63 422.404 li
1191.62 423.684 li
1188.55 405.703 li
1210.25 392.715 li
1187.09 383.653 li
1191.67 364.429 li
1167.13 367.002 li
1156.36 351.523 li
1155.94 352.049 li
1144.05 366.985 li
1122.64 363.142 li
1122.64 382.427 li
1102.44 395.452 li
1122.59 403.242 li
1119.54 423.715 li
1144.03 421.147 li
1216.48 379.437 mo
1231.78 394.823 li
1245.52 378.181 li
1268.6 382.046 li
1264 361.498 li
1284.12 352.416 li
1264 340.738 li
1268.61 322.702 li
1245.52 325.284 li
1231.73 309.865 li
1231.36 310.329 li
1219.46 325.282 li
1196.44 322.708 li
1199.52 339.494 li
1181.06 352.389 li
1198.04 362.737 li
1196.5 382.004 li
1216.48 379.437 li
1156.35 436.237 mo
1144.49 420.093 li
1120.72 422.586 li
1123.69 402.598 li
1104.64 395.228 li
1123.64 382.972 li
1123.64 364.338 li
1144.47 368.075 li
1156.3 353.197 li
1166.65 368.058 li
1190.37 365.571 li
1185.91 384.267 li
1207.99 392.904 li
1187.45 405.197 li
1190.42 422.616 li
1168.17 421.376 li
1156.35 436.237 li
1136 379 mo
1136 410 li
1173 410 li
1173 379 li
1136 379 li
1231.72 393.336 mo
1216.84 378.383 li
1197.6 380.855 li
1199.08 362.203 li
1182.88 352.331 li
1200.62 339.946 li
1197.66 323.852 li
1219.9 326.337 li
1231.77 311.415 li
1245.12 326.335 li
1267.29 323.857 li
1262.84 341.222 li
1281.94 352.304 li
1262.84 360.922 li
1267.3 380.814 li
1245.12 377.099 li
1231.72 393.336 li
1215 336 mo
1215 367 li
1252 367 li
1252 336 li
1215 336 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 588 ]ct
[305 0 0 203 1033 115 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 305 
/H 203 
/M[305 0 0 -203 0 203 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 305 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 305 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 305 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 305 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcNdj%fle:#7:hJ%h9$W$k!@G!mL^s!0[Be!<N<)"U,,0"o\W,!s/K'JcLB&JcLB&JcLB&JcPQG%fle:
#7:hJ%h9$W$k!@G!h01A!6"pB!<N<)"U,,0"o\W+!s/MK!.k3&!.k3&!.k3&!3uS5!<riB&fDT2*ul@F
+9!M^+pT24*#f\+$3or!JcLB&r;[6."UPGD%1s-]&.f?bq$dQ9%1ERO#6P%&!.k3n!!WH)!s&H'!V$-n
!WiH*!<LaOJcLB&JcLB&kPu1s$PF9t,9S$R*?ugU+sSEY+o<Jo+sJ6W+<MRJ*[)gH((:;^!9F34!7:cY
!X8o;%h]?]'+56\%h0!Z%1N%A$kEmY%1<^V%h]3W"Td9VJcM;@"p"])!WW3%mJqh=JcLB&JcNC_'EJLS
*#fk@+<MUG+Wr!M,:4EZ+!LP+'I+hH+s/3T+!i'Q*ZuUI,9Rg7$3Bl$JcLT,"T\f9&.f?^&.T0Y%M'![
$4d[T&IT$B%1ip]%1Nm[%h0!Z$ka'Y#R(70!.k4"!!WK*!WW3$!WE'!!U]pi!<<*#q>^Tu!!35X!.k3&
!.k3&!:Tsj!t?"grZMq"-6=KZ+seBT,q'lX.OH>g,pXc7,8DCH+W_sV*?cUP,pt)h,:4WY*>]+ca8gel
]`8rO"UPPF$O[@S$P<p\&.JsV&.&OP$OI7L$k3"B'+P?_&df*[&dJ[M$OR=P$k3RL!W)kK!.k4D!!<6%
!!23^!!05&JcLB&JcMVI)@@9&+sS6Y+X8K\,p"9U,UOl_,UFld+Y+car?V=d!%%Uf&gnhI+"8cg-RL/c
+sA*O)&!;WR/hg=nGjI2$4RLV$kWjV&df3Y%Ls!\%h&mU%LWOR#n-\@r=0ST%M'$_%hT<Y%1*@L%1WgY
&/5Wb#6E$KjT'l4g&V*SrrMNf!!;<`"T\W*!WrJ_!.k3&!.k3&!;6C+";)\%+sA6T,:Fuf-7L5h+seK[
r?V[q+snT^-m^2:,T%aR+=/9Z+snZ]-R:&b,9nBY+=SQY,8CF,!.k3g!"f8;%1s'Z%LNRS$OR+H%hT3\
r=&r=%1<IM$46P<*"EGf&.B*[%h9*X#Rh(M$OmOR%h'*_$kN^H!!%TNNrT4^!!2foJcLB&JcLB&WrO4H
(*OqH+sA3W,psrb-RL5f+seT],UO``-7(#a.O?A9,6/u,,:+T\,:+Q^,pjla,pO`_,:+NX-m0f\)@)c4
JcPNF#6P8B&.K*Y&H3+Q$jm=I#n@=R%h&mW$k*LO$jdCN$2=uJ%1`pY%1`pX$OdCP$k3[W%1j!Z'+>K^
#mAQSJcN^hrW*!#kPtS`hZ*ZX!WW7R!.k3&!.k4.!!<HD-R\X7r?gbTs!IUjs!%Ifs!7Ujs!Ians![jq
""5N;#jVJB!3?/(":YbJ%M&@Hrsnu9kmmLtrt58Brt#,>rseu:rsSf5!soDD".oRF!;?Hn!V6<k!RCcF
!R^u0!.k3&!.k3T!!NWF+<MpWo-O8\r?_+^r?hOkr?qOf&gJVH,UOic-R^Al.4?\k-mfc7T)aHCqu?g%
$P3jI%Jp\9%K-_.%JLD3%K-_8$N1S8&-!+;$O@(H#n%%K'FP#k!.k3m!!*-(]Dr$7#Qk*^!.k3o!!!)2
!.k43!!`TA+s&6[-n,$As!@[jr?M=dq'Gh^q^)1fs!Ranq'H%fq]uLr,q(&b,UO<1mJqh=YlG"1$4[FV
%13I@%0$h;&,Qt=%/UP-%g3@P%1N^I$k!IA$NCS,%L<LP%1<RP&-r?3!.k4K!!!&I!;ura!!!&K!.k3&
!.k3<!!iuW-71,a.k)qG./tXo-3#7i,6/t_-Mo+d-Mo1j./tap-Mo1f-421M-R^Go+t"QH!PSPc!9=+a
"qM=Y&do?N$i^\9&-!4<')N.:&,?e8&,Qh9$i^S4%f6_3%L<LQ%M00Z&Io*9!.k3U!!33&!n@;N!;cfa
!!NB(!!*0&U]>uHJcOm4JcP!7#R;P#,U=]`.4"d=r?qUlr?^hYs!IIfr@.[nr?_Cf$R.#J-R^5i.jQPc
$1IqH!4;e.!tZ(C&-3:Mq[WQ8r=T&Bk7@G#q[EK7r=KPQ&ebof&eGQa$4[UW&.eu?!.k1N!W)is!RLiH
!V-3j!Vl]q!nI@'!.k3&!1a)s!>?e',:Foc-RL>A./PCh-2f1b-het`-iY[r.K:gr-iG@i,R>hD,parf
.4$>?,68DX^]8rdkPtnp&.K-`&.]<\&c3%9&,d+?'&aB$$NCP7%K?t;&Hi^Z',)#X%LEXV%LWdU&J5BO
o)O@B[/^40#5S<"!S@DK!<3)k!!!&p!!30%"/Z'M!.k3&!71]R"WSg7.juep.4-Dcr?_Ijs!Rgpr@.ap
r?hChq^MCjs!RUhs!@Ohs!Ran"">ZF/.<gP,pk,i-7C;d,Td5O!1a)t!tZ%W&J,H`&.]Hcr=f2Crt#&:
rXAi:r=So;rseo8pCHj-q[X5H$k<s]&.f?c&.oNh%M'$O_>o/fkPtS`S,e-@JcLB&KE)#[*t0A@-R^Jn
-7UDj-m^2<-N>Lm.K:mt.JkLm./bUn.fUst..ntb-N,=h.1[mO/0l\m,:Frb-71)c,S/]2jT'l4li8"0
&/,]i&.oE^&J,Ne'GM/m&J5Qc%1NdW%1NdWq%3K7r=/c:oapp3r=Ji9%hT0`$ka0_&J>Qd&ebfe#P8"J
!4`(0"76*g!T=$1!/:IR!WE(N!.k4"!!O2f.4$Giq'j$+oI'_[!KdAT!!NZ?%h'!YkmkN>!!U7?JcLB&
JcLB&JcLT,"TfYm-7pYI-n_JJ!](r#hZ/6.e,T^S$P!XY%h95]&+^;5$j6Tp!1a)l!<<*#l2\Nu!!1(>
JcLB&JcNC_#Ql1u-nQ\q.OY$AfdYT'""l&L"g.i]!!NE5%hK<]!YQ"Rq%'_A!t5MK!oX.@!.k4?!!!'!
!!!%r!!30$!qu\H!.k3&!/gg_"X#3C/1E"r.f_$o.^1?(0IIqIhuJ?/f)Q*Y&Io?a%h9-`%f$XL&G-M:
#n7LU"dB"^!!!/\!5JR:!W`9&`rL\kJcLB&q>_65$P=0p+s\K`.4Qhs-mg5^)\itp"5<e^#ULoO.3pMr
-nN[og+!7X,q1Dm#Hn-J!#5M;"UGJF$k*RS%LrpW$kNmW#RCV8gAhK_%M9<b$PX-`!>?'E&-WdZ&/,ZY
iW,)@r;lTl!WW6%g&M0T!!08'o)JakOT9t5JcN(V$NUSK*[N<b/M&8$/bpq*-n-Yq,UXu`*#/b]nGr(Z
$O%S#/1E##-mpVo.]Fp&-S$Yr,UETl!.k4L!"&l9%LWdU&J,<\&,?\C&.fHd%hKBb%LN=>i;a2e'+bih
%hfKa'FsmLfb)jK"VM@X%hSlJ!6P9K!sT&3!<<-$!!35t!=Jl-!<E0%"9Jc2!s.6Y!!2utV>pVt!rW*!
!TX7B!3lM(!TsF_!U]rE!!!&s!/(=Q"qh=b.jZeo1+b.3.krG+q(3(0.Om)(.4?et.4c\c)$o=($j7h(
0.SS&/M&G%/2#7!gFELV-S@#*.jbG(!71]U!t#VX',qSt%hTB`'+5EJ&.T<`%ho]i',D;t(_I>i"m#^l
!YZ7Y$kX$`&J5Nc!#)=D#8@pa&.f9`!oj94!87DQ!NH.f!!!%c!.k3&!4`(A"q_t(.4->l,;(N!/M&M+
/h?]K$83q\/1i>".4?Sor[%[j(^Tg8oDf=%*[WBi/h8J%/1W;!/ZC6$.Ob9J""tuG"TACU!!<?1&etim
().Yu*"NSl%hT?b%f$YJ&eYcf',2,o().K"()7Su$NoVn%07"R'b:fe'+b`f'+PZ%&_[g&()7;j%M'-`
"0qpT!!<6(!<LpT!<rSg!!!/r!2'>l!Ta<5!.k3&!:Bgk!=g)!.4QhE/+G%f/b:Lr.ki%W!posk!?NU@
/2Z<:^aodA.P*,&/M8Y!!R1VV!!E<-%29KQ'`Sj:'`AU9&d/[X$jZn1!;$6q!=ohU%hK)A&df<e&J5Na
&.f<P!/:IR!WE)a!<3)M!!!&@!7q5N!W;uu!j_lY!.k44!5AL;!Yce+.4G0Er@7gtnL4Dhr@AL1.kE5%
.kE5%.kN;&.N]H.q>g3h"r8^@-nZo(Te$-ms"++#!@Sod!/pm^!=B>O'bV8\'DrO6'`/IA&cWFB&cWFA
&Hr^Z'G(]Tmf3P#(E!Vo#S+legCX`*'+b]b%M00`%'flb!!<6'!<M?`rrMQg!WrQ+mf3=kqu?]tq>dAm
rrN&u!<N;`!.k4>!!!%b!.k4B!!iWB.Olu%.kN78/c@0t/,q4"/da6b.4Zi#/h/=h"S)Ns%OEYS1+tB?
/AWkE/hSV'.k<>/0.[UX!5JRG!=9;K&eY]e%hK9_%h9'Y%Ik#0')rXF')`C?%13IN&ekom&eGT^!rW,m
!!`cB'G(le%h,-C$OmOY'+toc$P!LM!/(@P!WN3!!pK^`!WN6$"8`)t!UTme!QP2g!!33%"1/&[!.k3L
!"&`<,:b8u/g`5*0)[C%0)mNn/-7:N/,h(!/H7=%0)[F1/1iG"0/"e*-l)jV!!i]U.5*5'0J+u^/FtD#
0/"e).k<>//MSIUS,i0]$3:MQ&J,Th$ka3dr=Ao<rt"W3rtPJHrt>>Dr=Ai8$5XHl%MTTg&.]'Jo`,6u
'bqJu$kEdXiY'$>rsnuA"UkeI%i#8o!4Dn+!WN6$"6fgc!WN6""8W!#!<WE(!;6Bm!rN$"!<<.g!!30&
#64gX!5ed:"2Oth!8@J]#ph&N/h\h10J=n,i@Y'\q^i1(.4m2*0ek@;0-h)&!!rZJ/1iG-0/"b*r%4ct
$nj7b/1W5'/i,+-,6I-1jT*4!$Nq%T'+YQa&J>Zd&*X`*&H<C?'E&XT'GD)n%hT9_&J#BW!!)fp#ltMI
&IoBa&.oSL&e#<_',))q&.fE`&.\f$!;urp!:0^a!p]ge!Whup!!9n8JcLB&JcMkP%0IP(.4m,*0J5%0
0.esB/cRI%/cRC!/HIIUr[nI40et@;0.@hCq#C^:/1rS10J5(60!6eu/IX<e/1`;%/hS_10/464!;HO'
!Xot](DdSm%M93a&JaOCr=JuAr=f&C%2Tfo'+bcd&IoEh&J,$>!!ruK'GM/k%hKKki=`s>$kEj_'GV>o
&.K0d(_4jl`;fr?"p+]'r;l![rr`9&lMptg!X/Q)q#CEs#)rT_!eUK)!.k4.!"]Ma/hAP31+P%,/1`D'
.kE7K/ak@k0)mO%/eT`f/hS_,0/5(31+t74.P!,%%Jp,4#:h2T1G:L9/1`4H/u:0.0JG(1.k<5)1+b-d
l2[mc&-id^%1NgW'c.Gr'G_>r()Hc]mh#O4rY#5Fr=f,B#7h@X'+b]h&cE=D(D[8Q!"&iI(_.,b$ka*h
(9\DC'+GWi&J5]k()@T!%gs-UScJNc!!1=ErrMHd!!2ut!!1pVZiC(.ciAXtJcM#8&HNXo/hAe71bp[7
0J4k/0J"dU/c.0h0`<[)0)[I%/eB]j0.o%:/M]"30eY%,/K+Zg!"'hs.l&n<2D-X6/'0Hr0+9Qi/hS\+
/hT"8/0t>-!8mhi!=]h['bV,i%2KTn().Q%'GhSa(&o!:')`L@'GM2o&eYii&J,Th%MBEe'bhAs)@cfH
!"'DW*"W\l%MBBl)>k2G'Fkim&eYlm(Ddf$&J#Ne!UKgJ!0R?^!V6<f!!!6%!<3+_!!!'#!eUKs!!!&u
!!!&5!.k42!!*0Gr@n7(s"(u?#:9TS!"ph;0)I@&1&<TV0`Ng'0`<[)0`Nrf0_m@+/MSq40/+4-!3cG(
!=o&@rtYPMh%Jc]"Tn`)#SRrg')`OE')rL1'(ch4'*]$_',)&n$(_-K!.k3&!.k3;!!3<M/c@C'0)mKs
0?Z!R-RoE*.kNG-r@e+'cS,5N!\Z2Y"t_G[0JG7;fe3Rd0.eq5/M71:!94%\!tZ.E')r^H(;UXg&JG9K
'+u#Y'E8^D&c36n'E8^D&H<CC(&\gG%bVL#()%8p'+kiYli=6i!!1RLJcLB&JcLB&aoDML.PWOR0`Ng+
0#]OB0Es-_+>GQ&1!)-J0E3[)/c@C%0B"V[0**UW">VY`0-$J^!X'8Rq@`fBp_(^^#8Ipf%2BQi'Zh!f
'E8^F'E8gI')rXF(#KZ!'*]!]'b_2n%(ZH!!!**(U&`[CrrMiorrKe5jT'l4JcM5>":-;)0J<;Ys"OI+
p+acGr[eC0/1iS10ek@9bq]5Ps"XO,s"==+q_6t`pb2q+0/P.91G&^>!9O7`"VMUeq@ilD^(USa&J>iK
'A*uu'`SdF'E8jJ'E8dH(=j-('GD5m(D[S`li=?l!WrK,df?-CrrM*Zj8]/\TE'QDYlFb*df@Vm"UZh8
/M8jT1;kmG0F'Be0JP1;0/*,Ud4kSRq_A+)r@e1*fe<L]2(pTc1bC=9(S:[2"W%si',LHXrtG,@b7k7!
&ebun(D@Dq'`/Qk'F5Kk&eYik'bqDe'GV?!(D7A6'F5?g',),n&f)"h!9O7^!<f"pQN.!em/V_<JcLB&
#65#]-8@/+0_mK?0aB6b0/>=91,.E:n1jqrq_A+)r@d%_q(N+./N#%41bUL1"P!Ls!!WN@&/Z,p(&JW]
'E&RK&/Glo'b_>''E8mK')rXF(&nsI(&o'L'&aN!'EJd^"qVIb'GDAeT`>,p"9IihJcNmm!!Bh5JcLB&
jT*X-$O&+;1,(C;0JYC>1]9)H0F9Ee1GCUA0.o.;aY<`Is"XI0s"=='s"OI/fe<Od1+tI>">DYd/Jb&\
!<No5'a,9f'bhAZ')!$`'F,Bf'bqAo(DFn)rtk\Mr=JuFrtk\LrtF'"#o=<i(_m]#'HRdr!.k3&!.k3&
!/(=Q!@A(+1bLO;0JP=<q_Q&D#;7qg0JbO<1]9*-1#XnX1(Pui1,:^@2)R'A/hSh31Gd]>#qn+j0/G4;
0IS@!!71]Q!=fbY',VK"().J['>tU`'F#<d',DAr(<I7"(`4#(&eGWe()@`(()GL9!tuCb&d9$_(DIc,
L]E#,JcLB&JcN4Z!ZX!PrA+C-rA+C/s"rRgg,&U]cnc.j0JP0a))<s$2)I-I0JMrOj"g`h1(0lX!"f/E
q\T8Jq\6j]r=o&Br>+B-n.cHI()Ro%!XTGV(Ddhu&Jl82'`o<q"kE\"!!!,/!5&:9!<<*&!!Wf/!<3,M
!;ZZq!f?u0!.k48!"TVj1G^dA0ek@90ekF=1GcQss"j:&ehRan/ho0m!!")s0eY=C1cd8:1'0'\)t3jh
!7CiJ#oNUUr>5JKr=m'_^D.%h%iH>k!!!?C(]G-N&fqh<(&epL)]T?a!!*-(joC2;"T\T'#64`+!!!*%
bl@_J])[E_JcN=]"9gJ41Getbs"XC+s"W=bgG8X^d4te`3A2$D!!a],3&rfM.k^6Fj>$fo1+r^,!!<9=
()-fa'c$Z`rtYPJrtYPMOVRC$!tPt`$N0r0%N?#n&IfWud1la$()[/(!7ClI!ODd=!!!&@!;c`r",R#0
!.k4:!!4>s1&Wp,19WM62"rfX1BKNo+8c*D![T`f2E36Ad5(k^1,'4-!4W"1&eu8^(B#*I(#0SY(B5,o
('5$X')V_7!=obW&eZ-)mhXq!!uMdj#H%P'#QOjV!9=.[!R1TF!s.!RJcLB&T)]*-/j2!I1c$rd2#T<1
1\`fL2"<BL1]fHb!rN$'!!=l21,L[<iAC'\"#i+l)nl=<!!NWC)\Wr$q\T2GW#+#$!YuINqZ$^"',;>_
(ss-%&J,ijnGqYNJcNOc!W`?'qZ-WscN&OsM?!VWq>c*ImJmLn-o!M81c.!ErA=O3rA=O1_)1[<qD?h]
!A=`S!!NQ]1c$j?iAC'\"$&:s-gq&I!!<67)&)uar>58ErtjK+jV@;%d1lZr"8Mp#!YcIg)&VcVoG-m4
!tu7c'r(b\!:^$h!VZQo!M0:C!.k3E!!X5r00)'M2#T<12ubf92>&fL2#B)L1]Rs[!!WE'"tD>j2UO>a
3BSuO"24d&!!EfO(DR_](&\jH(9&,%(B=d9!!EEC*Yf=8(Bb3Y)&r_J!4i.1"3LV>!!!,q!!<9&!!2Kf
irB)^"el!K!:Tsg!VZQo!M9AA!!`QO1H%'M2)Y=jq`"O4s"q\PrAF=+bV]A>o`,('0/biL2>/m)1^#m$
1bfH?!!E<?)B9Ch(&JdF'`SsK)#+lh(ASgI(X*Wp$i'f$!!<KI&/<M-":bk])@F4Zli7"eQiNEP"9\i-
!!2WjjT'l4JcMPG"W'0V2)I)N268YV0JG=@/h\n34#8oZ0JtgF3B8lU0K(^D3A`cT1b^'G!<)sB%PKCh
2E!BH3]/oU1cI9L0f(aJ3A`NP3'',U0JYFF3&<D]2$>fn3B%eg!:Kmk#Se-k)AnnYp_EiMrYl4b*?6%7
&/,Zi(E+(g'+5Wl)]'>.'H%Z*(DHB?+pf80()e&,'H.`(()7W$(_mi(&J?'&&eb`d)]KS1&.f`un.l*?
().;K!.k3_!!<9)!X/E$!W`9%q#CBso)Jgp!<M]j!WiH(rW)s!r;cj!lMpndU]>uHj8]/\TE*OC!s(5?
2?#G>2Vp>51+t@A0/PL?2a0;_2Dm<L3]B)Z2)%-L1HmTT1+`V!!$N(/2_m6K4#o&V2`<WT2)mWP4$#/U
3'08c0K(dD4ukMYoeub,">rA"3?P=&"p#AR()7`,k8108*Zc:>*uc@F*#';(&/Z3")&3`$(E+&1(_do'
(`=.lpAk*k$On'm()@c,)&*o((B,-`)&a8'&K;`('bClp*uc(3&K;\Z(BbKo&f)+o!.k4<!!<<)"9eZ'
"9AN'!!2<a!!2Ti!<iT(!!`N*!!**#"Tmui!!D`kJcLB&M#[_i3'/uW2`6^U#Wb(23B8uS2*(Xs!]W%s
%QZL,1c%!J1H.HW3&`Z"n,OCF1H7-L1H%3Q3]8iS2)$sF2`iiP3&``V2DdDm3<;3%nMUM/2*!WFfDsG%
"pu%\()S&2[27X8rXp+\(_d]#&ekun(`*o'(`+&,)&j8*().Gr)[,X1+:oM8(`a;,'GVAs(Dn),*uc"6
*?5t9',;B%(Dm\p(`)f]r"fJQ()I]%X8i5%iW,tYrrM?a!s&E6!qu]k!!!9$!<*#M!!!,9!.k3k!!!)6
!9F44!!XN+2`EWN1p]*t2A%u15<Cka3]K5`4?>;[4ZPG^r\Oj;3'9>[4$*u@!$<C<1c73L4>o)V3AicS
0f:jK2DmEO3BB#X2)mZ\3'$Uhr\am<2*!`NX8iG?().Q$(`MNQX;;ih&/,]n'c@l''GV;t)&a;/)Aj>/
)&F2-&/Z2goDnag*tfD/)&X2,',)*!(E=>4*#BD5*ZH"3'c7i'((q;s(@`1D(`!l')nc7@!!!1e!;HNo
!U'Lb!W`De!!<9&!!2Ng!!2?b!!MckJcLB&MZ="a00)-V2E<`VOuNt53BJ)o*$?LY2)$sC1+b?k3ArfW
4$>Ya4[1tJm/S4/.69IK2Ea#^3]/iT3&`fN0e>4.,p!p@(HOB72)RD`3!;9&2)5Bg!7q2U!?;gk(_do.
Zl%X:)\Wkt#mh%R'G_W++WhgB*#KM/)Aa5(&/#Th$1%X"&/Z0"(*+22)&3u'rY?"a*?QXK*YT(m$6'd%
(_[\X)#Y9T)&a;*)[!2B!!D0[WrNS0!<N9)"pkY=!rr?&!qcNo!s/#oq#CHs!!2lqr;lp"rW!!$#6t#)
!!2He!!9k7JcP<@!<E8>!<3)L!5/@;&hQ1*2*!QPc8`a%"$/M(&GuM?!<rrE'H\MK1H.<S3'KMk3\9Rs
&-FF@4ub;Z1-7NN/1;PW&I\[E!W2p$'0.s+4ur*l"ZJJ%4YI5H!!`lN(DRW#)&SJQ!u)F^"oJ?(!<`T7
%1im\&f2?&'bhAt'+YZ?!"o;C(*"/))\X,.'bM#d$47"@!W2p%#T=Ko*u5X^(^1]o(E41qf`9S'rrTA(
h#IKW!Wi&r!W`9%p&G'phZ*c[!<<-$p&P'mp&Ojf!!/#YJcLB&mf3P82``u[3]``ip,E.02)H-@!!iT.
#n@^h+=%'S!!iZA)]9>$$j?\'!!XZ,3\i3I2t8j22EX#R4:^r_jT*p5!>6IQ(BG6iZ5DI9!uW+!%.XB'
!X/i=%h]QXl2V(k%20?c$jd":o)Jt))B9e8)Ai#_rYPeS)B'51#-Iq,!<_6[WW3#"nGidp!sJl6#n$e)
!;QTs!=&c4rW;Ti!"&T(!<WAi!!!/8!.k44!!33("8r8b!!<<6!<U(;^&SBk1-7NZ2`Nb@35miZ2Dd05
_>sH5"u%np1H@9NnMg\42E3`S&?Z!:)&a;-)&3&eOr+9@)]B@^!6>-E',V]1,8D$b(^1cm(`F7tfDsM'
!!98&gAh3S]Dqp>qu?]to`4dfrrJ&YJcLB&nGiat2`E`W4$/ijpGi=84?,%.!!`ck4?PS_4?W-o"Ze\(
3BIrG!58F;!ui0s)&="3)8mBp(`OA/_Z9Q6#6PYV(E4;/(@`7G(`4/1(C72E!!;rrJcNjl!<EAe!!*-%
f`6U(JcMSH"q`dQ3B9/_juKG%"?SY(2$)P6i;a*!4$5Vb3'9=m3<VB&3BItk!:Tsg#lPY@(&o/A(\SXJ
*#]b6!PSO=#S\'k)]KP.n.u3E)B0@qo)RkPf`2!VWrSId!<NGm!;ZZq!j2M'!T!g.!.k4A!!jN)3]K)]
4?5Ej3qt`=5<D.j$,-B?,WP'M"?SP%4W*\h^An6Cr>GVLru'&u`>A^m'-.km_Z9T7!tcFh)=87E()\&2
'*k]@!!rN'rrN*!NW9%\p&M2p!!1[OJcLB&V#UcF4$,G_4Zthek<#_+"?o+33tg?LiW'':3'05#3q,36
4ZPPf'u'b=!!!T/)ZLQP)OhT<(^(Nf(E*[q!!!i7)ZL]T)Y"XJ(Dn)3'*e"-^&S-?`W3dS!!C.>hZ*ZY
!N#jK!.k4&!!k)<4ZPMc4ZYX345Dt$4utef*kq[\#W4J"3BK;]2tf?23s@`/2E4#8Y5eb?)&XA4()H$M
WYkpR&KVo,h>lO8#Qu=q)]KP.*Zjhh"W%so*>&Fi!:Tsg$'YG`!!EE+!!!/:!!!*!!<38h!!*-%o)RkP
JcLB&V>plW4Ztec4Ztheju]Y+"@#%03@3G\j8]H%2)RBS4?PP]nN-n;4Z>Af$bcW3!!X2T(E4;/(76!7
)$CZf*#]d2!!irV+r_I:(*=Xg)$Lio)]]LmnGp<(!"6aG`;g#D!rr<)_Z9W8"pFu,!<EB/lMpndU]>uH
JcOF'#W=k13&j&a3]aW1hE1p+3BfMQ^AnNh3B95c6:*^oofW18"[,%13^X(S!!X8X)''_5(?HF7)$C]e
+W_WZ!94%b$QgH-(_@6#+7U3P()\/7%fsEFnGiOqP5t=W!!Bh5!!W<$rrhcj"9AN'!!;ZjJcLB&MZ=#C
5!Cte5!D%iOZWe175m:a"o&)>!!k_J3B]Ml6970t49R`03]]LX!7q2T(E")1*#BEt)Vl;8'H7u4,m;!`
#SJ4$(`3eq+!:1pr#,\R)'0h/XoJS4!!!$#j8c1["9AZ+!!1pViW&rcr;cj$mJm=i!!!&7!.k3&!9F47
!!rZ_4?Q&$5s[UqZTIV;s$$<Cq)\aG4ukV[&A\>K#rXh*rB($?s#g*?!^&S,!'C-?!^JpqY5ek0//oN:
$kj9k)!2dM)u1?N)Z(HW)AaA5*t$g(jT#Sj+WMI?)B9_9)u1?N)ZLcT*!@/u'GD=s!:Kpf$i^6p!;$6l
"9G>!!W`<0n,S%?JcO^/!"5t1$3;_A4[qn.6U![sU-8B<s$$3@"@#+21`?#fb5_V^1cmet4T@MC4o[_G
5Q*bQ4Ztni4$,Yk6pDXB!8.>Y!@Ag-%Ls0e)B,t%mMl0DrttbRru1hTr>c%W(a'e?&&A5L%j)f4)]S_r
ru:tVr>GVSruLtW!Z)L^WrW/-rrM3]VZ6`#!o<pu!!33&$,-Ck!0[B_#Oqf.!!kAA3^H%p4Z>=F4k)Xp
4T@SC55@>F7R&t$1FL-Ar;[!M5!V@t5Q*bF3r_;?4T.GA4p3o*5Wojb!!k"o*>9),*@3#*)ugrY)uU]N
)[.#j)^6CBp]/G:%i-<(()[u1*?,q?+<DRE*W$c])&X8.*ZH"6%bLd5!!EE)!!ik8!8RVT!P/:2!q63h
!<3-!!!!4^!.k3i!!!2;!:Tso-osCT5s7@i2kN534oRVE4Sq8F5"[js2(cZF%KSCH5X7Ou4Ztni3]]>a
q`OmArB:?H5=%F@nc7bOf`2:$*?>e,*??FPZQ&?PruM+Yr>GJO#8nBk)]B\@*l7mg!>umn()[u1*?,q?
+<DRE*W$cU)$_#r(`jn@(C7/D"9AK&#RKDiWrN,$f`:%4rrVQfrrW-!!!Bn7JcM#8!!D]j^AnNf4$,\m
4Ztecbs'ZAs#p<Cs#pBGs$-HI#"([<696q(`;gAJ!"2.R5s[k*5X7Iq4?WL&s#p<F#!kO93'0>,XoJbJ
+X%^@*??@L*2";O*rR2\*<-rW)?(ET'c\>B+SPl[!"K2[*Z,_/'cIu3*ZuRK+oNM]*!dH$(`4G>(E<M.
!8%8O"KVUk!<3,p!<3*""2"U6!rW-!!q?9f!!33*!K-r0!.k4@!!jl44$Z%o4ZPNr56!eE4T.GC5Q*hN
6U3pu.LErl$lM/i5s[k*5X7Iq4?WL&s#p<F"[PF64[(am!58F=)^-@B)''_B,L.:W*<.&X*t952)B'J2
(Ddo&+WD=(`;ol;$4e7%(`3u&)B'V:q&fVVr>GhV(`sq@(TdZ;#5J7m!<3,p!<3*""7cH8!!!3$!<3,d
!!*3)f)UC&JcMSH!ZX?drBfX1\3BjS%R*'A5X@\#5<_7l5<'\bh>lU:"9KZ+4$37&s$$HGs#g<ErB:BM
5X@Fs,ea9J!!j,Z+W)%3()e*b*!@/u*??44*uu@?)Aa2.)BBh;+<1mm_#OT=&gJJ?r>P\Vr>PPR#ojp*
*?6%@)&j+V!9F46!!!6%!<3))!:Kpf"8Mrs!rN$"!<`P@!!30%"RH-d!!*9+M#`,-jo>A`ScJ<]#SK<b
6UO705s_2/q`Y!F!^K%;rB^WP5X.+8]`8HK/j)Ba6:*q&6:*q&q`Y<N5<qJ"5sIV"%dsD4!!irV+rM78
(`F=;*Rc#?+!2UJ+!2F@(`4/0*??7A#JgE=!"K5P+r_I>)BBh:)B9_;*W7)W*<R9&)?m5C!!E0""9JW*
!<Ahorri,trr`3"!W`<'oDm#6"9AK&!WqZf!<iMT!.k3&!2TYs#!Y?N6iTF75J'/[56!nJ62j4W6:!q&
5!(tO!nmY5!"KW!3'BJm4[__-5=%M"62a"P5X7Ou84tnS!:^$p!Z`9u(`=22*2+DQ+9*A])[dK"()Io.
*uuLK'`trH%LaI*+!;O@(E"2.*?-%@q],e\*YfJ$mf:'%!WrH(a8jKcrrW3&qZ$U%^]=32!X/T*lMpnk
X8i5&q#H!HJcO@%#<4q86UX=.6+&uF5lX(K5lX1M6O#kA6U3ps'"7iM!Zj?_5Xn.16:+4.4$rp3r'1<Q
8gp_?!?*!W)!2jM*WI5]*WI&W(^:]l)]g(C$/#=9!"ArA)]Tb<(Ddr,,9.UDr>khY!YZ=W]`@L$rrJDc
"on]+!s/H'Z2ak*qu?]tnGiOqn,VPMJcLB&V#UTD4?u115NY8E5n64J6UO:26:*h'3^kqU"kE\2!!NWT
5rh>#r]gNL9KrDArBUKO4VG@,nGie.+W_[J+Wqo"*X!>u(De%r*$6IM.ifB-ZiCF9'IY.H)]]q?*@:\)
#TF^&*$-.?(^KI/^&\06`rOQgrrW3(qZ$["!Wp%8p](<r#lXf(!Vl`q!ri<"!!!+q!.k3&!7q2Q'g+`H
rBIYTmQh7J6:4+/77'=04?YV=YQ+t?1Hn,l6UF+'62a.J5m9\;/fkZ4Y5ee9+s%dK+Wqoj*k<=!)&X5,
*#p:H,p<]I!8IPk#p'p%*ZlLI*$6.?)]Kb:*Zc:C'GCua"Mb$+!!!%f!<3-#"oA9"!Mf_q!ri<"!!EQ5
#6b5$!.k3&!/gg_%445&5<_7r5bULB6O,nC5<h4o/.(_E_#O`A(d9uD5<_J'rBh)^69mdu3'9Ae5=n7%
+V+V2!7q2T#SnX-+<r,;*pk!V)]KY4*#p+F,UXZ<XoJh1$mH`8+sA'P)]KY+)&jM9*[W-U,U"?O)&j%l
!NlG&"6]`r!;uur!<3)M!8.>S"V:b<qZ-Qr\,_*\JcOm4g].]g+>l,A4[2.p5!VB>617,<6O#kD5<h.M
!NQ2)"<ofi4[VC26NBFb69mdt5!(qm4[he(7Q3IU'EPfG#mCtb+sS<T+<r,l*kWQm)[79%+X&*E!R^u%
!$)+R*?u[L*#fh7)&jM9*[W<[,U+BM(`aeB,n^Oc`rPc4!<W`*!<3.p!;uuu!2]br!rDur!qQEl!Vl`3
!!!&;!.k4%!!!&6!!NH@0Le2lr^?cRs$?WNU-elGs$6QJ!B(DP!58F9$8"A*62a.b6:*n$77'C35X@n2
69IY%78,lq(#o;N!!WH4(aC%E,5iJ\,-i6W*WI8\+p&l+#,_G("r\[.+oNDq+<VjP)AsJ7+!DRD+WDXM
(*+J2#."=0!TsHj!!36)#13G&!!36(!qcNp"U>,-!Vucr"j-gs!!3-#!N,nt!T3ss!!ac/6UNt)5XPE;
s$Fpse3aI-6:!n&5UHTB!:Bgg'K8DX6l/0V5X7b076a1)6ps:.5<hb14[Vb()$@eW#88+',TJ$O+T3;[
,l\jV*sEf2,9mm'l2\Er*X`r3*??+>+!2aR)]ft8+s%U>+!MjO)]0V?'G:cSk5a?=rrMcmrrKM-k5YJ_
UAt8pquHQn#6k83!WW3$!rDs"'G:WO`;flDfDpL'JcPWI!Y$hLd6dk&s$crUs$QfQqa(6Is$?TMrBpNL
%mr`R76s.)4@_n16:=.'62a.K5R^"I77BR25X7t36pWj6';5C0!ZsWn6UU6-"%YsJ5li#2k5aNB!XBJ]
d3&<*r>kn[ruh7^s!%Idruh%X%3-E0*@)gT+<2@A)^6F++=-n-&Kr;A+s.mF)B9_@+rV4;)BB0Y!!<66
*ZtA%!$1MM"WA:%,814%!!!)M!71`G!VHHm"oeZ$!!*9)blH5n!!KM+JcLB&b5_YL.mQQnd6mq(s$m#W
rBpTOs$?ZOs$6TNs$Q`QrBh/`6:XC85XR[u6V'O&7m94(62a.K5n$+J7Rfa45s\(76qA3%!:9ah"!U*#
7.!>H8P2<:4['qibl@bG(&fBG+6"CB)Z:ZU+8m>^+o`\b,Q/e_+8d6+*$H7J+<i-Q)&OG9+<r'R+WqmN
+X83R*uPq9*$Z[F)'0q1joDsm!<E`-*q:<W)&a_F-R]Z1l2]lF!WiQ5cN*tGf)PdO!!2`mrs&K*qZ$Tt
RK2^TrrN&u!=/_N!!!;R!.k3&!!iQ)$njq:4@;E^7/K=L6iTUR7f>^M7/]I`5Y=+(84Z*94WFM\6:jX5
qaCBM$UmKP6pX+(7Qs.&.0'UJ!!WTO4$uA'7/]LC6j,b=7RKWI6UX'Tci=7T)'gLL+W\rQr?D1_ruV+Z
ru:q[![&R,pE1e)-5n!P,p+9R%KRRi,U+3N+<DRG+!MmO+<;ID*[;mQ,pFWb)@!VMmJm:j&fp3Z#UL];
*#onA*Y-Ns!!3#u!<WJp!7LrJ!U]pf!W<!#$jH\8k5YJ_klA<qrW20^!sJf1"6ff;!.k3X!!iZQ4Zu%q
7RBJp7/B=K6N':O7K#^S6hs.K6NBCN712:E83SF%!"D:[8438BrBh&`779O05sdn&6971e*!+Ifec5s]
-9OIY6UO70rBp*C$:-sB5Y+:35W^_,eGomU!Ylh%,9S9R+jhG2,5iYa*rR,Z)uUoZ+86lu+!VsS*?HLI
'`\4=*ZH7C+<V^H+!2[N+<V[F*Zk;*"!Ss9,m#DD(8_'7"Vi7(+mC*O-70TK"s+^.+!)@'li?8M!W`B*
r;Zj$"2b-=!Ug$g!W<!%#QOi*!!)6`!=&b)!!E?-#QOo'!:0[f!WrQ-r;Zg"e,TILc2b3O!!:LIYlFb+
ec5aP*^L#t7nQ9@8Oc1s7/oUP6iBFQ6iBFQ8,YpW7JfLP70c%A78$0<2Z`mX"!Ts':&RT^7fPmV6iBCY
77BO269n%54T\#/&ukp;&2$FD6UjF37K#XS6h*PJ4[VY,84s.Y;+jAJ-3Dg"$3:\^+=&'N+!N!Wd3/<1
ruq7`s!7O`ruM%[q]H.i+<i-Q)Bp1&rW!*9+r_OE+8m/m+!2[N+X%sN+X&-X+<DdR+=/*:\,c+#$4%Ck
,Tn9Q+<VjPr?:\R$m?rA+rqa@*$-%J'`uha!!2Bc^&S09!r)`q!W<#u!nRFf!;urU!!!&b!/COS!W<"M
!4W":$T:FB8jPa47mBU3f1#R*s$Q`QpI5*QrC?fUrC%#^7RBC25"/1/#lO`*!Am>?rCHrYs$m#VrC%/b
7R'706:jC16U='j#Lib/!"/fC2b62&5s@e*7Rl]4%7WHL5tF@>7S-'94>I/q!!3?G,R5VB*uc7D)CWrU
q]l+bq]l+eq]>\Yq]Q1g+XnNM*$5=^!!NBE)&aV?r>kn\s!.Ofruq@c"=,06,TQe1![nohY5f"4%3-Z8
+W_UK+<_mQ,Q/hV+Ts29,9S!4)&j51)^cgP"kiqW!=#n2n,NIi"S2Wn!posg#m.^=oDf!r":"r/jT#8]
qu?]tqu?a%!PSPc!.k4;!"ArK846!A84c?C6:XgCd73q's%!)Xs$ZlSs%35]s$ulS#Y.BQ6q^3C64<\k
"TS]q7RouI8cM<Z71i!Y8P)H?7ncKI:/=JS5XcUmZN(@9+$rLf7nH'@8OZ8N7dNSS6Ua^>8k_WH6:jL6
6U;=?!"ArA+s.X@*ZlaV+!M^EfHC#5q&]PYs!%Ihs!Rgfr?1t]r?):k-6=6Q+9hWB$3D:j+X%mJ*??7F
r?Mt!+s.mO*uuI?)]BY;+!Ds@!S7>-!"/i?*$#t=+WM[L+=-b,nK8;`+<r!N+WDUJ,par`+pZd$q#CBq
WW3#%qZ$TtqZ-WsoDemm!!30'"0;J&!Sm_V!<<3&!<</t!!!/k!/^aV#Q"K$"bH`e!"K8g6:4=B7nH9@
6:sd=:"Df37f,dW8H23[7K5dU6iTaV8,l'W70uFQ7n5s78kVVrq#D<P9LhTE8OuBB7moa677Ka;84?'@
7SucN8kAqO!^npWec=Y/%0n+C6:a^A84lED7S-&57Lr$\7Rfs=8k2H>6q'I0806Xg"pQ/"+<r!G#9Os3
+XJ?N*RQ#**rdA_,6&th-iY7b+T3J^+9a)<*ZcO;q#C^/+sA*N*ZQ.B+T3Ml+sJ'L+=&$K*uGh"(EX\G
-RBc<[K$mB'dFnC*?cIJ+<VaN+<_mP,4-KV,9\-N*ZPJ/*@2jV-R'ZU%,V$b!rW*!!Vl]q!PJKq!!!&u
!<3,l!!<<(!Wr6!!!^+:q>^Tu#6=kQ!!*`<^AsJu!!2QhJcP6>!u!sj8,YpW8H2?_8cM<*8c23k8kD]H
85)QE7nH6F6:XQE8Gu*_8kV]K.JWrN!!"Q@6qBsB8kMbT7MJBa9M@uP84?*?5t==.77T[38h1(V!!s)d
6q'X;9he5PrCQrYs%2TLrC[)\s$crUs%!#[!A"?4!!*HQr?D1br>tt_f-0l3ruV.Z'H7u4*#g"@+sA0U
,p4HY+sJ6V+X-h-"!\p4(\[n>*$lgR,T\!L+X83X,p=H2)\4#5+"/H\.4HPm/0lMg'a!%giW'2g(aLCP
,9.^%+TEV`,5i\b+R^Ha*ZcFH-RU;j+sJ'L+X%X&h>dTX!<E#trrL:C$NU80!WrQ."p>)6"ml9i#PS2u
#5S<"!W)j!!s8N(r;cQl!!//]!W`<(!!@iRJcMPG!%%G1s%*/_s%35\nOVV0rCR#]r_!;f8PT1U$qO)_
6q]s@8k)<@84`\N"A2*P4Tb?X#R3O`77^-F8kAnM'hCkg92A/N:-_<>5sn+05"nC683e*c!6P9J'/N*I
77Ba<9hkLVqagZWnOWUNs%*/Xs$QfVrCR,Z1'.(Kmf3P%-70r^+sQt1r>tt_bp!*.rYu@g)]p+@*uuXO
+=&'T-N57e+Tru0*ZP4W!<)sB"!Am4+sA$N+<r*W,p=EO*$-(D-Qj`a,:=oi,V:>d,T[B-!!*BFr?_Ie
ruC_UrZV:ami`5`*ZuRP-7C8c+W_[J+X7m+j8]/hr;ciuqZ-Wsec>=B#m(/1"p>,5"U#"g!!!&u!!!&p
!!33'!V-3k$O#2airB)_%G(U[!WN5J!.k3&!9F4P!"8ld:JOYW8k2B@7R]cE7fQ'-8.7mS77B[884Z?C
91;JP8I7dY8Oc09:.7]Eqagl_:Hf'Y!$qUF'gkJY84lNI84Z3>84Z?F7R]s>:J+AV:/4AT7nc??9hRJT
^]4Q[6UaU>84`\KrCHrYrCHoZr^lWNs%3/ZrCHrYrC@#`8hU5.!!iT<)Aa23+!i6/,QAn;+oEM`-N>Cj
,7bn=,9A$N+!DaT,pXWV-Q`.."X"p-*@h?e!$;Xt,pFKV+!2XL,9n?T*#p=O+<;F?)]9P4)''_@,UE@1
!!V*Wjo>l+,:+KV+<VjP,pa]X+<^P)ruh=brughT'-82>,:+WZ+WqmN+X83T+W_X?!TX7\%Jp.)!!*-'
o)Jdm"8)X"!Wi?%!W`Z6"q(Y?#6kG8!rr<%!<^(:!!N6#r;kdUrr`3"JcLB&VZ7//2,$kB:.e,K7n,s:
7K#^D8`E;Z6psI47Rfp>8P2ZK91qiL7R]d;9hdlI84`VL!_Z6"o)L!`7Rg!B77p-C7Rfp>9M@oE8P)NI
9h\/R91qfH77g-G6q8$d!6bEM&kPPb8k;KB7RouC8Ei_E8,#OV9hS#+p&O[a#6Gh])Aa24+T3V`,QAn6
+o`qi-2f(g+o`bb+U98;+s\Q`)^bG*"<\g,*=VZBr;\&X,pa`Z)B^1H,9n?T)]L.M+!2C=)AsA1)]Kh>
,UXTQ+=.H4!"]Pd-6XNT+<i!U,p=ES+<i$.+o`\b+o`\T+o`Ya,QB(i,6&ec,6&ne+T`]0'^,N#!=Af,
%1UDZgAq6Tnc/Xko`,L)!rr<%!=9&;"U,)8#6Fu+!!<6'!sdW^jT#8^r;ccshZ3ZXnGiOig]2p+JcOL)
'EpEh8kMQB91r#T8kMK>6UOC89hj#,s$m#Ys$luX#rk:<6U=+*77TcL6qBm>9DqHd8P)HD7NV+##Qm1T
8juHL8kT%P(.q1c6qTmA7S?KM91VcG8Oc'>:d[_p_uTc:#R!^f8kMWF7Rm8Gj[oD@&4oGd92&#O8k;KB
7S??E9df3+'E]$i,paf^*??(<+sJB^.4HGb*Zjhqi?J:Iq]ub$*[W3]-7UAf,U"6P+Whm++T3Jb-4o_J
#Qc1r,p=BS+<^V.%NllB.jcJd+<r-Z,pFWWrZ_Oe+<r0GpAiA:!WjMcr?M=ds!-DFr?Ddp+<DRH+<i!U
,p+0P-56.So)Jgm!!3#urrKM-!s8Z,!VHEn#m9o%qu?d!!s.?\!"-OB!!;KefDkmTX8p?B!!1sW!!;!W
j8]/\X8iV23_i@?6q0X=9287^9E.H\7/ojY:=2Z58,l-Y7hJ2t!=K\h/iuQl84lHF:.S#NrCR,_8Lj30
#7s6n9hS#M9Dq?b8kMTA7n62_92.rK91hfJ84H0I8P2Di^]4U)8P;]I84Q2K8E3;A8,l*l8kM`L9MA)P
8P)B@8l88N5pc7*p&GO'*$64J+XA<T*uc.C,5iqi,6&\2,5iec-3kn&!<s#K*$kM.%4*/@+s%jL+X&$R
,9mur!;um&#q$rF*uuFFr?MOi+YG5i,lT"t+X8<Z,U+K[-6aEW+qVNi$Q^H8+s\EY,:"NZ,PE>L,5iee
,QAqc*sj/:-70cY,p4<Dli7(f$N^/*rrL7Bli74m!s&H'!!2ip!!D]j!<E<$!<3)_!!!;[!9F1\!RLiF
!Vl`q#2T?3!;$6k!K[<;!!WK]91VWA8Gu'Y8cMKa:B+&g9@$3::/4MX91qfH71&hk!sB2Y-k&4+928/S
91qlL83?tB!!XZ?6qpNP9`7Kl8kMfO84,Em,TdR,&.8mF9*@jZ77n<4!<)s+/ji6'8P)QJ:/4APrC[#]
s%<5\m7RCOrCdVm91hfI84cHD9i"1hmJmFl'H\VI-7f$Cs!@[gruD%\rupeTiZnCD"X,$6,:*Nj!!WK1
%hT^"*r[5c+X&'T,p*3W!$N((+s/$O+!i3[-6j`R)($UY,9.O-#RL\=-6XQT+"&QJp&N89#o=d3,pOWX
+Whg',QAqc,QB%h-1N5[,l]+h+o<Ah,9nK\+sS*Q.3T&o!9X@^!Q+m<#m'o'!<E?&"Tef-!UKg`!!!0#
!<3)s!"B,9!!!$"$4$e<"9SW)qZ$U#^]4B<!rW-!!V6<S!;cfn!!!&"!8@JR!SdYW#6b\KpAb0oh#NN:
%5LaV7nH6=7n6*@8P)SU9`7`d9E.W39*n?g9he8R84Z/Vo`,:*(a_()91hfE$gmus!BX"Nr_*\f4>e]<
*uPUp!<<,s!!4$.9E%Zf7RRd&!!sT98kM`L9MA5XrC[)_s%NGcs%<5]nOj!W8kVfNr(R&^#t[]^8P;fK
7mR=I!!NrZ,:+Wer$_Rkruh7]ruqCgd3Ar=*ZuRL+s\E[#5A2t!!NK3&/H6/rZ_CImJme!*[r3Q+<VmN
*>oM%#mCG4q#C[/,9\9U+t"]E_uT`9$OnF/,pOWW+<DRM-2f(g,5ibb-1N5[-3#4i+o<Ai+sJ<Z,9n?W
,pOc>mf3=mo`4jim/Yl@!s&E-!n./L!W)it!Wh`i!!W)saoDGD#5nQ%!SIJK!W<!$!<E0##5S=O!8.>P
!NQ4<!!auL9he)H9hi]%qF_,h9hS,Q9M8#N$h+,u!=9>Jli71p(DdVi"7H3q/Pel/:/FMU$JkdC!!s*6
8P)ZP9heG\d7X^98PW#O85M56!!a#T+<W0b+<^P*a!1O+s!.Id!@7p=!!<6+$jl8#"U,GK$O6b,!;Z[$
'-JPJ*$-1F#J^<A!u`I3r?2+[h'2M9#:1Z<+!i3R'_qb&!<3)1!<3)c!!36+"S)Qi!!NE/"U"l-lMq%g
!<<*$^An68li>f@rrK)!i;`r]"U>1s!!*0-]`=5r#SU'4:/4;L:J^d[a\;_0qb7)`$cE&C!!kqh7nQWX
:/M20!!5ec9)VQc;VOn>9F+6_:JXST;,Iqr!!iuS*[)[X/0H(O-3#1d,69%npAi;8#TG!7-6=?W-3V3d
r;[*<-RU#Z+sJ$JcQrc<+=ANX*X_H<!!E0#rrE'"huMa:rrN-"rrKS/"9AQ(!!2cnNr]1\r;Zg$qZ)3J
JcO=$!!r/r!=(si:&di):&@Zb:B+#d9`[io^]4ZC:J=MS85)TF!Smb9!!kMU8k_oO92&%*9a=6]:/4GT
7LJbf#6Z7p+X83[./5%&,69%n`;of9#Qc+h.O?;d-7-A+#T"d5,9nK\+sPeeoHOSh-mKr_,pENa!!!*!
!WN0"!PJL5!V?B6!!!&3!;lg&$31&,!<<*#!Qb<A!m(G.!!!)g!.k4G!!+uLrD!;a^J4`'s%NAc!D<gX
!9*ta%ocFu9MS2S6bWO+-V@!)9M.oN9_M379a=6]:/4DR9J?#<#95-8+X83[.)mM&,69%n^]4WG,U+Tb
-m^;fh#QF7#SAC1,9nK\+sP>Xs![mlr[%U]oDnmmr;lourrMus_Z9];_>sH5!!Te2#RLJ2!<E0#!<M!V
m/R.h!rDtL!9=+["eYk:!"'W?:J=GT92A>X9u]s+:B+,i:&Rff9+/N8#UW;B8P2`N8j1o/j8]Gs9he;T
8kMZHd7t$F:e4,P:.e,U9FLOo"qW%*-71)fod%X)s!.Cd!@7of!;um'(EakK-6j`Z*52CY$7@2L-n-Sq
/))?D,RP_>.k;kj.4HGa#5/$""onW(!W<#u!Nc@E!!!B)!!<6&!Wg.<r;Zg$^An6:aoI"naoDDD^An68
r;c]p!sCY[:]3rd:VTX(:]F/f:'!uqh>lR9#W#=T92/)T90Bog#R!jr91qlL8P/SLh+\5Q:e4,P:.e,V
:Fc)=#6H+n,UF`a-c75,,l](c,QT1p^]4W^+sJBa+seKUg]6@7!Wj_sr@.asd3K&C+tG/h,Uk/g+rBtR
"T\l/!!*,m!6>0?!PJL2!!!H+!!<6'!<Tt8!!1RLli7"rQiM^<qu?]t^An6:pAbFG9N+b^9hJ%V:>nq+
:&dug:&Rff9FJZ:#m3[n:e=>T9MRP?!6>-F6rHiX:/4JVd7k'H:eOGR8kr,T;Gdl'!;Z[%'Ib=R,pauh
+sO]Gs!@Uh!@A!-!94%c!\#<<-7:&`,T=>r!>usW,6'%a,hs[F,5ikm,paca-3ir>rrL+>Y5eP*eGu3A
!<iMd!.k3&!9F4Z!"&g$92JJ\:.n5V:qog+;#a;h:B=,sh#QO:#nf^+:/=P]:J`^X!!+iRrDESioM==>
$W0bp9M8#S:Jje]2#.+Y!@]EA,pt&i.O6:X-1iJa-3h9d#n&4.+t=rf-70M_!94%a'-JME,U=`bd3\f;
r@%mt-Rg>e(\n%2!Vl`q!VZSG!<)s!!X+8Ym/R.j!r2fr"/,^H!3cG*,Yh-1r_WVgs%WMii(r?.s%r_j
rD*Gg$c)fL,#(p09i+V_:au&;aT)Pf:Jk%c;Gp06:CL-!91r,Z:J4J]$ig;*!!<l`-mS^;s!n$o]d<\+
r?VIl"l97?!!s5c-6slc+se?C]`89H+XSQZ,V:A9-/0^Q+sJHb,9nWa,UEZk!!!?$!<35A!3ZA&!W2ou
#mB#`ScA`njoBu5JcOg2%0Adj:/k%c:J=GV9i+[$:]4#j:JX[mp]/G:#s(^S:K'na9i37T!;ca#%965&
<)-05:C9rr8kMoV92ADX./NuN!?`d=.4$;f-n*mth^/:Lr?VIn"i10F+"/E].jZJc+;"5Ha8cGK,pal`
+=J_c,mtk>-n$;b-RgAb&HM\.!"Sf)rr\GbirB/^!!!&u!!*E1WW:`QrrMoq!"-(5JcM):";sp385&qX
s%`Sgs%rSg`D?M/rD*Gh$cW2F!"&a":/+JV;+O>S):AKd&I\^.!!P_c:f1%\ge[T=$r0Pp;,C(`9hS>Y
9hYHcrW!*1,Ujl^./bLm,l]4+-3#=j,loCuh#QR;$3;Cu-7C&b/MAL\dJs=U#Qa>n"s>-:*uuORoHi??
s!Rghr?VRi-RpP]q>^Krq#LEu_uPAhp](9rli74s!<EH2!<^XJrrW3#rrN&u!!D<_JcLB&j8]WE:/Okg
9MeP]:JOY^;8#d(:]X<!pAiD;$4fp/:ejqa8l/1tmf3=gjo>],8P2B5/gD,=!Vufn!!YA]9i4_e:!ZTC
;Gp@h:JX_\8l/_*qu@0C,q18o,pt&e-7'rc-f??0-N>Il-35M!_>joL,pk#g.4$T&-OfYJqZ$Tsjo>]"
/hnk&*Z#=l!V??r*%3$R*\A\c-N>In+oN_l,palh*sDZC!<3)q!<34c!9F1\"o&&t!Rh#S"q^n;!W`B(
!V69q$NU86#R(;&!8@MR!ri9#!W;uu#."<8!!!&]!!!&g!13`l!DQBc;,:"`:An)j:\mr0;>F#h:(,#@
rW!9I<)ZLb8Qe_^9b6su#m1SP*[`^+7S+<X!"]iA;c-Ll<)6Lk9g^]a)[ZWB!!XW@:f:1_9AED<;%6;s
;GpFl:/4\a:esk9r;[*(.k;hk-n6Vnr?M=l^F&t/s!Rdo!!W,tb5_k_,9nWd*\/Wg+p[iB#m(AC'Gqo;
.Obbh!"]J_-6jl`-6srd,Tdg6$jQh0!!X5f/Ku>b.+'CA./b@q-RUAm.k2_VoDngjhZ0#D!!W/u!!2`m
q>^Krk5YJ_pAb<t!<E6&q#CO!!!!'%aT2>Br;ciuJcLB&aoD\\8kr8_:J4GXrDNYjaAMe2s%r_krD3Mj
$c2lX0iUnE:/Xn\9i_Q#!!*B?+!W<t62jC[8k;WK9h\%jnc8Ic*t(e=;GC+e<)lXg;bU%f:.7c:0d%;@
!<<d0:/t1e:=2oJ:JXkd;c?Cb:/+JZ:dP$[#R_q--R^Dj-n,$=s!mmm`?tU5r?_Oo"i^Q@!$<:-+"Jif
,:=oh"98E&"UYhS(F(4^1+t=40.eb+-O]2>*sO#9,p=W[,Uai_-Qsc`+>,Dn*>B"g!<<QZ.O-/g/);QF
-N>Lm,7,bH-7()j+WUO_!WW3*q#L?oOT=MD!!rB#!!N6#"p5&9%1imSq#CHt!!_]g!<E;s!"f55"p+u9
#m^Y:!rr<&!!!'$nc7;BrrW-!rrN&u!!0S0V#UW!!!!*(irGJI%O=h@<Dc[n9MAA`<E2^dq,,72q+q)f
$cE#h!!#Ab>"_Ug;ccjs3&j?#:/P%h=]ed);--^t<EN*p=AT[t!$DA,92JVj:KLCl;,C"c:esea9NG+l
9jCCT/Q,GF=ADcK;>3p1:JXhb;c?If:et"k77[Oa!!!Wb.OQPl.4d"m+<r*^/AWY>-RU;j-RU;j.0]GG
bQ&b6+!rHf,:+]^+r).I/h\Cr*@)dO,9e<S+Wr$P+=8HBli7\$+tP)l-6OZ\-R9ua/1N>*.3g/J-7L2i
*[r0].j#r_.a]UA-k7FF-n$Yt,Ub<#!Wi?%#l+K#!o*dD!!!3"!!!&u!!!*!!!NE-"9SW(rr`0!!W`i6
kl:ed!WiE$!<3)o!!33%!lb6?!rDs!!Wi@R!.k3o!!kAQ:f("e:eXR]<W>e6;YsAl;?'Jk;#sAs_Z1kg
8lenb9iY(g<E!!n92/)[;Hcst<`)mr<E3(!<`i0m:(Hjqqu@l@/PJo;:f(7n;Gg@j;,9q\:/Y"i<)?Ol
<^oVX:fp[p:=2r^:f(%f<)cXh9i+_c8k9O+!!!le0I8"n-7g\k+X/*^/c$j7-iYXo-NPUu`;geV!!b)#
+"Ace,9nNX,q:>r/LMhh*ZZCJ-m/F3"sP9=+=&<?mJn@1,V1Mp,p4N[,:"T`-7L>p0.87p,UY#`-8.,)
.O#ragF)\Bs!dsqs!%Fk#qR>H0e`h;!!!H'!<3/$!6bED!=/?!!!2ut!!W?'!rr<&"8r3&!<<Q>"ml9k
#QOl(!<<3"!<3,t!;um"!<<0&`rQ,AqZ-WtrrLIHJcPKE!!\G`r;[*d;,C7e:JOherDNYid8:`V:Jjtf
;cH^r<Dujq:f:%b;c?Op;H#^dh>lX;&KOG<:Jt.o;c?Xl<)QUm<)HNk;#a;h;ZBSm;?BWf'^l#&/5t+s
gen)Lohc>F+TMKi,9\N\/M&1o-RU2d/hYO!#UUlG-RC&a,U<:5$n!>O.3p8e,V(5j)[4(Y$5+p?.jQMf
+!;aPrZqXq.OQV@.K:gp-NteB-mpJPo`4jh!#;4U#S7OI!!<3$"9J#mf)YgRp](9pr;ciur;Zm"!!L7@
rVus#"T&3!!ri;k!<3(p!9F3Z!!!&T!.k3p!!Yi!;c$Fk;#=5l:=2uI;,L4h<E3(#;c?d+;c?^i<*)st
<`Dd<^]4TA)`ger:fUWs<WlE$=%uKh;ZBVo;#=/q<)c[p;,%\q!<)s!%8s9+pJM>P0E;)&/L)Pi/h[#K
s"F0rfdQeHr?Vpt+=JH^.OZku-7L>j,8%`l&-)bD+"Sfb+X86V-RL,f,UW78s![gn"=PcO.h(qJ!Wj\r
].!1ts!dgn#T"9W!!3-#!X$ICrs&K(o`,!o!W;uu!V?B9!!!)t!!<?+!WqllrrW-!!W`9)nGiOpli;V;
JcPHD!!2Ti!"kk(&HDh49N"hi<_6.f<)Z^p<)6<;;ZBVm<"Dl)<D-1`:eb%f:0(%b2$qt:irBPp-Upd)
:fpLi<E<!u;cEWo%olV.;c6Lj;,^Co:JY%['_;;,&5?)"ePb4$ohuQ&;E6`<!AG`E-RpPu-71,h,pb,p
d4##Hr?VOp.5E@\/h8J&/L;br-Rp/@]Dr?C(+Cmi,V(,d.4HYpr?qOi%4EVR.4Qep-R^/b.jYSs!<)s#
#q7S\UF6Bf)uos@!!!-)n,Ur<rrM`l!W`l8_#XB5!WrT4irB)a!q60i!PADa!6G3@"1nQ>!"]898lo(n
9iFkf<)Z^p<)6<K;XmZb;>jGq;Gp-c:BjWk<`W*i)n5kV!>RIj<)Zjr93+kf;uKYq<<cH%;c6Lj;>sJt
=B/*q8.kLp"9V1m92)Tgoi(lg&j\ec""YcG-mCAu-71,h,pb,pd4##Hr?VLp.Ob9I#:hDR/1rA!%bUj?
!"&`9+=JQ`.OQDk-2f4i-2Aqn-RpPj1+<S'!!E<L/L`1#.*a4H+<UXa!rr<'!PSR/!!!%e!!3Q6#5A2t
!!!%S!.k4'!!!)n!!!25!9F1l#7"%+=&N$q:K:Cn;cQgq;UJGV=]n^';GpFl<)lgp=B/F%9JH_%!8db]
#q&5C<*3$srD=5.<EWI(<)Z^n;H-Ut;ccss<DF;'!!NHj<`)[ke5Y!uqc*bl9*>ANr[%t$/M/A!.4HSj
.kB!r$6^QA.4Znu.P3>&#:V#F-6jrY"1/%5";;n,.4cntr@@mpruqCjr@81'.4?Gg,paof$hjW)!?X$K
0/9^\r@%Unq^;Rl,6.]IrVup!mf;#@rri&r"pG,4!WrN+]`@g-!s&Q+"8Mrs!WN5n!!30'!VQKn!Oi&n
!!!&h!.k3X!"]89:01Is;,U:l<Dugr<Dl`Q<:X!"=]n^';GpFl:JOne<Dusn(U!fA'K8um;#O8k<W?/4
<)cdp;GpIn=&W+'<)Zaj&GQ5/3)iLL:JRlgqc*Vj&PW<.0.%tp,q^l!-RgJk-7^Uo.1dXG.4Hbt.4H_s
.46>`,pEcJ!8@JV#oY6E.K(b2-70lZ-n$Mn.k<%t-R9ud-mpSo$MXT))^m*g0.k^'h'r:Nr@.Ul#UCYq
!!N?&!Wg=Arri,t"onW+!sA`-V?$VsrrVcl!WiE,q#CHr!<RrTJcOC&!!98&j8]Z^=&i1":ejth;c?[r
<)h7C%olV-;G^1i<Eia4>>nNP"RZ9)!#u(_5Z:T^<`N-u;cQgq;Gg:h;H$n$=B&.!;Gn/(!!X]K=A_sr
<:<`";ZB\q<;TZ,:/1ch.jcPj.P*%t-n-Sl-Jp9B.1[[L.4Hl%-RTlR+sSTh(':Q;!<Nu7.K(Uo.2"'V
-7LAq/Lr=t/g;Sg,:t>r$2OW+'.POe0dnEK.JkLr-7/]m#f?ZB!rDru#RUG0!=]([!8%8Q!<inr!!!&q
!!!2L!.k3I!!!,Y!1*Zq6!@Gk<Dl^p<E)q!=&rB!<7b(Y='&@#;GpRt?<pZ>6k['2mJm;$1K49S'NA%5
=&i6u;H-Ur<*<@)=]/3r:^d1$#8gK?<`2Xk=M7]*<;fhm<rYtq!<4GG.K;%#.K:pu-iY[D.h*jR.4Hl%
-RTrT+=/3<d/_bu&.0@'-mpAk.46Jn.kWG*/1CKE"t1oL.P!%Vqu?s10./5(/1)gq/)DfV/H77#.etLr
-RSlo#/^H@!ri<"!!3H5!1X&h!V$-i!rN$!";-4cJcO@%!!fY,jT#cN='JO%;cHas;c?^t='*dK$rp;+
;cQgr;c6@b-N`Q5])W-?*BR%n:KLUt<W,i(<E3(#<E3!t;cQR+rW!36:K((d=BJX+mSq,(s&8qsr)E_t
r`'J-91o6b+snce-n[/#-S-hI-f?KF.L[aT/hS\)/1`S21Dp4h!!NE:,r%,.s!Rgrr@Ists!Rgrr@@t"
$iU,,"tfg-s!@[mYq#c)qC2Xt.Olqt-3GRp!"\r,rrL:Crr^7@e,TRO#m(1l!!!-"!<3)K!.k1P!!!%p
!!!&\!13`n.9oeR<`2dp<E)rr=8GnK<!lW*;c?[r;c?LY%CQ9%!$Vn+:fph"<E)pr;cQgu<`N.!<)Qaq
9FUt,9N+ke;-@%(=M.W(<#en<<`W4&<E3+#6ULhR)(Qs`.k</".4d"t-RgLl.gd^S/hS\)/1`P)$0_H!
!"'#R0d\4t.kN>*0)[44.Olu#.P*2%"TSWN0JG.5,U=`bmjl"#$7IDS.P3.p+ohTNqZ-WsgApaDrr\Jc
li7+k!!*`2!<3(n!.k3]!!!8I!6P9O&QW%7<`N.$=&`.#='/SP<WZ2u>5hY+:J;`.!M08u&k?#*=BAR)
<`E&q<=)W(=AW1/:DQ)os&/kts')[-'3/%5<``@'<``7$<``$c7K<Dq./YUq./tn!.K:gn/(Z9X0eajs
,U>-!('1iDkl;%u,V(8k.Olr!/M6oOr@J4+.4$Ag$R#F%s""*m].<D%#V%;S.k2u!.kU`I!WW3(_#XK9
r;Zg%bQ-&k!!DQf!!2lqrs7$Qci=1L!<<*,])Vm8!!%TNR/d^$>$"X*<E3+%<)cq#=BPB"fiA>V;d*=,
=um%s!:9an!]!VO='/R+=&rAt<W5r+='/X/<E`6t;H?h'>e*o0<ZkCB<`W:'<`W=(<`E%$/hR,("=koM
/1`;"-nR#".4?Ul.gId`,U+K\,R<E2\c<9B*\f)o-n$Pp.k<2'.k</%r@JO20-__o.5NJ-0.JFo+=\l/
/&WqN/1`;%.Olr!/1N/!.k_YR!!!)K!:U!g!LWoi#7LS4jT,;dTE+rk!!7lTdf9@OYlMoH%7sT"<*E=*
=]A@%='/SP<s`#4=BJX#(]aU:U&YH",Z\/R?W^?0rE&qus&Aqt#ZY&.;dWd(<Ds*#>?b*-=BMh0s&T/$
rE';)='/L'<@90n!"C5*.Ocr"-RUQ#.OlhpqC:,I#:1ZC-7L8O!ODdo!%%^W-7'od+tG/n.OZ\p.P*,&
/M&G&.O?Po-n-Mo1+b(&,:tJq.(h&#.fCb#-RgPr/1VDK^]=B<huL1c!!1@FJcLB&JcP]K%45%Z;cHk%
=]A@%='/SP=8c8*=BSTr-O\6#eGp6r79X#$=BSj/<``@)=BAR)<`E&s<Y&J8=BAR/;GgCm>?b*-=BO-U
gfOMVs&]/$#?k2/<)up9)ZB^G&h#C^.4cho0/"e)-n*Im#ULcD-RpW$//nQpUAuAD.OQYi+sS?`.k3"s
-n6\t/1iG)/1N,$,V:Pm-87+Q/cR'q/cR5u.KD!u.0D+N%1VS&f)YgSqZ$X$!k&*s!!**(lMpncq>gNr
[fGLiJcLB&b5_nV<*31'='Ad,<**/G=9qo,;cHq)?<'Dp+9SPB%1#$u<)Zgt<EN=&<ENB%=oDA1='&O-
;dWU-;--t+>$Cr*s&Q7(qcO/*>$,!1=9f*1!"B)`/LrD&-RUT%/1`5!q't&Is""%%"t(`D*$Ggn[fGt!
&Hj+*.4d,)/h\e//h/=u-R^D?/.j9Y,q^\t/M\_&-RUT%/M/D#].3P)r@.Xl"tD)R/1gu-r;Zfu^B"97
jT*!p!!20]!s&B&!TjBn!<3*"!mL^s!.k4K!!k_g=]JR->#eSG=:A20<)Zt(>[^f<:GE(&!87Dj![^lJ
<`iO'=&i@&<`W@+>$>'3=BJU)=BPQ*"^G&0=&N0">5qS%=8uFR=P[*Z=oV\(=Tr)2=BJHpqZ%$J.P<,"
-RUT%.k<%tcR\rJ"",B<-3PbG//nVk!#YeN-RUDp0e4q10J"h/.k<"r.4Hf!/hSY)r[A('.P!8,,pt,G
.53G-/L`-R/,:Ut.jlhu.4=um!!2Kfd/X.Ir;Zm$!X$"6nc/XoiW&rZZ2j.i!<E8+!!!Gp!.k3S!!X08
;cH_#>Q%[]=5m9_7jSAD!"0N2=^"j0>$5!0=&f6#O]VQ`s'>S'"]SW->$El]!"92f1,1O2-7^Sr.P<?j
/-7(0"4mP,!!EZS0.\UO.K:pu0X`Of/H7@&+oO"s0/=k%-PcLY!!iH&rrg1=VZ6\uh#O>Qrs%<[JcLB&
jT,2Y$UIcm<*W[2=^#!2=M\,C>#@!h!S@D/!!W]h<`E4&?N"+.=T;F/=l*<]=T;_-=8l5'='8g:(A\"2
-iPn$-iGUr0?,R@/-IRR+V"O\!!WQI/1WA'0)[:"/H7Hf/?:<2/hS=l0JG490/=e$.LGeKrrquo`rQ,@
^&[m-!WiQ3Nr\hQrs+VcJcMtS$PcQ?>Zk37>ZOm-=Q!?A=U&;@>$4<E$Fp-J!@:]G<**"&<a&[2>?P*2
=HQbd>5qb*>Q.Y,?WpT&!<Dus!Y$k4r[e'ss"D,<"sG'C0dRY@gAp+2#QYSi/M&P+0.ZuNs"+1'[4Ku^
#q7;X0e"b&-7Ju&!;c`s"U).3!<NP\!20Am!TO03!.k4/!!k_m=BSd3>ZOn?=:&2>=&W:':coZtp]/;6
&JRc5<`W4)=]Sa1>$G35=BASM=Mn8>=U859<`WF*?!oA]!"(#(.P*+u-SI,(/E&2>/I<C@0.Sk61+!M4
]`8?I/1N8(/i,450E!@%/1`FS09Ijb/.!dU0ek:0-n65;XoJJ)"oSE&!<E;Z!8RVU":(k*JcLB&P5kpm
;HmI6>$>-7=BPH(a'&dY>?P'4?s?`8"i^Q=!"B5m='&[/=]JI&?<165rEGapoi_c.>?=m4?<LE:>?tJC
rW)fq"9U,--76>V#r!h^/g`#&0/!F`!94%d"WT0K1G1C70/,3]/c@3*/`&&f.k<A1-n$`%,pY,t$MXT(
!<<*#!W<#u"3(>F!!**(eGu?E"9AN'!!;oq!!DZiJcLB&huEj(>@(Y7>5q^@=pS56>?PB:>#nAk!6Y?Q
!@CQC=B8C*=^"p1=]\d1rEIKL`**OQ>?=m4?<LE??<L"r!!<ie-77Fui[kEb-o!A*,;Cbt^]4Q>'.GOg
/hHuU"Yqhd/hJ[R/,q2`/IO'Z1,:7+0/"e%/h$]!pAk3or;cj"PQ9_D!X/c9UB&gE!<`M/!.k36!!kSi
>[(E8=^,,,>0'kQ>?F^$?!(H@6Grm&!"hh0>$kK=>@(B:=]JO->$>-7Qs02es&f/&"'f;5,kV-;+oNqk
0E3K;/I4-d1c?g1/1`(@!6P9P,qpi$/h\e1/2/_./MJb.r@@n!cRm$ds"O=#"!K!H(\Ib6&-)\3!WW3$
!T=%7!!EB*!<F";!0.'Z!VZSk!!!)W!.k3h!!ia)?<pi@>?tOU>P_P0>$+j+?!poB1;El%9jCq,?<LN;
=]o'7=B\p5>[755l!(,k$X-_=>[:W?>[q/6!VHEu"!oKK.kiY-/,Ls>/dO-b3B&E=.4H4T!;lg--S6i!
0eG"0/hJk50/,"2q^e9joe-8!s"41#"",BJ!W<#o!!iT*!!33%!!*,6!!EB,!!!Sc!.k3&!.k36!!a!1
?!pc<?s`Y5a]f$W?<UN=?<^VZ_Z9Z9#sVa'A62i<?!LY3>PhZp>PD>/=]Jm=<``X6>[\K@!!`fd-R^])
.k/:d#V%;W0-qnu0H0Wbb5_tj-RL<"1b't+/1iG+0)7'D/]94J1bpF-0/+n+.4l,&!!***g&Tt0":>J9
!!L(;rr_WgNr]1`qZ$U$r;_ELJcO7"!!Mim"rC]T>$>3?a'ALH#[UhA>@1`B>St6V#q]Lk@oul??<pk6
>l.gj>cM$8=BAg7>?G*<?V'\e"qE+11,:7/qC]iA#V%;V/g_o"0bVD)r;[3=.OHT#2Cg://1iIP0)mO%
/=\?d/dX?k-RLZ).4m%mnGrRi\,ZX=$31&.pAi>9!<E86!5S[8"N1:l!.k4C!!OBD>%V#E_-I=WA6W8C
>[C_Bh>lR9"WUZQ?s?e2?E@Gf>m4G;A6<2?r`]@=n,NV'0deV.0uu$E0*idI0ek=7/M.1B!!a#f.O[#)
/1gHGk:`ef#rOOl,r[P1/i=..!!<9*!!2lq`rQ,@qZ$Tt`;kJio)Jjn!!NDt!2okt"l'*0!5\^=+C\V\
>K0tH>mOtO>?bB=?<mTI!!Nj<?"R/DpKlfaX'H!5>?PK;=^PJqmJmA&/1<2+q(KiCs!.Our@\-O_Z9Z9
#m`=70.et2/1iIP/H7>f0D@+*1,UC20JbI<+mo=1"2+^7!q--3!!E<&!WW88!5S[7!Q>&m!!!&"!.k4B
!!=?M=]rRH#@LqA=Bf!9;;;04!!`O'>?PKB>[755qd-O5gg(.k>[(H9=%rkc!!<`b2E&T/q_&1*/2T1<
0e=Zd!"T)h.k*%u0ek=7/hS_-/hZ-:W\4W10/5+:1,LQbm/R.h%ep$U!;QTq#mH7fmJm4fQ2lL:])Vg4
li7))<)qm`iEcas?s-W:>@0e4!!Yo$?X.#E>l@t(?3"72?'/Fu?XR2D>Zk,CqZ--d!Xge>_(GsD/2]:>
0eFO(!9*t_0/,",/MT!Q0)mT50&/&a0/#%51bpirlMpne`W3(?!<i_]!.k3&!.k44!:g*j&Q6GP#@LqB
=^,*@384Go!":Vn@q&\I>?tN@?=71>?i=<<?f#,o@pE)@?!nuC!!*E^`\76C#;.Vf2`<QB(VTkV*\8fs
/2T1=1,(E\0DdHd0<6`1/1!)42)cB0!.k4L!!3K0",R#0!.k3H!!*F"iEtSO#@V%E>$G3B._Yls.:6Rl
@pE8E?!grH?sd8K?s[/H?]e\"@q]"L>!`8c!:Tsh"sq,>s"=7.!@SQ8!94%d)(I3l1H%-I1GLW]0E3c5
0AS8c.PN_;1F3((!3cG)$N^G#!<3)`!.k3&!.k4$!"K&b>Zk<9?!^uN?Y!AJ?N+4.?Me+$?N"72@.@S/
@:<_Z?=R(Rp&N27":SR@?tR/\dpEMn@pWJG>?tN@@UW\Vra5nBC0Xq3#Nc!u!?!^K3&WTN/hSM'.kWb=
1c5.epG)V$s"jO,r@d[q#;%MT.P3A4%__oG#Wb!n/FkNg0bl/f0ekRE1c-d=/M/\/0ejq$1GUfkq#Kg_
!s&l6"8r3%!<EB1b5_PG"k`n8!!EB(!!*.u!:0^c!VZQo!Vucr!iuC*!!!JY!/:IU)Hg9L%;&[I@:EbU
A6N8D>[:Y6?N4C2?N4=(?N4C4@.@S/AmK"Y@U31F_uTZ7"9i%5ARLX-s'l"7&6`7C?".>O>[UoD?ta+Z
;%!!smJmb-1c@9T0IeV'/2&e92Dd8b1B0*/1Ars+1B0*/0^ULu0e4Xu0J#0fgAp:7"9U\F.jh&FmOo8(
.PWY92Dd6E1+Oe*/h\q*,;h(YiW&r^qu?j##RCG3e,]=F"9\l.!!0b5"9AK&!WgmQ])_j3aoI"nr;Zg%
LB,d'$O8q'>\[_X>[CW;>5i%3@K0^7?2n10?2n6g?O'_A>[go@;ZZOkaT)EH=_;*V?drEr=]o-?@q/qU
?!C`I@p*JK?<p>6i;a\u+>5#p/M8h:1GLO@/1`D+0ekI?1c.!Er%[1c#;eIo1,_'R!PJI81c$g:nM-^l
'0%s+0e4b+/MJe31,:@A0/GF:#5/&`!<*%g!.k44!!!'!!!`N)#m(),&H^nk!!17CJcLH(!?PJ]?t<kT
?<^fK=CbrO@UEJK?<piC?=.'s?j9kD?=$uE6c&j#!!>i"@UtU/"Bnu;@:]FMraH1??sm>R=^530$f1ji
&1AnZ0f1aD3&pmhs"==*q_\7,s"NIg"u\Lr0f_3Jo`3&5""Q>_0>B9k1(lT-0ek41/hSq71,(@</ho(3
#MoF\!r2fr!Up)@!13cd!WE'&!<N?'!!DopJcLB&[/^^@10[[d@U3AM?XdJQ@:3LA?iOO4A+a:1@/jU/
@JXC:>[1`E?=,h-!!>)]='XEe\R?(Z@UNSP@:E\P>[1E8>@hA@$et^g"!BNV3&WEF1c#"_s"XO0rA+=)
s"XC)s"XO/rA=%""u\Cs/iGX9_Z9N5""-Ao4cM5q0*sNn4ZbV_2)R?!o)S%U!<E])!;QZG!!!2V!.k49
!<3)o!!*3'gAh3Sc2`FrJcH5h6X!f)?!UfH@UW\Q@/XI4@/j^9A+a:1@/jU(@0TnB?t3DI0CAfC!<s)O
%G:aZ!!=TK=]^_os'l"9s'Z7D@UEAB=C#-A9FBGQ#7)b41GUU;1Arm%1B0'.0DR=%1&j$-2"<=*2*!EJ
1H$?I!;ZZt":GbIe,TRk4ut^<1=.fT0*jKn3]]>_1aWL\!!!&q!<3*"!;urp!8dbY!<<*'m/R4i"U5(E
!1a,i!U'NK!<*#h!.k3V!!O$!?<qDYrF#Y7qdfY7s'b_4rF,_6pL3r-#%hCTAn,6npAb[+%N$EB3'U,:
@;&tV=9\!j!X8c.mJm>,@:Nm$@CfnIA,g$<?iF=8@:<VQ@l=GB!<)s%%Os=m1+N5Zs"a=%s"aU/q_.n'
s"s7$"u.e\/MA[gpAb[)#7M4]*?ZaZ0fC[?/Hb;=!X/Z,oDnag!Y$q>O>6ql0/51>$8sk'2)m9E0JOOJ
ec5^S%e0Pt!T="]!<E6(!V6<j!!!&C!<*#6!65'A!Wrc1ec5[Nli;V;JcOd1%2VK@C1(FX@:NeXA7]?N
AH-0>@K0g6A,Tm:@.@\J?YO"^@V6DV#ne.$/N6!i>@(]G?XmGP@:N_SAn,78o`4ae)%08D>$"Wr8jbp*
/h/4n*#9.r#6Or+$"ID?@dIP5A7T.Y?XI)E@9d;Q>9VDp#7W+00/YUC1]9',0E!U)1]9',0`Nm-1]K?-
1\rmL/2Sh,0/<n9"UbnY*[E*a0/,+90JbC<1,L[>2)?s2li7q.4@;.h,pF`_*Z?1C)&3hs$jd":!!!0Z
0JV6:\MO7<s"j[5r\t$;1,CKnfDtaJ!!;`lr;l]orrMBb('+I>!<E0#!X&`8#RM(V"9S]-!<E0$j8]/_
r;['J+:el%(^1*B"p>)4!s8T'!<*"Y!;QTq!Wh`iV?$VshZ3KQ!!E0"!<NB!!!NB(!!!'$ScGqo*=t8@
An,7ZAmAqW@:<bXA7K%V@V&qVA7]:_ARo?BA,KgAAS#IcAS#"QrF#Y4s'tk4q-a7JmJmCo95%^IC&MWR
@:<\WB4k^aA7T7_@U*1;B\-b*@gcXPAnb^gAn>Oc;$thRqZ%K@,r%220JkX>2)I*E2`*BK1,LmI0ekF<
0`<a+1B00#1_2>s0/#(90Jk[G3&ioY2E(Lnq_n=.!#"]"%g+RG0e+Y.1+t:@3A`QH0`Em71bg^=/gr;%
/!`$i1'KHf/hf"1"u.__0Jk3]cN!tI$0_Hi!S7>E!!!5g!<3*"!<3)o!;uru!<3)6!7V#H!W2p!#mCFD
!.k39!!!5l!8db^$T(prA7T@[A,Kg8A-Q=LAm]4]A,Ts<A,g$.A,g*>B)cEA@fKj7?iOU2@/443>7^E-
q>_*l>@D,XBkCsgART"XA7oObA,Ts<A,U);A*mb6An#IdAS5^fB4<V!bQ%\J)_CtE!]Mejr\P-A1GgpI
0f1d@2D6^;0JP<R1AN^*0E3g-2?,W63WCu62uPZ31]]68mf4:V4>A`D.PNP000)$L1bLC;1bpg?0JYC8
/Lr@(1;YgG2#K*:2DR*C/MAh10J44EeH"M-rrL:C!=o7t!<3*"!<3)q!<3&t!WN0"!Kd?^!r`3#!!!&u
!!!(V!.k34!"Ar@4'lN4B4bac?t*DJ$".4S@q8q[A7]?<AH-*<@f'[8AH-6<B`D`FB)cH@A-?CPAlf'(
!$!Ii?"IJVARf4W?X6rKAS>ad@UinV@9m/J@UNU7A>!H>ASbae?t<n\6k8SagAhur+#GW)/hJh52`Wr]
1cI?N2)$pD0erV^s"X%!s#0m6s"aO0s"aU-q(;V"s"XO/rA4R1.KT;Eq>^dB2EN]K0/#(9rAjm2s""+*
s"sa7s#p<=VD@d!q(i=+0/,7?3&<95#KHfI":#J=!UTmc!VcZa!;uru!q-*h!V$-i!VHHm!riB&!RCbV
!!*0+qZ$X5"OmGD!!!Fh!.k44!8@Jc#UW2VCMRBfAm&JPB3\n\A7>ILqdo;.s'l"<q.0M<qe?(Ds(D@D
rFH+BA8#@(p&P$k&K"J[?t<k^B4YX^?s[/OAnbuXAH--=?iOU8@AIH-AGKdAC1:pdBjk!\_Z1;P&gK"a
2_R-Q3'0&Z0/PXG0Jr_`s"j[1p+uV&s#9s8s"j[4rA4I-s"+%"s"OI.rA+R62)-X&nc/t/4@;:f1b^U>
1]9B70`N^(2#fH53<),@3<(qh1V5FJ/LNM34#JDqciE\<!W`9%lN$qcjT,;]rrW3$o)Jgm!"\W#rrMcm
"p+i.!s&E&L]@GZ"8r4O!:p0j#*AnD!!i`G5ZhZ+Bk^o]@V9%ZCgpmcAS,QAAcH9;AGp$<Aaa45BObZp
oDf%)=_(rNCAqoHB)?0>B)c??B)cHB@fL*@@e"$'AHlUNA7&:c!U0U9!"f;E,rR\81G^^@2_['L1GgsH
lSJPus"sa3s#'a6s#'g4r@mn""#Ves&GQ8(!!W]c4>AWF0)[L(2#fH52#f?23<(i81]KE60`O).1[Qt%
5sI=c/f;;&"9A`5$j-D.!s&H)!UBa[!<3)o!;urU!;cfe!<3)N!4Dk.#m\cVn,NIj$'bLB!!*'#]Dr?B
))PE)An>@_?X[PYl"0m)qdfY8s(2+?p1=M?AR]@[=pXg%$Ns:9?tF(`BkM'jB)?0>B)c?=AcH6>BE)GU
A_Uc!A7]:_AH$-C>?a`D!kJ@7!Y$)!/dF9l0fLa?1c4GQs#'g5s"j[4rAXa6s"jO+q(`.11GCXE2$<OP
'`ogH3&EQE0.nk30f(UC2)I-E0fV/k1]KE60`O*&1S?N,4$+o*!U'O2!!WH(!!EB)!oX.Z!VZTk!V69k
"8W#q!!!&t!;llf!<3(q!.k4%!!!2*!.k47!!`WJ2G7@gAmkOJs((S0q.BS9s(24BqdfY:qdp"@A8,^M
!qu[/5](1GAnPLZ@:<\WBP;-qA7T:a@1$FUB520nAnl'i@Zk:*@5JJp!9F4.!!iW:*$m9q2).#d2=EC#
1]9*-2>o<-2>K'61G^sM0JFjTq#DQ<!$OHU.PNS<3]T2X2)$^:/i>LA1-.HM0J+k31+b(<3M\M*2#K-4
1c-p*#dXL8!<`Z2"p"bk!:Bje!T*kZ$OQq:qZ-WspAk3orrE'"eH!2]!>Ga\!9sOa"e#FI!!*9*r;a/(
"T]8`3_3KQB)cH0B)QBBAH-6@B)cNDAH-6>Ac$'EB4kaaD.dH;p])ETARfChAnPL\@:<\WBP;-qAS#Le
@Ua"aC2.BoC2.6g^1Q#0"(=YI"g7n2!!!$,'H\YUqDR^trA"=2s#0m6s"aC.q(r782D[$F)u'CU'f@ct
/i#4D4?GV_2DHp>0/b^F1cmcR0eY170eY1@3q5&'1]oKZ'a*FqT`G)nj8]Gc!!N?&%1`LBqZ-WspAk3o
rrE'"UB#lGbQ%VR\,_*\hZ+Dq'I#+j5uLus@UEqe@VB@cBk_'eBP?@;#%_:\DeWc#q>^O8?gD@6BE)KA
AcHQFB+ANaAm8PM@:j4cB5(jkA,BjJB4kspAnGUc?XR281D^)f!3?/9!t5n_,:"s&2a'2V0JbUD1bULA
3&38W1\<I-1c$^:1+s48!!*WkTel^.(H+0&/28k80fM$W69I=c2DR'H1,q!H2Z5HB1G^a@1G_'Q4$5V]
+V"OT!;HO!!<`Z3#m1D5r;ZfueGo^R!WW3$aT0Nbr<)!Y!s/N6#2]E4!.k4?!!!%i!!cP1?YX=gAnVB^
CMRKmC22^@#A7XaDJ<of#lFZ(#?t`LB^'1HA7T:aD/F!$CMIB@&L02(?Y*n_A8,Ujq.K\B"_gt*1F*@G
!7h,R1cRNL0/ieds"XO6h_YQr1b:772)PR8!!36\47"f41`&/42`E<?1,:aE2]rMI+Y,3%1bpgF2)tCh
#Vn.o2DHR%('jO5jT*$q"9AK&!<L^N"9JW)!!2rs!!8Virr`9)li;V;cN!qM[/bdYfDl11C2@R!CL_-q
rFc.EiFiL/Bk_'qCh?-;rW!!%8nmO'\7c7^AnPakC1_'gBP0[0!"oYZ,r%5?77KmA84>j,1b0UW!q-,c
!"9r04#&NS2_ZpE2`<S[2"`[22)mWU.4@M6!WE'$!\cGeTeua-#WFLo2`EKL1a2bs&dK!a+!2g[.kWD)
.k)_d*u5.`UB'fa#R18/!Wi?%!<LpT"T\W(!#6-e!65'?!s/<""p5):$k!ISr=&uA%1ERK"U"kW!.k3&
!;c`r!g3Nh'PLumB4YUhC].oGC#N_2BjtdkD/NTf./j2K4'ui;\7k/@$YF!`B520nAnl'm;PaBF!"9;q
1GgdF3&!$F2`<SO1^H#p4?Y,C3B\J`!!=Q42)+>Q[l"%B#;S%n2`3KL.bF`s!!iZ,!!<9&!!*,a!;$6s
!<E0#'GCHH".0)a!!*-'Mu\G0JcNF`%:=$fA8GprD.[BoBkhDABa\HcC2IKsD.[)h!%S.cChIXZBa\`n
C2.HsA7TFiB2\:#M#[`21c@*O3&1Ul3]]&Qh_bp*4uG8N1I!o^$ih/(3&3J(2<d!s1C#cp4ZtYZ3A%*.
b5hPCg&M*Rqu?d#!<_TeZiL+,qZ$TsfDt"5^An67`;kJiMZ=#AC1_HuBl%Tt"D2@^C22^A%q]TeAoDKr
A7/I[@:`tiB")L?Ba\]lC2.HsA7TIiAQGT,f)Q6u0f2!P3AN?N3\rQK1uU;&4?tVU2`*KR3].L-1,1jG
l8?(/rA+[92*F)\1cI,?!1Eof!UBaU!!*-%r;Zp$"p"aq!!!$"!W)it!<S/ZJcLB&]`8KNBPM$iD.dKp
BPD0qC>ik8AR]XpASGjnB4bmlD?=ZbD4t\BC'SHeAS#XnB2A$tM?!kc1-7EI1-.Jp2ZGSl2@hl.3]&`T
2``lU2`EWO1d&9+l8B#,1c$pE1cmcT1Hd@e!7h,R!uV(=!X.*T!<WDu!!!&a!4;h,"9/DM!.k3&!.k4=
!!Gi,BldtdC&Mi+C(G#lBP_BuBPM?qD.ma&D.h:3ctWr*D/3p%C1h0pD.ZAS!4r4>,!.hE00;6S2`<QN
1uUA$5!(MW3BK,Y4#]/Y"#Mhr32&;01^>os4ZtVY4=ft&L]@Sj!!!3)!8%8P!<W#r!!0P/k5bMaScF?B
JcOm4]`86DA86.#AS(gUheN1,s(VLHs(VLKs)%dNs(7s>s(M@F"_VIcDJ)9)!/^a]"#i7t/j;HX"?/1q
2E'MQs#0m9rAjm8s"aU5s#dbLlSni+rAOmB4>J`P,GY=j!!EB(!!NGM!<3)^!.k3G!!!Yj!.k3&!:Bgp
:hOT^AS#XmCi!m&iG/C.rG)@Hs(q^Qs(hXJd;%'Ds(VFH"__RhCMk];!4r47/NGI=5<o$'iAgiqrAY!C
4#SuQ1H#:m4$0,qs#^0="Zne(0g-BD!/:LR!ri7P!.k3&!.k3E!!sKXEGB)tCMRa&ltZ0-s(q^Ns(VLK
s)%dPs(hXHTkaUArG;II!bcHhMu`5F!t@=R2Z5]:2W$Lm2ZGl=3<(l72ZGqg37'Vm4$,;W3&iu]2)I6#
^AthF"To26!!<>L!<3(j!<3,t!!*c:nc47AJcLB&dJsPBCi<otC2.R$heN1-s(hXJs(hXOs(q^Ns(:V4
[VGhVrG)RNBl%d""5*\9!4r43,rY``s#L*;h`1Qms#^6?s#'a5s#m&8$TgF.2E3ZX4#]5T!Up)F!!NQ,
!!<<'ciF(H[/fFkrrW&t!"bn*JcLB&T`>?)Anl-uC2.R$lYH0/s(_@Fs(_RLs(\6C!buIe#An?rC2.Hr
8;[E7!!i]d4#SuX3]K+T3r_2>3rM&<3rM%c3mftq3&i]M2E!TW5<gF,!4i.5!rr<%!R:\8!<39#!!",1
!/COS#Q4XS!.k4!!!bGtD/F'(D/J0Hs(hFHs(hXOl"mhFs(hRN"DV[aC*_C2T)]$93]Au[4R+s!3WD2@
3WD2>3WD113=%Gu2`Ef[4[B[<!9jL`!Ls/8!<3<$!!!PD!.k3&!/1CS"BoaKE,'-'CMdqID#\5LD?"DO
D?"GPCB&2ODn0]KC^OolDJjB2C2.Hd!i5nE!!r]^2E!WY4?PVaiB.'(s#C$@s#0m=s$6N@loVX;#sUX4
2E<c\4\%Wd!9F3k!!EB(!!<>X!<3-#!<3)s!0mNa!Ug#?!.k40!!!%p!7CiQ(2e)+C27U%D;f=2C&`&M
C]A8OC]A/LDZ=Y?Cq+<]C&MoOC2.07eGu3A"q<CH4$,PelT+Vus$$HAs#g<>s#L*Es#0m9TfE0<4u`I"
"$8S0,`)Ne!!E<&!!35V!<3)=!.k3&!.k3(!!+cf"Di!mCi9/hs).jQs(hXNs).jU_/:-1EH#l4CLgsn
DgHSIEGoT2D/a<2DfK`4D#J,KD>8#FDY\,KDZ+D[Ci!m$BPq^,E,AnaUB&X@#9,]`3]fDa3W1l93WD2@
4T@GA2ub_X2to6Q1,:aG4$,o$1GU:&2)[TX2`3QP2`3KN3B9;g4Zt\]nMgJ.s#U0As#U*;%6-=-3BK8`
5<(\]1+iXZ!.k3^!!*<.mf<@gi;ilZr;Zm&!sOM]JcLB&[K$a;;J^;gC2n$.E,fl9DuFPQDZ=YTETM,p
D]a"?EH,i4AnH4,I!]dOC3+93F)Go>CiO?1CMRa&E,b8aqecs`DfBZ6Df0H,E,B90CiFMAmf7t?!!*9W
3BK;`4?!-ss#U0Bs$$HFs#L*:_)WSo1cI?U4@Ve"1ase02E<u[2``iT3\iTU4?u.q4uYFr3Vb]83r;&:
3=7l23^5ei4?#,X&u,GY!:Bgh!<<E3mf<@hi;`lZ!rW*#"U5%Z!9F34!.k3(!!*4,'Q%i.DfT]3Df9W8
E,]Z2Ci"$.EcT!7s)@pT'ln>&BObh"BkhBrB5_p0C3+9/Ci4.hE;+;JDuXkVEW:"VD@:B$E,]l8E-,r=
EDE/,ci=g`3'oM\2`Wu_3]]/W2`Ef[5!D"g1c3?8pc8@5rAb`Q2*XPn6T-\a5<V+g4>S`V3^,_g3]K)[
3q56-2ubl94:=222`Eua2*!TZ4t>"]SH&Wjr;Zfuq>gNto`2Q'!!14B!!.]Pkl:\cRfJ$?[/^=@?>jt)
rb_[RrG_dRs(hXQs)R1<hJW@4s)7pTrc/W[Ch$cY:MFZbDJ467EGKB,DJoDlnS\;FrG_^Q$ZBs&E+is+
DfK`/'C>dO!#5i%2**ZR4?PYc2)R<O4?Phm3]]&Q_)`Mo2`WlZ3]/ci5=I^c"YW&*6T6e_2a',_4?>P%
3;>Q23r_/;2%_f-3]]Ac3]]2Y3&rrV4#o5-T`E48!!2orrr^.=m/R+ep](9pT`BZEJcLB&jo>`#EG9N:
D/F0.EH1kss)A!R_/Km&Dej-.EH6)7Eb\bc!!iX4DeT,h!Gc<HEW:(ZEW9qHE#*P;EcQ):D/F0.Df9Z:
F)uGJG]%>9'Y4:N!"&ur3&`i^5<_7j3;kc82#fQ86KL;b4!-XM5<h4k3B8lW8j3L\">r;#5!D1m2aBGd
2E!QU5!JKu(,Rj-3'02d5<V.k4#o;Z2E*]Z1d4/9m/V_<!WW3)o)SdmrrTY0#6=i*!!<3&)X.7^!!!+p
!6bEC%(H<&!!!&@!!!PZ!9F3f!!4B]GlDR[DZ=\QF8p4ZCZBBkE;skVC]/5TE-5D!rW!KCCNOE5BPh[*
E,]i<EH,l6nSf4bFE2D?Df'?/DJsH6EcZ;AF)6)?0'WFg!"&]>4$>Db5<_7j3;kc82#fQ86GY_k5!D1q
4$,G_3'BJ8rW!K:4$Ynm3B]Pj3B8uU3B98epH/76s"sa8s#^0C$TgF13ArcQ2DdQ_)P-rD!;uu?!:U!g
!rN#u"e,LD!.k3&!9F1n'lIl/Ec5l3CN"-7G'%hCD/3q'E;s\QF8p.WEWK_[qu@6QD/X0/DfTi<Ec,c2
Ci4.\E;sSNC]A>OF:*&/D/F'(H#[_?0=Lqe!"K>u4?#2\4$l7q4"i6D2#T]#45N%+6:*Lc4?PM[4>d9>
!!X&o5W_7r3W:u;49%SG54L]K84Z$43B8lO1c.0O4Zu%q2DRH\-0bJ^!<)ru#58,t$aB[3"oJ?$!X@oi
oDnmnq#CBrrVup*ScHq6!#)mCm/R+oa8c2Fd/]L5&L;::FE);;D/jQ?G^"@NE,9@iEPui'Ci"6:EH-&@
Aeb(A%OGh,E,Tf?FEDJ@DJjE4nSo.SBP_L*EclMJG&q_DE,BH4G62eT!JLO6!"fo/3]]Gg6UO%$0/#.=
5X7Y&_)r#l6oHqe4ukV]$iBu9!!!Zp5<qFo4#o;b5!V@s54Lc88cM0X48guC3B98e5X7+_5pucD!2]br
%,V'/!!!,W!<30$!Vucr!U'N8!.k3&!6>-O)/jJ:Ec,u5E,BH3E,ou=Em/P&EVskVE<pK!GBe4UEF&nF
!"B`RFEhhHD/XN7F)c5=nSo1\E,BQ2E,KW6F)lAAEcQ5ADC3^1jT)Oc#80!U4?>Jd55mhO4?PS_4[.mg
k</Z*r]CHO4Z,,N1e'J,p](X12EO)b4?Ykp4[8p/nN?e7%mW?G5!V+k3''&\5!M7p)<V!O!;ult#5eH$
!OVn3"9ef-!!!)q!!*--lN$DS!!2rs!"#+paoDDB\cD4"!"6jJ!"[?TQ2hF1ATE'6EH>r6DK9c=EcH-u
EQrJ6EcH&;EH-#>E,orBGB-Xip&GL1AT;O-Df9T0E,]f9nSo1\CNXT4E,T]:EHZ;AEc6&5+om2piW'Gr
1-.Z\4%2>"69RIl3^:\L%m<$:4$5Vg4[DCh2)6^<#5J8u!!ifd3&j)e5!D"+4TIV74qTn;7R04*5X7Cl
4#]2_4?ke=ZiI0-!!1^Pg].EX"9JVr!!!&S!!!&X!.k3&!.k3k!"K64C3X]>GAqP?DfKc<F3AS.EcQ5A
EcH.!Es?Z+Ec-"n!V??s"=n_6GB7bFrcA-_nT#1aHuF%NEc,l<DfKl@F`Uk"blEt.%KeLQ5rptd5X@b)
4Ztnir]SFf$pHd95!;+n2)n,p5q;I+$NhA<4[;.p5X.In3q5?F2`ilU69I:k5!;%n5X@^o$NPbYhuEf[
!<KG*rrMlpqu?`u$i9r(!T*kW"LJ02!!!2S!7q2N"7uQo!Z9Mh!!;<`JcPQG%0AS4GAhYDEGoc9EclNG
Er0n]EdMqGD_CMZ#od,eG&VD=EdW*,F89heG'S4VDKU5GF`DG?EbI31RK1;,%07_;5VtJd5sn(*5<CsN
55m_I4Zu%.4U!r23C?7Qn,Nb+2)mfa4?G\k48D&84qBS63BfGd6U*k#4Zbkg*!4@bjT'l4hZ*WWaoDDB
h#N$,JcLB&`;g8gBle?<F`VVDEH?0CEt!,1FEDSEF*)MAC0qYB!!iTYB5r0BE,]RfFSTteG%bl>H[KgV
D0T]53sj"/OoPk&5XRn!3BK;i6U!a54j?+m4?Ykj4T7JG6U3U=mJmLn+@\:P4uG_lnN@=K3AroU2D[9U
84-'!#5eIQ!8[\V!Xc=8!<iMs!;QTs$5NUBm/R1g!!E3'qZ$X."0_cW!65'>!o3hW!s.E^JcPKE$40=G
G'.kIEH-&@aE.`2F`VVHG'@jh"R?$k#ru^DGAHqpqK**aFa8"SGC=d[D+G>*!5edB"tDu$3'02h6chM#
5!D+n5!;"l5<hRa!p]gj"s#N]4?l@+4psVB4#]#P4Zc(s0+Gu&O8o@`!!!&o!36)"!rN#u!q60m!<iQ.
"8)YG!.k3&!2ff&'52?.FEi%SGNEu.FU*,7FEMhN>866#"9BZ;H?Sh$!-A-`"_r!k;Bc>'!.k4B!!ilq
6pEjr3BK=D4pO;:4[)(o0+I(E"9B;l4?3.#q*#*G4[_\)7RT'G"-`f$!!!5A!;6Bm#3Gme"9nnl!!<B-
$3J6JjT)7[!#"#dhZ*WWaoDGR!o<p/!;$6r#!I$MG^+FVa`RT*rcJ<eE%qFS!!<]`8n[sBqfN*gG&VD%
3Y@DQ_#O]C,sFOS3BK=F4U=244[)%o3uJ(Z!!<HA-T:icq)npH4$Pqf,R_HhJcLi3!!2`mJcLB&JcMVI
*=bV^E-cPIEd)SHFEMhQFE_nOH$XXZH#n%RHZO9,FoZe1H#n%QH?a[XG'J7XEcu_MGBJ+PG'\7PG^"=R
I;j-c#Mf@l$mRu/@qBS!G\_>9>?='A)?ndoJcP<@6O5215tOC-4[MA"69mk&5<h7m5!M1i3'fhg2FKqr
4[;7n3^Q.n3BB2c5<Cqo4?Ykk5Wq=q5=.Os5X%:n6pEs_"l0._#T"jA4$#M35t*k&5r:GN*tnd:!58F6
"W@7=!!2`mrW2fprrMoqrrN-"rrN*!!!2rs!s&B%!W)it&-CYf&H`@O&Io-R#RghE$4.(L#R:CG!/^aV
!Vuf;!!!&T!!*0-o)Jdo!V6;C!7_&g(/SpmG]\(MFEV\KEd2_QGBS+OH?s[TH[BjVrH99.H#n%RH['dY
G'J7LHZX@YEclVNEcuPMG(+U[Db(<)!9X=a"U,#1TE(\d*t0ef76s+'5XIh%6Td[t5Wq7l4$#Dg5rLVh
6p3[t59DpI6ps!o3]]Ji4$,Gj4$,nn5!M=q5<_=q6Td[r.L4H'!s8W,!Rh%#!9sOa!VZQo!W<#u!W)ls
!Vl`q!WN0"!VZQq!<</G!.k3&!.k44!29H4%5W*RF*;nQF`DMGEdDYEH@'[QGB\%HG'8+TrH/'`s)J!V
'6A5?FEi"RF`r(NGBA+[H#IIW$D%6L!:Bgu#TYrk4?Z/!6U3t(5=@Or6iKLR56!tL56!_E6N9=N4T@kK
7MA*T84#O)5X.Fu6V'=)5<:hb,R2WrJcNC_!<`qU!!3-3",-`2!!*6?r;b(B!!0P/JcO4!)%&?7H#dnL
H$"1LDh*%OF)l;FGB%VHGBeB2FT6RbEW'hgF)u5BFa/(UGB._AI<'d?1'QnBJcMDC)$M$=5s@G"7mKF+
4%MY!4[_\%5"%e%4Zbb)639J94SqS[6:*k)4[21u5!).u69@@[*!;`3JcLB&JcLB&JcLE'!!*]K88<9i
I<g0hEdMtRG^+(BH[G^9)K^(GG^=[[GBe@VGBnI[I!U-_F*DkVGA05MZiG[Xc2]R3/jh``4$#Ge3C#ks
5s\=D3B9;g5!DD(5s[Uq5X7Ls5s[[u5smau5X.V'5<D1Z$KhD@!1Nri"U>D+!<3*"!<3*"!;uor!WN0"
!VZQq!W`Cm!.k47!!**(d/X.Nc2`FrZ2bF<,YE!&IXHB_IWKaYCi"HFrHK6%F*DhSH?OIVG^"@VG^=CV
H$+LUA3_(7!!%TNjT(bM(]k?u1d!o`4Zc1u5s\=D3B9;g5!DD(5<fiE4@)7s5!_Iu5!_1m4[;G$3$8Y2
QN2U;fDtpPrrE'"qZ-QqrrE'"^AricJcLB&JcP]K"U?SNBlnCpGlN*iHiJ?jFT6O_GlMj`GR/S?G'\FH
4t$Z<!.k3m!"oDS0L%rj76E[q4Z>;a5=7e(62a%J7K#IM49[r73%>jNhuJ?/Q2h<o$l&dE!!!3-!!!$#
q>g9j#QXr+!##kT$NZIlJcOd1!Xo)1i;`o]!XQgHJcMhO"UlS<<+L4PIK+ZoGPugeHN/-eHNeJ#:,jF*
p&K[EJcPNF$3q4h.5<kH3]]JirBq,^69me*7R04*4tn<(&I,68JcNUe"U,)1!!*,j!!E?(!!!&U!.k3&
!.k3&!8%8a!=T_c0/bmX7Rog55rpkV,SgTu!.k3G!"]_Z()eAC+<`0^+s.[<&./R1!.k44!0$sY!qu]l
!!!(W!.k3&!.k3K!"o;@(*>1f4$c>+6UO.#2(p3j#4DPD!.k4@!"]_Z()eAC+<`0^+s.[<&./Q8!.k3c
!!!)j!!!)O!.k3&!.k3q!.Y~>

%%EndBinary
grestore
np
1165.38 305.58 mo
1165.82 305.812 li
1176.84 284.771 1201.51 272.05 1227.55 272.052 cv
1235.54 272.052 1243.65 273.249 1251.54 275.766 cv
1278.34 284.331 1294.92 305.698 1294.92 328.448 cv
1294.92 334.219 1293.85 340.082 1291.61 345.859 cv
1291.38 346.457 li
1292.02 346.536 li
1311.33 348.946 1327.37 360.188 1333.66 375.589 cv
1335.53 380.196 1336.45 384.946 1336.45 389.658 cv
1336.45 400.698 1331.43 411.539 1322 419.804 cv
1312.02 428.537 1298.33 433.293 1284.3 433.292 cv
1279.38 433.292 1274.43 432.71 1269.58 431.515 cv
1268.83 431.329 li
1268.97 432.091 li
1269.23 433.492 1269.35 434.888 1269.35 436.268 cv
1269.36 447.733 1260.67 458.243 1247.25 462.089 cv
1243.76 463.088 1240.19 463.566 1236.67 463.566 cv
1225.01 463.568 1213.89 458.319 1208.03 449.425 cv
1207.65 448.859 li
1207.22 449.383 li
1195.95 463.117 1177.39 471.103 1157.91 471.101 cv
1154.12 471.101 1150.29 470.798 1146.47 470.176 cv
1123.07 466.363 1104.64 451.282 1099.49 431.872 cv
1099.4 431.533 li
1099.06 431.502 li
1083.04 430.049 1068.72 425.594 1057.74 419.129 cv
1046.76 412.663 1039.14 404.196 1036.45 394.743 cv
1035.73 392.231 1035.39 389.723 1035.39 387.24 cv
1035.39 379.142 1039.09 371.272 1045.9 364.413 cv
1052.72 357.557 1062.65 351.732 1075.03 347.776 cv
1075.51 347.623 li
1075.35 347.144 li
1074.08 343.27 1073.47 339.355 1073.47 335.488 cv
1073.47 319.792 1083.56 304.859 1100.69 296.964 cv
1108.67 293.283 1117.4 291.497 1126.05 291.498 cv
1140.53 291.497 1154.81 296.504 1165.04 305.947 cv
1165.52 306.39 li
1165.82 305.812 li
1165.38 305.58 li
1165.72 305.213 li
1155.27 295.574 1140.76 290.499 1126.05 290.498 cv
1117.26 290.498 1108.39 292.31 1100.27 296.056 cv
1082.85 304.081 1072.47 319.35 1072.47 335.488 cv
1072.47 339.46 1073.1 343.482 1074.4 347.456 cv
1074.88 347.3 li
1074.73 346.824 li
1062.22 350.819 1052.15 356.709 1045.19 363.708 cv
1038.24 370.703 1034.39 378.828 1034.39 387.24 cv
1034.39 389.817 1034.75 392.418 1035.49 395.017 cv
1038.28 404.804 1046.11 413.437 1057.23 419.991 cv
1068.37 426.546 1082.82 431.031 1098.96 432.498 cv
1099.01 432 li
1098.53 432.128 li
1103.8 451.998 1122.59 467.297 1146.31 471.163 cv
1150.18 471.794 1154.06 472.101 1157.91 472.101 cv
1177.66 472.099 1196.49 464.019 1208 450.017 cv
1207.61 449.7 li
1207.19 449.975 li
1213.28 459.204 1224.71 464.564 1236.67 464.566 cv
1240.28 464.566 1243.95 464.076 1247.53 463.051 cv
1261.29 459.113 1270.35 448.262 1270.35 436.268 cv
1270.35 434.827 1270.22 433.37 1269.95 431.909 cv
1269.46 432 li
1269.34 432.485 li
1274.27 433.701 1279.31 434.292 1284.3 434.292 cv
1298.56 434.291 1312.47 429.468 1322.66 420.556 cv
1332.29 412.125 1337.45 401.005 1337.45 389.658 cv
1337.45 384.817 1336.51 379.936 1334.58 375.211 cv
1328.13 359.411 1311.75 347.994 1292.14 345.544 cv
1292.08 346.04 li
1292.55 346.221 li
1294.83 340.331 1295.92 334.342 1295.92 328.448 cv
1295.92 305.193 1278.98 283.48 1251.84 274.814 cv
1243.85 272.263 1235.64 271.052 1227.55 271.052 cv
1201.19 271.054 1176.18 283.906 1164.94 305.348 cv
1165.38 305.58 li
1165.72 305.213 li
1165.38 305.58 li
1231.75 310.64 mo
1231.36 310.329 li
1219.46 325.282 li
1196.44 322.708 li
1199.52 339.494 li
1181.06 352.389 li
1198.04 362.737 li
1196.5 382.004 li
1216.48 379.437 li
1231.78 394.823 li
1245.52 378.181 li
1268.6 382.046 li
1264 361.498 li
1284.12 352.416 li
1264 340.738 li
1268.61 322.702 li
1245.52 325.284 li
1231.73 309.865 li
1231.36 310.329 li
1231.75 310.64 li
1231.38 310.973 li
1245.12 326.335 li
1267.29 323.857 li
1262.84 341.222 li
1281.94 352.304 li
1262.84 360.922 li
1267.3 380.814 li
1245.12 377.099 li
1231.72 393.336 li
1216.84 378.383 li
1197.6 380.855 li
1199.08 362.203 li
1182.88 352.331 li
1200.62 339.946 li
1197.66 323.852 li
1219.9 326.337 li
1232.14 310.951 li
1231.75 310.64 li
1231.38 310.973 li
1231.75 310.64 li
1156.33 352.36 mo
1155.94 352.049 li
1144.05 366.985 li
1122.64 363.142 li
1122.64 382.427 li
1102.44 395.452 li
1122.59 403.242 li
1119.54 423.715 li
1144.03 421.147 li
1156.31 437.883 li
1168.63 422.404 li
1191.62 423.684 li
1188.55 405.703 li
1210.25 392.715 li
1187.09 383.653 li
1191.67 364.429 li
1167.13 367.002 li
1156.36 351.523 li
1155.94 352.049 li
1156.33 352.36 li
1155.92 352.646 li
1166.65 368.058 li
1190.37 365.571 li
1185.91 384.267 li
1207.99 392.904 li
1187.45 405.197 li
1190.42 422.616 li
1168.17 421.376 li
1156.35 436.237 li
1144.49 420.093 li
1120.72 422.586 li
1123.69 402.598 li
1104.64 395.228 li
1123.64 382.972 li
1123.64 364.338 li
1144.47 368.075 li
1156.72 352.671 li
1156.33 352.36 li
1155.92 352.646 li
1156.33 352.36 li
.635492 .400641 .0580453 0 cmyk
f
1252 367 mo
1215 367 li
1215 336 li
1252 336 li
1252 367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 588 ]ct
[37.4805 0 0 31.4806 1214.76 220.76 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 156 
/H 131 
/M[156 0 0 -131 0 131 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 156 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 156 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 156 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 156 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
aoMA@r<W<2r=SuAr>,>Gr=Sr:r<W?&k5_I]r;um#q$-X"r<E0'r<!$"JcLB&JcO=$r;lj&r!rZ;r=f,F
r=o2Br!iT1r;k[RZiL%+quum#q$6j&r!!$$o`0RDJcLB&huN]Vr<W<2r=SuAr>,>Gr=Sr:r<W?&d/^o]
r;um#q$-X"r<E0'r<)<bJcLB&JcP*:r;lj&r!rZ;r=f,Fr=o2Br!iT1r;jn<aoMAAquum#q$6j&r!!$$
hZ/6.JcLB&p&P$lr<W<2r=SuAr>,>Gr=Sr:r<W?&])^@]r;um#q$-X"r<E0'r<(OLJcLB&NWB"[r=8cC
r>kh]r$:eWr?V:cr?;+\r>5DAr;sV3n,WCfr<E3/r=8c8r!qWor<rQ.r;kROcN*nFcN*nFr;ccsp&K[E
R/m0fr=8cCr>kh]rZqLhnK[uXr$2.`r>tnRr=/],YlOY$r;lj$r=&W7r=/Z7i!oVmr<E3$ec=+ur;t:F
r;uotr;lKiJcM;@r<*!.r>>JRr?M4c!$h%Zr?V:cr?;+\r>5DAr;s,%rW)ltr<E3/r=8c8r!qWor<rQ.
r;k(Ah#RBTcN*nFr;ccskQ$27VZ?Ytr=8cCr>kh]r$:q[r?M7dr$2.`r>tnRr=/],WrW)!r<E3/r=8c8
r!qWor<rQ.r;j\6kQ(P_cN*nFr;ccsh#N$,])_d4r##AOr?hIhr?hIgr#tk\q'>e_s!@Ujr?V=hr?_Cd
r"o;7]`A!4r!WH4r>#8@r=Al=!"f&:q%*E5r=AN1q%*E6r=/Z3r;s\5quHWsr;ccscN*nEr;cTor;kXQ
JcNdjr<3$8r>Y\^r?_Chr?V:aq'5\\pa,kcr?M@jr[7Xjr?D.Ur<0e6r;um)r=/]?r=8c:r=Jl8r"&c;
r=/]9oFC[-r=8c8r!NB(\H)O0!!)uur;k4Er;lisp]CBpciAXtd/a+Jr##AOr?hIhr?hIgr#tk\q'>_]
r?hIgr?qOir?D.Ur<0e6r;um)r=/]?r=8c:r=Jl8q%*E5r=AN1q%*E6r=/Z3r;sM0qucltr;lisdfB=I
r;cTor;jk;JcOR+r<3$8r>Y\^r?_Chr?V:aq'5\\pa,kcr?V=hr?_Cdr"o;7rrBe6r;um)r=/]?r=8c:
r=Jl8q%*E5r=AT3rsni8r=8c8r!NB(\H)O0r;ccsnc7MHr;lisp]CBp\c@TfirK#mpa#ecr?D1er@%:c
r?_7dpa>kcr@.[lr?M4ir?2%K!!("=r<N94r"8lCr=\o:r=\l:r=SN1r"&c;r=Si8r"Ar=r<C4@r<N9'
quZZpmf;;Hr;uour;u`ur;sS2JcP3=r>#)Qr?qOfr?hIkoI'S`q'Pkaq'c1jr?hIfr$qXfr=8K#d/a+M
r=Jl=r>,>Eq%*E:p^mB9n.>C+r=Su<r=8`<r=Ai2`;oiAr<)s!q#TOVli?tcr;liup]gZuYQ07Tq#L@.
pa#ecr?D1er@%:cr?_7dpa>kcr@.[lr?M4ir?2%Kl2]T>r<N94r"8lCr=\o:r=\l:r=SN1q%*E9q%!<8
rt#,?r<C4@r<N9'quZZpf`:aHr;uour;u`ur;reqK`M)e!#>8Sr?qOfr?hIkoI'S`q'Pkaq'c1jr?hIf
r$qXfr=7]bk5bGcr=Jl=r>,>Eq%*E:p^mB9n.>C+r=Si8r"Ar=r<E0"aoMAFr<)s!q#SeA!!<-$r;liu
p]gZuRK/ELr>#)Q!%7anr?D1er@%:cr?_7dpa>kcr@.[lr?M4ir?2%Ke,]%>r<N94r"8lCr=\o:r=\l:
r=SN1q%*E9q%!<8r=Ai2nGq)>r<N9'quZZpcN*nFr;liup]gZuNrYpTr<<-Er@@h#r$M@mr@Imsr@Imp
r%.dqod]_eq(;Orr@7atr%Rpur?2%CeH#OMr<`E0r=Sr5r=]&Bq%3K<r"f5Fr=eu>r=Sr?r=Jo>r=Ai:
r=Af<q%3K2r;uBeL]I;QrrIcQXoSD(r?M7kr@n-rr@@gtr@7asr?qRqs"+*tod]_eq(;Orr@7atr%Rpu
r?2%CeH#OMr<`E0rXf,Br!<66r=eu<r=f)Er=o2Dq%EW<r"Ar>r=Su=r=8c:r"8`9r<`E(lMuhCq#LHq
JcN%Ur<<-Er@@h#r$M@mr@Imsr@Impr%%gsr[ILipac.lr@Imsr@Rq$q(;Ofr<CdPr<*!)r<iK8rs8T0
r=]&Bq%3K<r"f5Fr=eu>r=Sr?r=Jo>r=Ai:r=Af<q%3K2r;tmWQ2p^]o`0RD]E%m6r?M7kr@n-rr@@gt
r@7asr?qLor@.Olr@7Rmq(;Orr@7atr%Rpur?2%CeH#OMr<`E0r=Sr5r=]&Bq%3K<r"f5Fr=eu>r=Sr?
r=Jo>r=Ai:r=Af<q%3K2r;tLLT`Flhl2ZD9b5hJEr?;+krAaa0r&=R-r@@h"r@m^kr@Rt!qCV_!r@[n!
rA4C+r$hRrr@e+'r?hIHh#RBVr>>J@r=f,Ar"]/Er=]&Cr=f/H!#P,>r=nl:q%<Q>r=]#;r=A]:r<rQ,
f`:sPr;cft!!02%o`>!kr;l3aJcO@%r<<-Cr@Rt-r@n..r@e+"r@e+'n14Ghr@I^qr@\"$r\+4+r@n-u
r@Rt$r@n0sr<;!Wr<3'9r<rQ;r=SrBr=o2Cr=o2Dr>52CqA&rCoFgs3r=o2Cr!iT8q%EW6r<1dRr;uot
r;lWm[fH(%r;ccshuJ?/i;if[r?;+krAaa0r&=R-r@@h"r@m^kr@Rt!pauFsq(M\&r@n-ur@Rt$r@n0s
r<;!Wr<3'9r<rQ;r=SrBr=o2Cr=o2Dr>4r<r=nl:q%<Q>r=]#;r=A]:r<rQ,f`:sPr;ccsli=m&o`>!k
r;kFKJcP-;r<<-Cr@Rt-r@n..r@e+"r@e+'n14Ghr@I^qr@[n!rA4C+r$hRrs"FC*r@n0sr<;!Wr<3'9
r<rQ;r=SrBr=o2Cr=o2Dr>4r<r=nr<rt>,>r=o2Cr!iT8q%EW6r<1dRr;uotr;kjWblID;r;ccsaoI;!
oDndnr?_Cnr@e+!rA"4*rAOU3rA4C*r@Rq"r@dLkq(_h'rA"7-r%e40rA"@,r\4:/r?M4Dk5bD^r=]&E
r>bbQp^d<3r<rQ>r=erBq%`iBr>"o;rY,5Cr=Jo@r"ArCr=]&?r=o2Jquc*^quP(CJcLB&rrDs$r?_Cn
r@e+!rA"4*rAOU3rA4C*r@Rq"r@dLkq(_h'rA"7-r%e40rA+=*rAOU!quu6`qucm1r>,>Or>>;?r=&W4
r>,>Fp_W`@r=o2Fn.Ya5r=Jo@r"ArCr=]&?r=o2Jquc*^quO\8JcL]/r!**Gr@In#r@7b#r%e4/rAFO0
r@e+$r%@q$lnJ5irA+=+rA=F-rAX[1r@n1.r?M4DqZ-!`qucm1r>,>Or>>;?r=&W4r>,>Fp_W`@r=o2F
n.Ya5r=Jo@r"B#ErtYJFr=JoAr>GM8k5bD\\,_*\Q2pger?_Cnr@e."!%Rq%r%e4/rAFO0r@e+$r%@q$
lnJ5irA+=+rA=F-rAX[1r@n1.r?M4Dn,W4`qucm1r>,>Or>>;?r=&W4r>,>Fp_W`@r=o2Fn.Ya5r=Jo@
r"ArCr=]&?!#5DHr>GM8k5bD\XT3qQV#^Gpr$VG!rA"7'rA"74r%e=:r]^9@q(hn*r%S((rA*juq)&%-
rAaa4r&+F0rAOU5rA=I)r$;4AlN$qsrXo)Kr>PVSr>khOr"/f=r=8W<r>keRnJCs9q%`iBr>,>Fr"]#A
r>#8Er?;+X!#ke:lN$hjkQ(P^^AricYQ4V&r$VG!rA"7'rA"74r%n:8rAjg3rA+=.r%S((rA*juq)&%-
rAaa4r&+F0rAOU5rA=I)r$;4AlN$hpr>bbSr>bbVr>#5Ar=Su<q%`iKr#,#@p_NZ?r=o2Gr=f)Dq%WcB
r=f,Qr#5M7qZ--dr!V]gr;j8*JcNC_r;lgDrA4C,r@\%'rB'p5rBC0?q(hn*r\4@+rA"7+n2'ksrAFO5
rA=F0rA=I2rAX[3r@Rpmr;l3ar"8lIr>PVSr>kkP!#>DCr=Su<q%`iKr#,#@p_NZ?r=o2Gr=f)Dq%WcB
r=f,Qr#5M7p]0pdr!V]gr;j/'JcNLbr;lgDrA4C,r@\%'rB'p5rBC0?q(hn*r%J+*r\=@,n2'ksrAFO5
rA=F0rA=I2rAX[3r@Rpmr;l3ar"8lIr>PVSr>khOrt,/@r=Su<q%`iKr#,#@p_NZ?r=o2Gr=f)Dq%WcB
r=f,Qr#5M7m/[.dr!V]gr;ibqJcNmmr>b_trA=I4rA4C,pc/(2q)@e$rAX(%q)Ik&q)814r&joqmf<:l
r"/fBr>>>Qp_ET9q%i`C`u"Ogr=Sr@r<r&or;um"r;c0aq#R;lr<3-#JcO:#r>b_trA=I4rA4C,pc/(2
q)@e$ni-;%q)Ik&q)814r&joqmf<:lr"/fBr>>>Qp_ET9q%irIq\dEjq&'&Br"K#:mf<:fqulQjpAk!i
V#^GsoDjIChZ3Tpr&jp7rAaa3rA"(,q)eC2n2BJh!''g7n2L/$rAsj=r>G&(r<W<4r>,>Kq&oGIq%3?;
p_iuGbSU'lr=Sr@r<r&or;um"kPtS`q>mDmr<2?bJcP'9r>b_trA=I4rA4C,pc/(2q)@e$kVr;srAX@-
q)814r&joqmf<:lr"/fBr>>>Qp_ET9q%i`CnJBdnq&'&Br"K#:mf<:fqul3`q#UEoW;ul"h>i--q#L?t
rB1!ArB's<rAX[1pcA46i&U!^ni?_1q)J=:r&aj7r<Durr<)g-r>Y\Qr?M7_p_`f?q&&lFq&&oFp)*B<
n/;$@r>#5Cr>PV:pAk-np]fp^q#U$dZiL%4r;kLMM?*PSr<E3_r'('@rAjg8rA+./q*!XrkW82n!''g7
rBC-@rAFNXpAk-op_*NEr>GPYr?(eOq%NQ@p_rrFq&/c@p)*9:q&B8Ir"ArHr<)cor;u`ukQ(DZmf9fs
r<rQ)e,Y:)r<E9as#g3CrB's<rAX[1pcA46i&U!^n2^;(rBC-@rAFNXpAk-op_*NEr>GPYr?(eOq%NQ@
p_rrFq&/B5n/;$@r>#5Cr>PV:pAk-np]fp^q#TOV_>sNBr;k"?P5tOcrB1!ArB's<rAX[1pcA46i&U!^
n2^;(rBC-@rAFTZrs&2tr<)g-r>Y\Qr?M7_p_`f?q&&lFq&&oFkSX"2q\f2Kr>#5Cr>PV:pAk-np]fp^
q#T.KblI\Mr;jV4ScJ]nrB1!ArB's<rAX^2!&F=1q*!XrkW82nq)J=:r&aj7r<E#s!!)s"p_*NEr>GPY
r?(eOq%NQ@p_rrFq&/B5n/;-CrYteNr"ArHr<)cor;u`ukQ(DZc2cJsr<rQ)ZN-s)r?hJ%r&OR9rB1$G
pcAI:qE"F8pcdn)nN?S.nN-V2r'('Dr?Ct9r<W?=ruD"Xq&TDHr>>#Bn/1[5kSiq0oc3oO!$;(Gr<Dur
r<&GfirJlVVuX1)r?hJ%r&OR9rB1$GpcJ:4rB:*Bpcdn)nN?S.nN-V2r'('Dr?Ct9r<W?=r#GMQr=]&G
n/Cd5nJUO/n/M$?r#YeDr<E9%q#L?qNWAJIq#[)e^B"3ZrAXX7q*"[=rBp?Aq)\=7qEFpCkWSGupcJ",
rB1!ArBL6)pAk-tr>>GPq&TDHr>>MPo,@*8nJUO/n/M$?r#YeDr<E0"quHZtMZE8Iq#Zub_>sN]rAXX7
q*"[=rBp?Aq)\=7pc\[@krnQ!pcJ",rB1!ArBL6)pAk-tr>>GPq&TDHr>>DMp)<E;nJUO/n/M$?r#YeD
r<Durr<*'"JcP]Kq#ZTWblI](rBU9HrAaa=rBgHJpc\F7q*+.0oKW.8n3-;(rB'p?rD!5TquQ]qr<iKG
r#u"Wr>tnRr>,/Jq&T8Ln/Lj8q&AfCq&T8Pr>YYTr=o2>pAk-ooDnOap]:0lV#^H#rrrE+KE0X)rB'sC
r'C9@rB:*GrBU-@q)eC9iBR?,q*+:2nN?b3r&t!QrBL2\quH[&r?2"]r>PVUr>5DJp`0)Mq&95Oo,I0;
q&AfCq&T8Pr>YYTr=o2>pAk-okl:\`p]:0lV#^H#r<;rrJcOg2rB'sCr'C9@rB:*GrBU-@q)eC9h`pp#
!'Tj8nN?b3r&t!QrBL2\quH[&r?2"]r>PVUr>5DJp`0)Mq&8iDrYt>Fq&AfCq&T8Pr>YYTr=o2>pAk-o
kQ(AY!!;uuV#^H#r<;QgJcP3=rB'sCr'C9@rB:*GrBU-@q)eC9h`pp#of`49nN?b3r&t!QrBL2\quH[&
r?2"]r>PVUr>5DJp`0)Mq&8`Aq&9#Hq&AfCq&T8Pr>YYTr=o2>pAk-okQ(AYq#^KpW;ul'r<;0\JcPcM
r"/furBC-ErBgHJrCd)Zpd+^?q*Nt+i^3B+rBC->rB^BKr"/c0r>#8Pr#kqZr>khUr>55Nq',VUh&Yc$
q&]>Rr?hFdr>khXr!)<ar;k^SJcLZ.r"/furBC-ErBgHJrCd)Zpd+^?q*Nt+ha70+rBC->rB^BKr"/c0
r>#8Pr#kqZr>khUr>55Nq',VUg)]Q$q&]>Rr?hFdr>khXr!)<ar;kUPJcLc1r"/fus$$HHr':3IrBU<S
rC?WKq*4[Aha?$_rBC->rB^BKr"/c0r>#8Pr#kqZr>khUr>55Nq',VUcQ2d$q&]>Rr?hFdr>khXr!)<a
r;k4EJcM/<r"/furBC-ErBgHJrCd)Zpd+^?q*Nt+fL#O#r&O^As$H`Pr"/c0r>#8Pr#kqZr>khUr>55N
q',VU`Z>(#q]>PTr?hFdr>khXr!)<ar;jh:JcMPGr#>T3rBU-IrBgHQr^[#[pdFpEq*b!InO<4Bq*j40
rBL3IrC-ZTr#5M>!!rNCr?;(br?D1]r>>JNp`]GY^)utjrZV4fr$qXfr?M4HquHZrU]>uHXoSA=rDEMY
pdY3KrC?fWpd>*KqEk!GpdXdBpdY'Ji'dN.r'UEOrC?c(r!<6@r?;1er[%Ler>tnSr>GARq'<ZrnKIiY
r@.dsr?2%`r!E9$r;i;dJcN=]r#>T3rBU-IrBgHQrCH]Oq*P$JrC$EMnO<4Bq*j40rBL3IrC-ZTr#5J=
r>bbZr$D:cr>tnSr>GARq'<ZrnKIiYr$qXfr?M=KrX&K&r;hoYJcN^hr#>T3rBU-IrBgHQrCH]Oq*OmF
qF:KSnO<4Bq*j40rBL3IrC-ZTr#5J=r>bbZr$D:cr>tnSr>GSXq]Yb\^)ukgr?qLmr?2%`r!E9$r;hfV
JcNgkr$))*rCd&\rD!5crC-ZTpdt9Sq*t-L!(c?Fi(<`:rDNPaq+U]0r"T)Vr>GMLr?(t\q'>h\p*&?=
p`]GUi$&%>r"f)Pr"A]'q>g<lPlUacquHNnNr[T.r$))*rCd&\rD!5crC-ZTpdt9Sq*t-Logn^Gi(<`:
rDNPaq+U]0r"T)Vr>GMLr?(t\q'>GQi$8"?q&nT=r>keOq',_Lmf<:er;i/`r<3#uqZ6]tKE0g.r$))*
rCd&\rD!5crC-ZTpdt9Sq*t-Ll:CqGi(<`:rDNPaq+U]0r"T)Vr>GMLr?(t\q'>GQp*8lJp`]GUi$&%>
r"f)Pr"AGuq#U<lS,iKjquHNnp],mGkQ(N)rB^BTr(?o^rD*;[rC?WSq+LNQpdaO=pds^Aq+CT`r(-WW
r#ttPr?hI\r"o;Rr?1n]n0.*Bp*9>Uq&nT=r>keOq',_Lmf<.amf96cr<3#uq#Tj_JcPBBr$VG6rD`Pf
rD!)[pe:KYq+CERkY(G>rD!2aq+UTYrDNPirD!5^r$hO[r@@ghr#GYYr?(h_pa#YZn0[rWq'=92r>keU
r?M7`r"o,.r;ultr;uouj8eNHhuW$Ar<3$#r;kaTJcPcMr$VG6rD`PfrD!)[pe:KYq+CERkY(G>peCWZ
s%N5_rDNPirD!5^r$hO[r@@ghr#GYYr?(h_pa#YZn0[rWq'>YYg*?P:r#GY[r?2"Sp]16oquQ`tr;kRO
pAj+PkQ(Paqucludf>7*r$VG6rD`PfrD!)[pe:KYq+CERkY(G>peCQX!)<;arDNPirD!5^r$hO[r@@gh
r#GYYr?(h_pa#YZn0[rWq'>PVh';k=r#GY[r?2"Sp]16oquQ`tr;kILq>fFSkQ(PaqucluciB%*r$VG6
s&B"tpeUi_q+CEUq+g`Xpds[BnP&^Pq+UTYrDNPirD!5^r$hO[r@@ghr#GYYr?(h_pa#YZn0[rWq'>/K
kTg$Hr#GY[r?2"Sp]16oquQ`tr;k4Er;ks[kQ(Paquclu`;l8*r$VG6rD`PfrD!)[pe:KYq+CERkY(G>
peCQXq+^fcr)!>ds%35^r$hO[r@@ghr#GYYr?(h_pa#YZn0[rWq'=c@o-=2Sr#GY[r?2"Sp]16oquQ`t
r;k4EncA1[kQ(Paquclu\cAK*r$VGArCZu\rD<G`rE9+t!)iSfq,$lapeCQaq,-o^q+^Z^pf$ucq+gl]
r'^KZrCQo6r=K#Ar?_Cjr$hRlr?(t`r?(MTq'5Yaq&T8Un0e#Up`TAWr$_Omr@e'ur@Rsqr"Ac)r;lZp
r;cWohZ3HQkPtS`nH"dQXoSAIrDWYer(HubrCHlirDNDd!)WMgq,-o]q,R5fpeLWZq,-ocq,-r_rCd&V
rD3A`r$M=Rr?_Cjs!dprr?qOcr?V=`n0RlTpaZ([q'5AVq',SVq'5\`r@e+!!%Rq!r?qLUp]16np]CBo
q#T@Qq#T[Zo`=skLB+jbr$VGArCZu\rD<G`rE9(speU]^rDEMjpeCQaq,-o^q+^Z^pf$ucq+gl]r'^KZ
rCQo6r"8lRr@%Rmr?qOcr?V=`n0RlTpaZ([q'5AVq',SVq'5\`r@e'ur@Rsqrt>;Dp]16np]CBoq#T@Q
q#T[Zn,`CdJcN^hr$VGArCZu\rD<G`rE9(speU]^q,-u_s%W;hq,-o^q+^Z^pf$ucq+gl]r'^KZrCQo6
r"8lRr@%Rmr?qOcr?V=`r[%.^q'5Yaq&T8Un0e#Up`TAWq'c1pr$qXsr?qLUp]16np]CBoq#T@Qq#T[Z
n,`:aJcNgkr#kr5rD!2erD*;irD`_qpegibq,I,b!*8qsq,?cYq,6ufq,@)crCQo`rC[#cr#bhHr?2%h
r%7jnr@.[gr?D+dp*]Y]pac.^q'GMZq'>_Zq'Ghcr@Ik$r@.[ur"&Q&rrW3%quls!r<2oshZ3HQkQ()Q
m/V_<dK'1frD*;cr)*DfrDWYorDiViq,7#fpeU]drDWYnn5&jXpf7,gq,%#]r)!>arDEJ7r!rZJr@@dt
r?_Ckr?;+`n0e#Wpac.^q'GMZq'>_Zq'Ghcr@Ik$r@.[ur"&Q&r;um"r;lj"q#T@Qq#T[Zn,_MKJcOU,
r#kr5rD!2erD*;irD`_qpegibq,I,bq,[;iqG6i]q,6ufq,@)crCQo`rC[#cr#bhHr?2%hr%7jnr@.[g
r?C_Yq'>qiq^_Iaq'GMZq'>_Zq'Ghcr@Ik$r@.[ur"&Q&r;um"r;lj"q>gQshZ3HQkQ()Qf)UC&kQ(N'
rD*;cr)*DfrDWYorDiViq,7#fpeU]dq,?cY!)iYkpf7,gq,%#]r)!>arDEJ7r!rZJr@@dtr?_Ckr?;+`
n0e#Wpac7arZCq^n1"/Yp`fM[q'l7nr%\.!r@e'Zp]16oquls!r<2ospAjFXq#T[Zn,^`5JcPBBr"8m&
rDWVnrE9)$q,I,dnQ,Eaq,[;kpf.&eq,%#fr)3>iq,[Gsr)`htrD<D)r!iTfr?M(_r?D%jpal4eq'Yqe
q'Ytfpakqgpal4jq'c1er$)(lr@.XQec>LJr;cHiq#SM9p]9(KJcPcMr"8m&rDWVnrE9)$q,I,dnQ,Ea
q,[;kpf.&eq,$iaqc*Spq,[Gsr)`htrD<D)r!iTfr?M(_r?D%jpal4eq'Yqeq'YtfpalFuo.Tkiq'u1g
r?V:br@\$tr!_-Vq#g0frrDiq`rPl8cN&h&r"8m&rDWVnrE9)$q,I,dnQ,Eaq,[;kpf.&eq,$iaq,@>p
qH!Ptr)`htrD<D)r!iTfr?M(_r?D%jpal4eq'Yqeq'Ytfpal=rp+Q1lq'u1gr?V:br@\$tr!_-Vq#g*d
!!2os`rPl8bQ*V&r"8m&s&8qrr)EVtrE/kppegQ^pf.&iq,R2hq,7#bpepoeq,[Gsr)`htrD<D)r!iTf
r?M(_r?D%jpal4eq'Yqeq'Ytfpakqgpal4jq'c1er$)(lr@.XQec>LJn,W7br;b"@p]822QiR$brC-Zj
r*oV+rET;"rDE>iq,mGqpfR>pq,mDnnPo9`q,dAprEK2)rE0(os%W4grAOU(r%7jjr?qOrr@RdtnL=5`
q'c%hpb)(jpb2Xtq^_Ikr?V:gr@n1!quQEiquQ!]q$$6fq#^*eec>II[K*'&quQabrE]>1rE&r&rDW\m
!)`Mkq,mGqpfR>pq,mDnnPo9`q,dAprEK2)rE0"mp]1?qrAOU(r%7jjr?qOrr@RdtnL=5`q'c%hpb)(j
pb2Fnr$hUor?V:gr@n1!quQEiquQ!]q$$6fq#]^Zi;iWTWrT:&quQabrE]>1rE&r&rDWYlpf.;rqH3Pr
pfR>pq,mDnnPo9`q,dAprEK2)rE0"mpAt4Nr@7h!r[n'lr?qOrr@RdtnL=5`q'c%hpb)(jpb2Fnq'l7f
r?hRmr@n1!quQEiquQ!]q$$6fq#]=Oli?e_TE)M&quQabrE]>1rE&r&rDWYlpf7,lrE9)%pfR>pq,mDn
nPo9`q,dAprEK2)rE0"mpAt4Nr@7^sr?;+er@\%#pb2.dpac.gq()4mnM'_kq()7ir?V:gr@n1!rrN*"
oDndikQ(D^n,W7cd/`n@p]Hc]^B"3apf%,nrE&r"rET,(q,dAkqHs80q,R5mpfdJuq-3Vsq,dAmrET8-
rD3ACpAk.,r@\""rAaa7r@Rt%r[I^nq(VV"pa5enq(VRpnLOAenM'njr$qXor>>G4quH[(f)YUI]`@R&
q$*8f_>sNdpf%,nrE&r"rET,(q,dAkpg4#$qGm>npfdJuq-3Vsq,dAmrET8-rD3ACpAk.,r@\""rAaa7
r@Rt%q^MLnq(VV"pa5enq(VRpnLOAenM'njr$qXor>>8/r=&]+f`:gKZ2je&q$)l[blI\opf%,nrE&r"
rET,(q,dAkpg<hsrE0##pfdJuq-3Vsq,dAmrET8-rD3ACpAk.,r@\""rAaa7r@Rt%paQ"mq(h^lq)%n$
pakqcpb)(jr@.Xor@.[^pAk.#oDmqPq#RStqZd')KE0X)r@ReCrE0#"rE0#'pg3btq,I,rq,R5mqHEo&
q-<`"pf[Doq,[H!r*TCur@I[Cr>#8`r%7k,rAX[,r@n!qq(VV"r[.Lhq)%n$pakqcpb)(jr@.Xor@.[^
pAk.#klC/Pq#RStq$-ToJcOg2r=&X-r*B8$rE9)*rEK&(q,mGopgNu"q-!Jtq-F&,qH`l"q-!MprF,V3
rE&q+pAk-rrA44+rAjg3r@dpsnM9kdr&+I2q(h^sq()7mpb;M!q(qt#r$qY"r<N&sr<1sWq>g<m[K-('
r<rQ*m/V_<mK!1orE9&(rDif!rEfG,pg<i!q,d?"q,dAppg!W$q-Er&r*&o!q,dN'r*]J)r=&E#r<E3V
pbi"1rA+=)pakqjpa5eoq(h^sq()7mpb;M!q(qt#r$qY"r<N&sr<1^Pr;up![K-('r<rQ*iW+Q1q#L@%
rE9&(rDif!rEfG,pg<i!q,d?"q,dAppg!W$q-Ec!qcWr%q,dN'r*]J)r=&E#r<E3Vpbi"1rA+=)pakqj
pa5eoq(h^ss"!ssq(;@qq(hb%r@IjrrA"6UpAk-pf)YUJq>e2/p]:=$r;tRNM?*PSr=&X-r*B8$rE9)*
rEK&(q,mGopgNu"q-!Jtq-Nl&pfdJr!*B"urF,V3rE&q+pAk-rrA44+rAjg3r@dpsnM9kdq).t'pauCo
r[[drpb;M!q(qt#r$qY"r<N&sr<1^Pq#^9j^]=-1r<rQ*e,Y:)r=&^/s&o8*rDif!rEfG,pg<i!q,d?"
q,dAppg!W$q-Ec!q-!MprF,V3rE&q+pAk-rrA44+rAjg3r@dpsnM9kdq).t'pau:lq(;@qq(hb%r@Ijr
rA"6UpAk-pf)YUJli>3/p]:=$r;t(@Nr],.pg3o)rFPq5pga,/q-`u)q-Ef(n6u-"pg3c(q-s;'r*TCP
rrDQhr>5AhrA=I/rA!poq(2=on2'kmpal4nq(h_$s"F7&q(2Iur&=QllN$hbhuNQRn,W7bq>f@Pq#U6j
r<Kn6RK3:9pg3o)rFPt6!+#A0q-s/-pg<i&q-`]#q-Wo'q-a#-rDri'r@7F>quH[3r&+F0rA4C,oIBYf
q(D.mq(DFnq(DIupbV_!r%.gur@n..r>Fo$qubjWq#Tsbq#TpaklCM[p]16tY5kC!r@7SKrE]A5rE]2.
!+Pe6q-`u)q-Ef(n6u-"pg3c(q-s;'r*TCPmf<;&s#'d5rA=I/rA!poq(2=on2'kmpal4nq(h_$q(MOp
r@n1/!&siolN$hbhuNQRn,W7bj8efPq#U6jr<K+uYQ4VOpg3o)rFPq5pga,/rF#S3pg<i&q-`]#q-Wo'
q-a#-rDri'r@779r>5AhrA=I/rA!poq(2=on2'kmpal4nq(h_$q(MOpr@n..r>GJ4nGrIhhuNQRn,W7b
f`;$Pq#U6jr<J_j])_d1r(ZinrFu%>q.BG4qI9J6q-a#.n7D)uq.0;5rFPn#r;l?er;lgHq)81(rA=L*
q^qUsq(_Y&q)%n%pb2Ftq).q*q(hb!rB1!/r;lZnoDndjkQ(,Rp]0LYkQ(DZ!!;uuM#b6ir;lgjoj[l6
ph0D7q.'2/!+>Y2q.&o*n7)3(q.BS:r(R%imf<:er%%S$r@\%*q^qe!q(MOupbqq)q(_Xtq(_\&pbqq'
q(M\/r%.dIm/[.dquZ'^nH&CbkQ0lIq#U9mr;_ELaT28?r(ZinrFu%>q.BG4pgX&,rF>e9n7D)uq.0;5
rFPn#r;l?er;lgHq)81(rA=:$q(MOupbqq)q(_Xtq(_\&pbqq'q(M\/r%.dIlN$har;c0anH&CbkQ0lI
q#U9mnc47Ae,]FJr(ZinrFu%>q.BG4pgX&,q.'84pLWi'q.0;5rFPn#r;l?er;lgHq)81(rA=:$q(MOu
r\jX3q)%n%pb2Ftq).q*q(hb!rB1!/r;l3aquZEhpAj^ap]0LYkQ(DZq#]^ZJcOO*r!NC,rFPq?rG;FH
r+kt=rF5_>oOmu6phKV:!+5_4rFGk7oO[i8rDib)k5bDarA+=1r@Rt%r@e(&q(qt,rA"($r&"C0q(_Xu
q)/+1rB's<r&jd1r@\%#rA4?Wk5bD^nGrLiqud!"nc8UjquXV5r=&T*k5bM`rW7cRjoG;drEK53rFc(F
rFu1Fok=;5rFtn:q.]V=q.BS4rFGk7oO[i8rDib)k5bDarA+=1r@Rt%r@e(&q(qt,rA"($q)%n%pb;M$
rAaa;rAjd<q(hn$r@Rt(r!;HcqucHhr<)s#o`4pjr<)s!^B"3@quZ$]quZZoJcP<@r!NC,rFPq?rG;FH
r+kt=rF5_>oOmu6phKV:rEoM6rF#>1s(2"CrDib)k5bDarA+=1r@Rt%r@e(&q(qt,rA"($q)%n%pb;_*
q_e=3rB's<r&jd1r@\%#rA4?Wk5bD^nGrLiqulNir<*$#rrTq8r=&T*k5bD]mJr+EoDndrrEK53rFc(F
rFu1Fok=;5rFtn:q.]V=q.BS4rFGk7oOS#>qJH12r!hfhr!**TrAX[,r@n1'r%Rq&rAFO.pb;M#q(_Xu
r&+I2rAaa;rAjd<q(hn$r@Rt(r!;HcqucHhr<)s#nGrLiquQiu^]=<AquZ$]quZ0aJcPWIr=Aj1rGMRQ
rG;CIrG):Hq/-(Kr+YtAn8/&;rG):FrFGk>r+,bDrGDLQrF#R6h#RB[r@n1,rA4C,r%Rq(q)SC2r%Rq*
q)%k%rAX[7rBU<DrBC-@q)SC-r@.[OblIMAnGrLkqucTlb5hJC]E!Zdr=Aj1rGMRQrG;CIrG):Hq/-(K
r+YtAn8/&;rG):FrFGk>r+,bDrGDLQrF#R6p&O:Vr<`EVrA=I/rA"4(q).t.rAFL,q)A++pbMe,rAaa@
rB1$Br&ap=q`4U/r@.[OblIMAnGrLkquc3aec>XNYlKmdr=Aj1rGMUR!-%mQr+l7GrG24GrGVUJq.fD8
rFu4FrFu4@rFc%=rGMRNrGhdDr=8,no)S^qr@n1,rA4C,r%Rq(q)SC2r%Rq*q)%k%rAX[7rBU<DrBC-@
q)SC-!%Imrr<^^Kp]U*er<<*$hZ2U8r<&nsS,iKurEB/;rG_^Or+c:IrbDCIq/-(Kr+YtAn8/&;rG):F
rFGk>r+,bDrGDLQrF#R6huN`Vr<`EVrA=I/rA"4(q).t.rAFL,q)A++pbMe,rAaa@rB1$Br&a^7r@n1!
r<`E&d/`qEnGrLkqubFKli?tdRfK2`r<`F$rFc(Ir+u=LrG2@OrG):Dr+Z+HrGMFIphThFrGVXNrH%pV
r+Q%CrFl.%r=%3Vr<E3TrB:*Ar&Xd:rAFO8rAOU<r'1-Aof`76r&a^6rA+=3rAsj4q*4g7r<_llkQ(P_
T)elkr<3'"eH#ON]E#)7r<`F$rFc(Ir+u=LrG2@OrG):Drb;CHrGDLNq/#hArGDLOrG;FRrG_[JrFu4D
rC["seH#OPrA"76r]C0Cr&Xd:rAFO8rAOU<r'1-Aof`76r&a^6rA+=3rAsj4q*4g7r<_cilN$kbSH&Wm
rWN0#eH#ON\H&l7r<`F$rFc(Ir+u=LrG2@OrG):Dr+Q.Jrb_UOq/#hArGDLOrG;FRrG_[JrFu4DrC["s
eH#OPrA"76rB1*@r]:!<rAFO8rAOU<r'1-Aof`76r&a^6rA+=3rAsj4q*4g7r<_B^p&P$mSH/Tkr;lis
f`:sRXoQ*7r<`F$rFc(Ir+u=LrG2@OrG):Dr+Z+HrGMRMrG;7ErGDLOrG;FRrG_[JrFu4DrC["seH#OP
rA"76rB1!=rAjg6rB's9rBC-DrB'[8rAjd;q)J=.rAjg;r%n.5rA=HZeH#OLSH/Tkr;lHhj8f,]UB&13
r;ljQrFl+Jq/uXPrH%pSr+l7LrG_^RrGDCIs(qLMrH8'[rGDIXrG2?cr;k.Cr;lj<rAX@3rAX[;r^$TO
r'C9DrB:*DrBC!=rAjg<rAjg9rAXX@rB^B%r;jn<JcLB&c2deDrA4Ccr,DISrG;FRrGDIJrGVXRrGVXO
ph]bF!-S9`rH%pSr-A6Vr@n0NblI\Cr>tnroKE.3rB1$Fr'C9D!'U<ErBL6EpcSL8rB's<rAaa7r'L?J
r>bb:])[E_JcOI(r;ljQrFl+Jq/uXPrH%pSr+l7LrG_^RrGD=Gq/H:TrH%pSr-A6Vr@n0NblI\Cr>tnr
oKE.3rB1$Fr'C9DrB:*DrBC!=rAjg<rAjg9rAXX@rB^B%r;j,&JcLB&j8f,ZrA4Ccr,DISrG;FRrGDIJ
rGVXRrGVXOph]bFrH8'[rGDIXrG2Ees"OBPblI\Cr>tnroKE.3rB1$Fr'C9DrB:*DrBC!=s#L*>rB's<
rAaa7r'L?Jr>bb:V#Z)IM?)f>r;ljQrFl+Jq/uXPrH%pSr+l7LrG_^RrGD=Gq/H:TrH%pSr-A6Vr@e3P
rW17Dr;lj<rAX@3rAX[;rBgEJrB1$ArBL6EpcSL8!'C0ArAjg9rAXX@rB^B%r;iVmJcLB&l2^bmr&O^m
rGhdTrGVXLr+>nJrH/!XrG_OLrGhdTq/cLRr'C8hnGpf6r<W<ErAaa<rBC0CrCZuXrAsm=rB^BIpd4pE
rBL6CrAsm?r$)(E]`A!7r"Rodj8f,`quZg!]`A!5r!<)u^&\*8aT1u6r=8`crGDLQrG_^RrG)7BrGqjY
rGhdTphp%MrG_RRrG_[#r<q`ffDtjUr#u"urB1$BrB:*Or($]HrB'sDrBU-ErBU<GrB1$>rB:'&rs/Q/
]`A!7r"RNYmf<:kquZg!]`A!5r!;]jaT28C^&S-5r=8`crGDLQrG_^RrG)7BrGqjYrGhdTphp%MrG_RR
rG_[#r<q?[irK#`r#u"urB1$BrB:*Or($]HrB'sDrBU-ErBU<GrB1$>rB:'&r<N)t`W5r@r"R-Nq>gI!
quZg!]`A!5r!;<_e,]FN]`A!@r&Faorb_URrG_^RrG)7BrGqjYrGhdTphp%MrG_RRrG_[#r<psPmK!1k
r#u"urB1$BrB:*Or($]HrB'sDrBU-ErBU<GrB1$>rB:'&r<M]id/a+Kr"QmGr<N6%r<'_5r<)s'fDse/
r<9P.r<iK_rEB/@rG2=MrHA-`q/lRTr,_gZrGMR;rAsl`]E%F$r<<-ArA4C<rCd&brBC0Eq*Y*Lr($]Q
rBC04r?(tAf`6U(JcM2=r<iK_rEB/@rG2COs)@p[rHJ'ZrGhaVrH8'VrEB.\r<]_/qZ-Qur?(torB^BT
r)!>UrBL*FrC-WSrBpNIr@\$jr<:aPJcLB&S,iKprAaaZrH%pQr,;XZrc\6aq/lRTr,_gZrGMR;rAsl`
XoSG$r<<-ArA4C<rCd&brBC0Eq*Y*Lr($]QrBC04r?(tAb5d+oJcM\Kr<iK_rEB/@rG2=MrHA-`rH/![
rGhaVrH8'VrEB.\r<]M)r<<-ArA4C<rCd&brBC0Eq*Y*Lr($]QrBC04r?(tA^]8rdJcMYJr<3'Cr%n:6
rC?f`rCHlNr\XX3r?(t@P5tO_rXJo<r"]/Rr?qOnr?V=ar#>SHr;rqulN$kap]16nli?td_>o/fYlO_*
r?D.qrB1$KrDEMarBC-9r?(t@!!&5`r;up-r"]/R!%7anr@7akr?2"Wr=Su0ScJHar;lZnr;l6br<'M/
JcNF`r<3'Cr%n:6rC?f`rCHlNr&"?or<2cnT)efkr=8`?r?;+er@7akr?2"Wr=Su0P5tO^p]16nli?td
X8mhP`rQ&@r?D.qrB1$KrDEMarBC-9r?(t@l2[gar;up-r"]/Rr?qOnr?V=ar#>YJrt522P5tO^q>gNq
r;l6br<&_nM?(d!r<3'Cr%n:6rC?f`rCHlNr&"?or<29`XT8;$r=8`?r?;+er@7akr?2"Wr=K#2rW88`
r;lZn!!3'"li?tdScF`MJ,~>

%%EndBinary
grestore
np
1 lw
1251.6 351.5 mo
1251.6 359.878 1243.5 366.67 1233.5 366.67 cv
1223.5 366.67 1215.4 359.878 1215.4 351.5 cv
1215.4 343.122 1223.5 336.33 1233.5 336.33 cv
1243.5 336.33 1251.6 343.122 1251.6 351.5 cv
cp
.635492 .400641 .0580453 0 cmyk
@
1173 410 mo
1136 410 li
1136 379 li
1173 379 li
1173 410 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 588 ]ct
[37.4805 0 0 31.4806 1135.76 177.76 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 156 
/H 131 
/M[156 0 0 -131 0 131 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 156 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 156 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 156 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 156 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
aoMA@r<W<2r=SuAr>,>Gr=Sr:r<W?&k5_I]r;um#q$-X"r<E0'r<!$"JcLB&JcO=$r;lj&r!rZ;r=f,F
r=o2Br!iT1r;k[RZiL%+quum#q$6j&r!!$$o`0RDJcLB&huN]Vr<W<2r=SuAr>,>Gr=Sr:r<W?&d/^o]
r;um#q$-X"r<E0'r<)<bJcLB&JcP*:r;lj&r!rZ;r=f,Fr=o2Br!iT1r;jn<aoMAAquum#q$6j&r!!$$
hZ/6.JcLB&p&P$lr<W<2r=SuAr>,>Gr=Sr:r<W?&])^@]r;um#q$-X"r<E0'r<(OLJcLB&NWB"[r=8cC
r>kh]r$:eWr?V:cr?;+\r>5DAr;sV3n,WCfr<E3/r=8c8r!qWor<rQ.r;kROcN*nFcN*nFr;ccsp&K[E
R/m0fr=8cCr>kh]rZqLhnK[uXr$2.`r>tnRr=/],YlOY$r;lj$r=&W7r=/Z7i!oVmr<E3$ec=+ur;t:F
r;uotr;lKiJcM;@r<*!.r>>JRr?M4c!$h%Zr?V:cr?;+\r>5DAr;s,%rW)ltr<E3/r=8c8r!qWor<rQ.
r;k(Ah#RBTcN*nFr;ccskQ$27VZ?Ytr=8cCr>kh]r$:q[r?M7dr$2.`r>tnRr=/],WrW)!r<E3/r=8c8
r!qWor<rQ.r;j\6kQ(P_cN*nFr;ccsh#N$,])_d4r##AOr?hIhr?hIgr#tk\q'>e_s!@Ujr?V=hr?_Cd
r"o;7]`A!4r!WH4r>#8@r=Al=!"f&:q%*E5r=AN1q%*E6r=/Z3r;s\5quHWsr;ccscN*nEr;cTor;kXQ
JcNdjr<3$8r>Y\^r?_Chr?V:aq'5\\pa,kcr?M@jr[7Xjr?D.Ur<0e6r;um)r=/]?r=8c:r=Jl8r"&c;
r=/]9oFC[-r=8c8r!NB(\H)O0!!)uur;k4Er;lisp]CBpciAXtd/a+Jr##AOr?hIhr?hIgr#tk\q'>_]
r?hIgr?qOir?D.Ur<0e6r;um)r=/]?r=8c:r=Jl8q%*E5r=AN1q%*E6r=/Z3r;sM0qucltr;lisdfB=I
r;cTor;jk;JcOR+r<3$8r>Y\^r?_Chr?V:aq'5\\pa,kcr?V=hr?_Cdr"o;7rrBe6r;um)r=/]?r=8c:
r=Jl8q%*E5r=AT3rsni8r=8c8r!NB(\H)O0r;ccsnc7MHr;lisp]CBp\c@TfirK#mpa#ecr?D1er@%:c
r?_7dpa>kcr@.[lr?M4ir?2%K!!("=r<N94r"8lCr=\o:r=\l:r=SN1r"&c;r=Si8r"Ar=r<C4@r<N9'
quZZpmf;;Hr;uour;u`ur;sS2JcP3=r>#)Qr?qOfr?hIkoI'S`q'Pkaq'c1jr?hIfr$qXfr=8K#d/a+M
r=Jl=r>,>Eq%*E:p^mB9n.>C+r=Su<r=8`<r=Ai2`;oiAr<)s!q#TOVli?tcr;liup]gZuYQ07Tq#L@.
pa#ecr?D1er@%:cr?_7dpa>kcr@.[lr?M4ir?2%Kl2]T>r<N94r"8lCr=\o:r=\l:r=SN1q%*E9q%!<8
rt#,?r<C4@r<N9'quZZpf`:aHr;uour;u`ur;reqK`M)e!#>8Sr?qOfr?hIkoI'S`q'Pkaq'c1jr?hIf
r$qXfr=7]bk5bGcr=Jl=r>,>Eq%*E:p^mB9n.>C+r=Si8r"Ar=r<E0"aoMAFr<)s!q#SeA!!<-$r;liu
p]gZuRK/ELr>#)Q!%7anr?D1er@%:cr?_7dpa>kcr@.[lr?M4ir?2%Ke,]%>r<N94r"8lCr=\o:r=\l:
r=SN1q%*E9q%!<8r=Ai2nGq)>r<N9'quZZpcN*nFr;liup]gZuNrYpTr<<-Er@@h#r$M@mr@Imsr@Imp
r%.dqod]_eq(;Orr@7atr%Rpur?2%CeH#OMr<`E0r=Sr5r=]&Bq%3K<r"f5Fr=eu>r=Sr?r=Jo>r=Ai:
r=Af<q%3K2r;uBeL]I;QrrIcQXoSD(r?M7kr@n-rr@@gtr@7asr?qRqs"+*tod]_eq(;Orr@7atr%Rpu
r?2%CeH#OMr<`E0rXf,Br!<66r=eu<r=f)Er=o2Dq%EW<r"Ar>r=Su=r=8c:r"8`9r<`E(lMuhCq#LHq
JcN%Ur<<-Er@@h#r$M@mr@Imsr@Impr%%gsr[ILipac.lr@Imsr@Rq$q(;Ofr<CdPr<*!)r<iK8rs8T0
r=]&Bq%3K<r"f5Fr=eu>r=Sr?r=Jo>r=Ai:r=Af<q%3K2r;tmWQ2p^]o`0RD]E%m6r?M7kr@n-rr@@gt
r@7asr?qLor@.Olr@7Rmq(;Orr@7atr%Rpur?2%CeH#OMr<`E0r=Sr5r=]&Bq%3K<r"f5Fr=eu>r=Sr?
r=Jo>r=Ai:r=Af<q%3K2r;tLLT`Flhl2ZD9b5hJEr?;+krAaa0r&=R-r@@h"r@m^kr@Rt!qCV_!r@[n!
rA4C+r$hRrr@e+'r?hIHh#RBVr>>J@r=f,Ar"]/Er=]&Cr=f/H!#P,>r=nl:q%<Q>r=]#;r=A]:r<rQ,
f`:sPr;cft!!02%o`>!kr;l3aJcO@%r<<-Cr@Rt-r@n..r@e+"r@e+'n14Ghr@I^qr@\"$r\+4+r@n-u
r@Rt$r@n0sr<;!Wr<3'9r<rQ;r=SrBr=o2Cr=o2Dr>52CqA&rCoFgs3r=o2Cr!iT8q%EW6r<1dRr;uot
r;lWm[fH(%r;ccshuJ?/i;if[r?;+krAaa0r&=R-r@@h"r@m^kr@Rt!pauFsq(M\&r@n-ur@Rt$r@n0s
r<;!Wr<3'9r<rQ;r=SrBr=o2Cr=o2Dr>4r<r=nl:q%<Q>r=]#;r=A]:r<rQ,f`:sPr;ccsli=m&o`>!k
r;kFKJcP-;r<<-Cr@Rt-r@n..r@e+"r@e+'n14Ghr@I^qr@[n!rA4C+r$hRrs"FC*r@n0sr<;!Wr<3'9
r<rQ;r=SrBr=o2Cr=o2Dr>4r<r=nr<rt>,>r=o2Cr!iT8q%EW6r<1dRr;uotr;kjWblID;r;ccsaoI;!
oDndnr?_Cnr@e+!rA"4*rAOU3rA4C*r@Rq"r@dLkq(_h'rA"7-r%e40rA"@,r\4:/r?M4Dk5bD^r=]&E
r>bbQp^d<3r<rQ>r=erBq%`iBr>"o;rY,5Cr=Jo@r"ArCr=]&?r=o2Jquc*^quP(CJcLB&rrDs$r?_Cn
r@e+!rA"4*rAOU3rA4C*r@Rq"r@dLkq(_h'rA"7-r%e40rA+=*rAOU!quu6`qucm1r>,>Or>>;?r=&W4
r>,>Fp_W`@r=o2Fn.Ya5r=Jo@r"ArCr=]&?r=o2Jquc*^quO\8JcL]/r!**Gr@In#r@7b#r%e4/rAFO0
r@e+$r%@q$lnJ5irA+=+rA=F-rAX[1r@n1.r?M4DqZ-!`qucm1r>,>Or>>;?r=&W4r>,>Fp_W`@r=o2F
n.Ya5r=Jo@r"B#ErtYJFr=JoAr>GM8k5bD\\,_*\Q2pger?_Cnr@e."!%Rq%r%e4/rAFO0r@e+$r%@q$
lnJ5irA+=+rA=F-rAX[1r@n1.r?M4Dn,W4`qucm1r>,>Or>>;?r=&W4r>,>Fp_W`@r=o2Fn.Ya5r=Jo@
r"ArCr=]&?!#5DHr>GM8k5bD\XT3qQV#^Gpr$VG!rA"7'rA"74r%e=:r]^9@q(hn*r%S((rA*juq)&%-
rAaa4r&+F0rAOU5rA=I)r$;4AlN$qsrXo)Kr>PVSr>khOr"/f=r=8W<r>keRnJCs9q%`iBr>,>Fr"]#A
r>#8Er?;+X!#ke:lN$hjkQ(P^^AricYQ4V&r$VG!rA"7'rA"74r%n:8rAjg3rA+=.r%S((rA*juq)&%-
rAaa4r&+F0rAOU5rA=I)r$;4AlN$hpr>bbSr>bbVr>#5Ar=Su<q%`iKr#,#@p_NZ?r=o2Gr=f)Dq%WcB
r=f,Qr#5M7qZ--dr!V]gr;j8*JcNC_r;lgDrA4C,r@\%'rB'p5rBC0?q(hn*r\4@+rA"7+n2'ksrAFO5
rA=F0rA=I2rAX[3r@Rpmr;l3ar"8lIr>PVSr>kkP!#>DCr=Su<q%`iKr#,#@p_NZ?r=o2Gr=f)Dq%WcB
r=f,Qr#5M7p]0pdr!V]gr;j/'JcNLbr;lgDrA4C,r@\%'rB'p5rBC0?q(hn*r%J+*r\=@,n2'ksrAFO5
rA=F0rA=I2rAX[3r@Rpmr;l3ar"8lIr>PVSr>khOrt,/@r=Su<q%`iKr#,#@p_NZ?r=o2Gr=f)Dq%WcB
r=f,Qr#5M7m/[.dr!V]gr;ibqJcNmmr>b_trA=I4rA4C,pc/(2q)@e$rAX(%q)Ik&q)814r&joqmf<:l
r"/fBr>>>Qp_ET9q%i`C`u"Ogr=Sr@r<r&or;um"r;c0aq#R;lr<3-#JcO:#r>b_trA=I4rA4C,pc/(2
q)@e$ni-;%q)Ik&q)814r&joqmf<:lr"/fBr>>>Qp_ET9q%irIq\dEjq&'&Br"K#:mf<:fqulQjpAk!i
V#^GsoDjIChZ3Tpr&jp7rAaa3rA"(,q)eC2n2BJh!''g7n2L/$rAsj=r>G&(r<W<4r>,>Kq&oGIq%3?;
p_iuGbSU'lr=Sr@r<r&or;um"kPtS`q>mDmr<2?bJcP'9r>b_trA=I4rA4C,pc/(2q)@e$kVr;srAX@-
q)814r&joqmf<:lr"/fBr>>>Qp_ET9q%i`CnJBdnq&'&Br"K#:mf<:fqul3`q#UEoW;ul"h>i--q#L?t
rB1!ArB's<rAX[1pcA46i&U!^ni?_1q)J=:r&aj7r<Durr<)g-r>Y\Qr?M7_p_`f?q&&lFq&&oFp)*B<
n/;$@r>#5Cr>PV:pAk-np]fp^q#U$dZiL%4r;kLMM?*PSr<E3_r'('@rAjg8rA+./q*!XrkW82n!''g7
rBC-@rAFNXpAk-op_*NEr>GPYr?(eOq%NQ@p_rrFq&/c@p)*9:q&B8Ir"ArHr<)cor;u`ukQ(DZmf9fs
r<rQ)e,Y:)r<E9as#g3CrB's<rAX[1pcA46i&U!^n2^;(rBC-@rAFNXpAk-op_*NEr>GPYr?(eOq%NQ@
p_rrFq&/B5n/;$@r>#5Cr>PV:pAk-np]fp^q#TOV_>sNBr;k"?P5tOcrB1!ArB's<rAX[1pcA46i&U!^
n2^;(rBC-@rAFTZrs&2tr<)g-r>Y\Qr?M7_p_`f?q&&lFq&&oFkSX"2q\f2Kr>#5Cr>PV:pAk-np]fp^
q#T.KblI\Mr;jV4ScJ]nrB1!ArB's<rAX^2!&F=1q*!XrkW82nq)J=:r&aj7r<E#s!!)s"p_*NEr>GPY
r?(eOq%NQ@p_rrFq&/B5n/;-CrYteNr"ArHr<)cor;u`ukQ(DZc2cJsr<rQ)ZN-s)r?hJ%r&OR9rB1$G
pcAI:qE"F8pcdn)nN?S.nN-V2r'('Dr?Ct9r<W?=ruD"Xq&TDHr>>#Bn/1[5kSiq0oc3oO!$;(Gr<Dur
r<&GfirJlVVuX1)r?hJ%r&OR9rB1$GpcJ:4rB:*Bpcdn)nN?S.nN-V2r'('Dr?Ct9r<W?=r#GMQr=]&G
n/Cd5nJUO/n/M$?r#YeDr<E9%q#L?qNWAJIq#[)e^B"3ZrAXX7q*"[=rBp?Aq)\=7qEFpCkWSGupcJ",
rB1!ArBL6)pAk-tr>>GPq&TDHr>>MPo,@*8nJUO/n/M$?r#YeDr<E0"quHZtMZE8Iq#Zub_>sN]rAXX7
q*"[=rBp?Aq)\=7pc\[@krnQ!pcJ",rB1!ArBL6)pAk-tr>>GPq&TDHr>>DMp)<E;nJUO/n/M$?r#YeD
r<Durr<*'"JcP]Kq#ZTWblI](rBU9HrAaa=rBgHJpc\F7q*+.0oKW.8n3-;(rB'p?rD!5TquQ]qr<iKG
r#u"Wr>tnRr>,/Jq&T8Ln/Lj8q&AfCq&T8Pr>YYTr=o2>pAk-ooDnOap]:0lV#^H#rrrE+KE0X)rB'sC
r'C9@rB:*GrBU-@q)eC9iBR?,q*+:2nN?b3r&t!QrBL2\quH[&r?2"]r>PVUr>5DJp`0)Mq&95Oo,I0;
q&AfCq&T8Pr>YYTr=o2>pAk-okl:\`p]:0lV#^H#r<;rrJcOg2rB'sCr'C9@rB:*GrBU-@q)eC9h`pp#
!'Tj8nN?b3r&t!QrBL2\quH[&r?2"]r>PVUr>5DJp`0)Mq&8iDrYt>Fq&AfCq&T8Pr>YYTr=o2>pAk-o
kQ(AY!!;uuV#^H#r<;QgJcP3=rB'sCr'C9@rB:*GrBU-@q)eC9h`pp#of`49nN?b3r&t!QrBL2\quH[&
r?2"]r>PVUr>5DJp`0)Mq&8`Aq&9#Hq&AfCq&T8Pr>YYTr=o2>pAk-okQ(AYq#^KpW;ul'r<;0\JcPcM
r"/furBC-ErBgHJrCd)Zpd+^?q*Nt+i^3B+rBC->rB^BKr"/c0r>#8Pr#kqZr>khUr>55Nq',VUh&Yc$
q&]>Rr?hFdr>khXr!)<ar;k^SJcLZ.r"/furBC-ErBgHJrCd)Zpd+^?q*Nt+ha70+rBC->rB^BKr"/c0
r>#8Pr#kqZr>khUr>55Nq',VUg)]Q$q&]>Rr?hFdr>khXr!)<ar;kUPJcLc1r"/fus$$HHr':3IrBU<S
rC?WKq*4[Aha?$_rBC->rB^BKr"/c0r>#8Pr#kqZr>khUr>55Nq',VUcQ2d$q&]>Rr?hFdr>khXr!)<a
r;k4EJcM/<r"/furBC-ErBgHJrCd)Zpd+^?q*Nt+fL#O#r&O^As$H`Pr"/c0r>#8Pr#kqZr>khUr>55N
q',VU`Z>(#q]>PTr?hFdr>khXr!)<ar;jh:JcMPGr#>T3rBU-IrBgHQr^[#[pdFpEq*b!InO<4Bq*j40
rBL3IrC-ZTr#5M>!!rNCr?;(br?D1]r>>JNp`]GY^)utjrZV4fr$qXfr?M4HquHZrU]>uHXoSA=rDEMY
pdY3KrC?fWpd>*KqEk!GpdXdBpdY'Ji'dN.r'UEOrC?c(r!<6@r?;1er[%Ler>tnSr>GARq'<ZrnKIiY
r@.dsr?2%`r!E9$r;i;dJcN=]r#>T3rBU-IrBgHQrCH]Oq*P$JrC$EMnO<4Bq*j40rBL3IrC-ZTr#5J=
r>bbZr$D:cr>tnSr>GARq'<ZrnKIiYr$qXfr?M=KrX&K&r;hoYJcN^hr#>T3rBU-IrBgHQrCH]Oq*OmF
qF:KSnO<4Bq*j40rBL3IrC-ZTr#5J=r>bbZr$D:cr>tnSr>GSXq]Yb\^)ukgr?qLmr?2%`r!E9$r;hfV
JcNgkr$))*rCd&\rD!5crC-ZTpdt9Sq*t-L!(c?Fi(<`:rDNPaq+U]0r"T)Vr>GMLr?(t\q'>h\p*&?=
p`]GUi$&%>r"f)Pr"A]'q>g<lPlUacquHNnNr[T.r$))*rCd&\rD!5crC-ZTpdt9Sq*t-Logn^Gi(<`:
rDNPaq+U]0r"T)Vr>GMLr?(t\q'>GQi$8"?q&nT=r>keOq',_Lmf<:er;i/`r<3#uqZ6]tKE0g.r$))*
rCd&\rD!5crC-ZTpdt9Sq*t-Ll:CqGi(<`:rDNPaq+U]0r"T)Vr>GMLr?(t\q'>GQp*8lJp`]GUi$&%>
r"f)Pr"AGuq#U<lS,iKjquHNnp],mGkQ(N)rB^BTr(?o^rD*;[rC?WSq+LNQpdaO=pds^Aq+CT`r(-WW
r#ttPr?hI\r"o;Rr?1n]n0.*Bp*9>Uq&nT=r>keOq',_Lmf<.amf96cr<3#uq#Tj_JcPBBr$VG6rD`Pf
rD!)[pe:KYq+CERkY(G>rD!2aq+UTYrDNPirD!5^r$hO[r@@ghr#GYYr?(h_pa#YZn0[rWq'=92r>keU
r?M7`r"o,.r;ultr;uouj8eNHhuW$Ar<3$#r;kaTJcPcMr$VG6rD`PfrD!)[pe:KYq+CERkY(G>peCWZ
s%N5_rDNPirD!5^r$hO[r@@ghr#GYYr?(h_pa#YZn0[rWq'>YYg*?P:r#GY[r?2"Sp]16oquQ`tr;kRO
pAj+PkQ(Paqucludf>7*r$VG6rD`PfrD!)[pe:KYq+CERkY(G>peCQX!)<;arDNPirD!5^r$hO[r@@gh
r#GYYr?(h_pa#YZn0[rWq'>PVh';k=r#GY[r?2"Sp]16oquQ`tr;kILq>fFSkQ(PaqucluciB%*r$VG6
s&B"tpeUi_q+CEUq+g`Xpds[BnP&^Pq+UTYrDNPirD!5^r$hO[r@@ghr#GYYr?(h_pa#YZn0[rWq'>/K
kTg$Hr#GY[r?2"Sp]16oquQ`tr;k4Er;ks[kQ(Paquclu`;l8*r$VG6rD`PfrD!)[pe:KYq+CERkY(G>
peCQXq+^fcr)!>ds%35^r$hO[r@@ghr#GYYr?(h_pa#YZn0[rWq'=c@o-=2Sr#GY[r?2"Sp]16oquQ`t
r;k4EncA1[kQ(Paquclu\cAK*r$VGArCZu\rD<G`rE9+t!)iSfq,$lapeCQaq,-o^q+^Z^pf$ucq+gl]
r'^KZrCQo6r=K#Ar?_Cjr$hRlr?(t`r?(MTq'5Yaq&T8Un0e#Up`TAWr$_Omr@e'ur@Rsqr"Ac)r;lZp
r;cWohZ3HQkPtS`nH"dQXoSAIrDWYer(HubrCHlirDNDd!)WMgq,-o]q,R5fpeLWZq,-ocq,-r_rCd&V
rD3A`r$M=Rr?_Cjs!dprr?qOcr?V=`n0RlTpaZ([q'5AVq',SVq'5\`r@e+!!%Rq!r?qLUp]16np]CBo
q#T@Qq#T[Zo`=skLB+jbr$VGArCZu\rD<G`rE9(speU]^rDEMjpeCQaq,-o^q+^Z^pf$ucq+gl]r'^KZ
rCQo6r"8lRr@%Rmr?qOcr?V=`n0RlTpaZ([q'5AVq',SVq'5\`r@e'ur@Rsqrt>;Dp]16np]CBoq#T@Q
q#T[Zn,`CdJcN^hr$VGArCZu\rD<G`rE9(speU]^q,-u_s%W;hq,-o^q+^Z^pf$ucq+gl]r'^KZrCQo6
r"8lRr@%Rmr?qOcr?V=`r[%.^q'5Yaq&T8Un0e#Up`TAWq'c1pr$qXsr?qLUp]16np]CBoq#T@Qq#T[Z
n,`:aJcNgkr#kr5rD!2erD*;irD`_qpegibq,I,b!*8qsq,?cYq,6ufq,@)crCQo`rC[#cr#bhHr?2%h
r%7jnr@.[gr?D+dp*]Y]pac.^q'GMZq'>_Zq'Ghcr@Ik$r@.[ur"&Q&rrW3%quls!r<2oshZ3HQkQ()Q
m/V_<dK'1frD*;cr)*DfrDWYorDiViq,7#fpeU]drDWYnn5&jXpf7,gq,%#]r)!>arDEJ7r!rZJr@@dt
r?_Ckr?;+`n0e#Wpac.^q'GMZq'>_Zq'Ghcr@Ik$r@.[ur"&Q&r;um"r;lj"q#T@Qq#T[Zn,_MKJcOU,
r#kr5rD!2erD*;irD`_qpegibq,I,bq,[;iqG6i]q,6ufq,@)crCQo`rC[#cr#bhHr?2%hr%7jnr@.[g
r?C_Yq'>qiq^_Iaq'GMZq'>_Zq'Ghcr@Ik$r@.[ur"&Q&r;um"r;lj"q>gQshZ3HQkQ()Qf)UC&kQ(N'
rD*;cr)*DfrDWYorDiViq,7#fpeU]dq,?cY!)iYkpf7,gq,%#]r)!>arDEJ7r!rZJr@@dtr?_Ckr?;+`
n0e#Wpac7arZCq^n1"/Yp`fM[q'l7nr%\.!r@e'Zp]16oquls!r<2ospAjFXq#T[Zn,^`5JcPBBr"8m&
rDWVnrE9)$q,I,dnQ,Eaq,[;kpf.&eq,%#fr)3>iq,[Gsr)`htrD<D)r!iTfr?M(_r?D%jpal4eq'Yqe
q'Ytfpakqgpal4jq'c1er$)(lr@.XQec>LJr;cHiq#SM9p]9(KJcPcMr"8m&rDWVnrE9)$q,I,dnQ,Ea
q,[;kpf.&eq,$iaqc*Spq,[Gsr)`htrD<D)r!iTfr?M(_r?D%jpal4eq'Yqeq'YtfpalFuo.Tkiq'u1g
r?V:br@\$tr!_-Vq#g0frrDiq`rPl8cN&h&r"8m&rDWVnrE9)$q,I,dnQ,Eaq,[;kpf.&eq,$iaq,@>p
qH!Ptr)`htrD<D)r!iTfr?M(_r?D%jpal4eq'Yqeq'Ytfpal=rp+Q1lq'u1gr?V:br@\$tr!_-Vq#g*d
!!2os`rPl8bQ*V&r"8m&s&8qrr)EVtrE/kppegQ^pf.&iq,R2hq,7#bpepoeq,[Gsr)`htrD<D)r!iTf
r?M(_r?D%jpal4eq'Yqeq'Ytfpakqgpal4jq'c1er$)(lr@.XQec>LJn,W7br;b"@p]822QiR$brC-Zj
r*oV+rET;"rDE>iq,mGqpfR>pq,mDnnPo9`q,dAprEK2)rE0(os%W4grAOU(r%7jjr?qOrr@RdtnL=5`
q'c%hpb)(jpb2Xtq^_Ikr?V:gr@n1!quQEiquQ!]q$$6fq#^*eec>II[K*'&quQabrE]>1rE&r&rDW\m
!)`Mkq,mGqpfR>pq,mDnnPo9`q,dAprEK2)rE0"mp]1?qrAOU(r%7jjr?qOrr@RdtnL=5`q'c%hpb)(j
pb2Fnr$hUor?V:gr@n1!quQEiquQ!]q$$6fq#]^Zi;iWTWrT:&quQabrE]>1rE&r&rDWYlpf.;rqH3Pr
pfR>pq,mDnnPo9`q,dAprEK2)rE0"mpAt4Nr@7h!r[n'lr?qOrr@RdtnL=5`q'c%hpb)(jpb2Fnq'l7f
r?hRmr@n1!quQEiquQ!]q$$6fq#]=Oli?e_TE)M&quQabrE]>1rE&r&rDWYlpf7,lrE9)%pfR>pq,mDn
nPo9`q,dAprEK2)rE0"mpAt4Nr@7^sr?;+er@\%#pb2.dpac.gq()4mnM'_kq()7ir?V:gr@n1!rrN*"
oDndikQ(D^n,W7cd/`n@p]Hc]^B"3apf%,nrE&r"rET,(q,dAkqHs80q,R5mpfdJuq-3Vsq,dAmrET8-
rD3ACpAk.,r@\""rAaa7r@Rt%r[I^nq(VV"pa5enq(VRpnLOAenM'njr$qXor>>G4quH[(f)YUI]`@R&
q$*8f_>sNdpf%,nrE&r"rET,(q,dAkpg4#$qGm>npfdJuq-3Vsq,dAmrET8-rD3ACpAk.,r@\""rAaa7
r@Rt%q^MLnq(VV"pa5enq(VRpnLOAenM'njr$qXor>>8/r=&]+f`:gKZ2je&q$)l[blI\opf%,nrE&r"
rET,(q,dAkpg<hsrE0##pfdJuq-3Vsq,dAmrET8-rD3ACpAk.,r@\""rAaa7r@Rt%paQ"mq(h^lq)%n$
pakqcpb)(jr@.Xor@.[^pAk.#oDmqPq#RStqZd')KE0X)r@ReCrE0#"rE0#'pg3btq,I,rq,R5mqHEo&
q-<`"pf[Doq,[H!r*TCur@I[Cr>#8`r%7k,rAX[,r@n!qq(VV"r[.Lhq)%n$pakqcpb)(jr@.Xor@.[^
pAk.#klC/Pq#RStq$-ToJcOg2r=&X-r*B8$rE9)*rEK&(q,mGopgNu"q-!Jtq-F&,qH`l"q-!MprF,V3
rE&q+pAk-rrA44+rAjg3r@dpsnM9kdr&+I2q(h^sq()7mpb;M!q(qt#r$qY"r<N&sr<1sWq>g<m[K-('
r<rQ*m/V_<mK!1orE9&(rDif!rEfG,pg<i!q,d?"q,dAppg!W$q-Er&r*&o!q,dN'r*]J)r=&E#r<E3V
pbi"1rA+=)pakqjpa5eoq(h^sq()7mpb;M!q(qt#r$qY"r<N&sr<1^Pr;up![K-('r<rQ*iW+Q1q#L@%
rE9&(rDif!rEfG,pg<i!q,d?"q,dAppg!W$q-Ec!qcWr%q,dN'r*]J)r=&E#r<E3Vpbi"1rA+=)pakqj
pa5eoq(h^ss"!ssq(;@qq(hb%r@IjrrA"6UpAk-pf)YUJq>e2/p]:=$r;tRNM?*PSr=&X-r*B8$rE9)*
rEK&(q,mGopgNu"q-!Jtq-Nl&pfdJr!*B"urF,V3rE&q+pAk-rrA44+rAjg3r@dpsnM9kdq).t'pauCo
r[[drpb;M!q(qt#r$qY"r<N&sr<1^Pq#^9j^]=-1r<rQ*e,Y:)r=&^/s&o8*rDif!rEfG,pg<i!q,d?"
q,dAppg!W$q-Ec!q-!MprF,V3rE&q+pAk-rrA44+rAjg3r@dpsnM9kdq).t'pau:lq(;@qq(hb%r@Ijr
rA"6UpAk-pf)YUJli>3/p]:=$r;t(@Nr],.pg3o)rFPq5pga,/q-`u)q-Ef(n6u-"pg3c(q-s;'r*TCP
rrDQhr>5AhrA=I/rA!poq(2=on2'kmpal4nq(h_$s"F7&q(2Iur&=QllN$hbhuNQRn,W7bq>f@Pq#U6j
r<Kn6RK3:9pg3o)rFPt6!+#A0q-s/-pg<i&q-`]#q-Wo'q-a#-rDri'r@7F>quH[3r&+F0rA4C,oIBYf
q(D.mq(DFnq(DIupbV_!r%.gur@n..r>Fo$qubjWq#Tsbq#TpaklCM[p]16tY5kC!r@7SKrE]A5rE]2.
!+Pe6q-`u)q-Ef(n6u-"pg3c(q-s;'r*TCPmf<;&s#'d5rA=I/rA!poq(2=on2'kmpal4nq(h_$q(MOp
r@n1/!&siolN$hbhuNQRn,W7bj8efPq#U6jr<K+uYQ4VOpg3o)rFPq5pga,/rF#S3pg<i&q-`]#q-Wo'
q-a#-rDri'r@779r>5AhrA=I/rA!poq(2=on2'kmpal4nq(h_$q(MOpr@n..r>GJ4nGrIhhuNQRn,W7b
f`;$Pq#U6jr<J_j])_d1r(ZinrFu%>q.BG4qI9J6q-a#.n7D)uq.0;5rFPn#r;l?er;lgHq)81(rA=L*
q^qUsq(_Y&q)%n%pb2Ftq).q*q(hb!rB1!/r;lZnoDndjkQ(,Rp]0LYkQ(DZ!!;uuM#b6ir;lgjoj[l6
ph0D7q.'2/!+>Y2q.&o*n7)3(q.BS:r(R%imf<:er%%S$r@\%*q^qe!q(MOupbqq)q(_Xtq(_\&pbqq'
q(M\/r%.dIm/[.dquZ'^nH&CbkQ0lIq#U9mr;_ELaT28?r(ZinrFu%>q.BG4pgX&,rF>e9n7D)uq.0;5
rFPn#r;l?er;lgHq)81(rA=:$q(MOupbqq)q(_Xtq(_\&pbqq'q(M\/r%.dIlN$har;c0anH&CbkQ0lI
q#U9mnc47Ae,]FJr(ZinrFu%>q.BG4pgX&,q.'84pLWi'q.0;5rFPn#r;l?er;lgHq)81(rA=:$q(MOu
r\jX3q)%n%pb2Ftq).q*q(hb!rB1!/r;l3aquZEhpAj^ap]0LYkQ(DZq#]^ZJcOO*r!NC,rFPq?rG;FH
r+kt=rF5_>oOmu6phKV:!+5_4rFGk7oO[i8rDib)k5bDarA+=1r@Rt%r@e(&q(qt,rA"($r&"C0q(_Xu
q)/+1rB's<r&jd1r@\%#rA4?Wk5bD^nGrLiqud!"nc8UjquXV5r=&T*k5bM`rW7cRjoG;drEK53rFc(F
rFu1Fok=;5rFtn:q.]V=q.BS4rFGk7oO[i8rDib)k5bDarA+=1r@Rt%r@e(&q(qt,rA"($q)%n%pb;M$
rAaa;rAjd<q(hn$r@Rt(r!;HcqucHhr<)s#o`4pjr<)s!^B"3@quZ$]quZZoJcP<@r!NC,rFPq?rG;FH
r+kt=rF5_>oOmu6phKV:rEoM6rF#>1s(2"CrDib)k5bDarA+=1r@Rt%r@e(&q(qt,rA"($q)%n%pb;_*
q_e=3rB's<r&jd1r@\%#rA4?Wk5bD^nGrLiqulNir<*$#rrTq8r=&T*k5bD]mJr+EoDndrrEK53rFc(F
rFu1Fok=;5rFtn:q.]V=q.BS4rFGk7oOS#>qJH12r!hfhr!**TrAX[,r@n1'r%Rq&rAFO.pb;M#q(_Xu
r&+I2rAaa;rAjd<q(hn$r@Rt(r!;HcqucHhr<)s#nGrLiquQiu^]=<AquZ$]quZ0aJcPWIr=Aj1rGMRQ
rG;CIrG):Hq/-(Kr+YtAn8/&;rG):FrFGk>r+,bDrGDLQrF#R6h#RB[r@n1,rA4C,r%Rq(q)SC2r%Rq*
q)%k%rAX[7rBU<DrBC-@q)SC-r@.[OblIMAnGrLkqucTlb5hJC]E!Zdr=Aj1rGMRQrG;CIrG):Hq/-(K
r+YtAn8/&;rG):FrFGk>r+,bDrGDLQrF#R6p&O:Vr<`EVrA=I/rA"4(q).t.rAFL,q)A++pbMe,rAaa@
rB1$Br&ap=q`4U/r@.[OblIMAnGrLkquc3aec>XNYlKmdr=Aj1rGMUR!-%mQr+l7GrG24GrGVUJq.fD8
rFu4FrFu4@rFc%=rGMRNrGhdDr=8,no)S^qr@n1,rA4C,r%Rq(q)SC2r%Rq*q)%k%rAX[7rBU<DrBC-@
q)SC-!%Imrr<^^Kp]U*er<<*$hZ2U8r<&nsS,iKurEB/;rG_^Or+c:IrbDCIq/-(Kr+YtAn8/&;rG):F
rFGk>r+,bDrGDLQrF#R6huN`Vr<`EVrA=I/rA"4(q).t.rAFL,q)A++pbMe,rAaa@rB1$Br&a^7r@n1!
r<`E&d/`qEnGrLkqubFKli?tdRfK2`r<`F$rFc(Ir+u=LrG2@OrG):Dr+Z+HrGMFIphThFrGVXNrH%pV
r+Q%CrFl.%r=%3Vr<E3TrB:*Ar&Xd:rAFO8rAOU<r'1-Aof`76r&a^6rA+=3rAsj4q*4g7r<_llkQ(P_
T)elkr<3'"eH#ON]E#)7r<`F$rFc(Ir+u=LrG2@OrG):Drb;CHrGDLNq/#hArGDLOrG;FRrG_[JrFu4D
rC["seH#OPrA"76r]C0Cr&Xd:rAFO8rAOU<r'1-Aof`76r&a^6rA+=3rAsj4q*4g7r<_cilN$kbSH&Wm
rWN0#eH#ON\H&l7r<`F$rFc(Ir+u=LrG2@OrG):Dr+Q.Jrb_UOq/#hArGDLOrG;FRrG_[JrFu4DrC["s
eH#OPrA"76rB1*@r]:!<rAFO8rAOU<r'1-Aof`76r&a^6rA+=3rAsj4q*4g7r<_B^p&P$mSH/Tkr;lis
f`:sRXoQ*7r<`F$rFc(Ir+u=LrG2@OrG):Dr+Z+HrGMRMrG;7ErGDLOrG;FRrG_[JrFu4DrC["seH#OP
rA"76rB1!=rAjg6rB's9rBC-DrB'[8rAjd;q)J=.rAjg;r%n.5rA=HZeH#OLSH/Tkr;lHhj8f,]UB&13
r;ljQrFl+Jq/uXPrH%pSr+l7LrG_^RrGDCIs(qLMrH8'[rGDIXrG2?cr;k.Cr;lj<rAX@3rAX[;r^$TO
r'C9DrB:*DrBC!=rAjg<rAjg9rAXX@rB^B%r;jn<JcLB&c2deDrA4Ccr,DISrG;FRrGDIJrGVXRrGVXO
ph]bF!-S9`rH%pSr-A6Vr@n0NblI\Cr>tnroKE.3rB1$Fr'C9D!'U<ErBL6EpcSL8rB's<rAaa7r'L?J
r>bb:])[E_JcOI(r;ljQrFl+Jq/uXPrH%pSr+l7LrG_^RrGD=Gq/H:TrH%pSr-A6Vr@n0NblI\Cr>tnr
oKE.3rB1$Fr'C9DrB:*DrBC!=rAjg<rAjg9rAXX@rB^B%r;j,&JcLB&j8f,ZrA4Ccr,DISrG;FRrGDIJ
rGVXRrGVXOph]bFrH8'[rGDIXrG2Ees"OBPblI\Cr>tnroKE.3rB1$Fr'C9DrB:*DrBC!=s#L*>rB's<
rAaa7r'L?Jr>bb:V#Z)IM?)f>r;ljQrFl+Jq/uXPrH%pSr+l7LrG_^RrGD=Gq/H:TrH%pSr-A6Vr@e3P
rW17Dr;lj<rAX@3rAX[;rBgEJrB1$ArBL6EpcSL8!'C0ArAjg9rAXX@rB^B%r;iVmJcLB&l2^bmr&O^m
rGhdTrGVXLr+>nJrH/!XrG_OLrGhdTq/cLRr'C8hnGpf6r<W<ErAaa<rBC0CrCZuXrAsm=rB^BIpd4pE
rBL6CrAsm?r$)(E]`A!7r"Rodj8f,`quZg!]`A!5r!<)u^&\*8aT1u6r=8`crGDLQrG_^RrG)7BrGqjY
rGhdTphp%MrG_RRrG_[#r<q`ffDtjUr#u"urB1$BrB:*Or($]HrB'sDrBU-ErBU<GrB1$>rB:'&rs/Q/
]`A!7r"RNYmf<:kquZg!]`A!5r!;]jaT28C^&S-5r=8`crGDLQrG_^RrG)7BrGqjYrGhdTphp%MrG_RR
rG_[#r<q?[irK#`r#u"urB1$BrB:*Or($]HrB'sDrBU-ErBU<GrB1$>rB:'&r<N)t`W5r@r"R-Nq>gI!
quZg!]`A!5r!;<_e,]FN]`A!@r&Faorb_URrG_^RrG)7BrGqjYrGhdTphp%MrG_RRrG_[#r<psPmK!1k
r#u"urB1$BrB:*Or($]HrB'sDrBU-ErBU<GrB1$>rB:'&r<M]id/a+Kr"QmGr<N6%r<'_5r<)s'fDse/
r<9P.r<iK_rEB/@rG2=MrHA-`q/lRTr,_gZrGMR;rAsl`]E%F$r<<-ArA4C<rCd&brBC0Eq*Y*Lr($]Q
rBC04r?(tAf`6U(JcM2=r<iK_rEB/@rG2COs)@p[rHJ'ZrGhaVrH8'VrEB.\r<]_/qZ-Qur?(torB^BT
r)!>UrBL*FrC-WSrBpNIr@\$jr<:aPJcLB&S,iKprAaaZrH%pQr,;XZrc\6aq/lRTr,_gZrGMR;rAsl`
XoSG$r<<-ArA4C<rCd&brBC0Eq*Y*Lr($]QrBC04r?(tAb5d+oJcM\Kr<iK_rEB/@rG2=MrHA-`rH/![
rGhaVrH8'VrEB.\r<]M)r<<-ArA4C<rCd&brBC0Eq*Y*Lr($]QrBC04r?(tA^]8rdJcMYJr<3'Cr%n:6
rC?f`rCHlNr\XX3r?(t@P5tO_rXJo<r"]/Rr?qOnr?V=ar#>SHr;rqulN$kap]16nli?td_>o/fYlO_*
r?D.qrB1$KrDEMarBC-9r?(t@!!&5`r;up-r"]/R!%7anr@7akr?2"Wr=Su0ScJHar;lZnr;l6br<'M/
JcNF`r<3'Cr%n:6rC?f`rCHlNr&"?or<2cnT)efkr=8`?r?;+er@7akr?2"Wr=Su0P5tO^p]16nli?td
X8mhP`rQ&@r?D.qrB1$KrDEMarBC-9r?(t@l2[gar;up-r"]/Rr?qOnr?V=ar#>YJrt522P5tO^q>gNq
r;l6br<&_nM?(d!r<3'Cr%n:6rC?f`rCHlNr&"?or<29`XT8;$r=8`?r?;+er@7akr?2"Wr=K#2rW88`
r;lZn!!3'"li?tdScF`MJ,~>

%%EndBinary
grestore
np
1172.6 394.5 mo
1172.6 402.878 1164.5 409.67 1154.5 409.67 cv
1144.5 409.67 1136.4 402.878 1136.4 394.5 cv
1136.4 386.122 1144.5 379.33 1154.5 379.33 cv
1164.5 379.33 1172.6 386.122 1172.6 394.5 cv
cp
.635492 .400641 .0580453 0 cmyk
@
2 lw
[6 6 ] 0 dsh
898.55 285.99 mo
1023.45 381.01 li
.212253 .826078 .729854 .093019 cmyk
@
893.78 282.35 mo
902.57 284.01 li
898.55 285.99 li
897.72 290.38 li
893.78 282.35 li
cp
f
[] 0 dsh
893.78 282.35 mo
902.57 284.01 li
898.55 285.99 li
897.72 290.38 li
893.78 282.35 li
cp
@
1028.22 384.65 mo
1019.43 382.99 li
1023.45 381.01 li
1024.28 376.62 li
1028.22 384.65 li
cp
f
1028.22 384.65 mo
1019.43 382.99 li
1023.45 381.01 li
1024.28 376.62 li
1028.22 384.65 li
cp
@
1024.23 399.88 mo
930.77 495.12 li
.635492 .400641 .0580453 0 cmyk
@
1028.43 395.6 mo
1025.69 404.11 li
1024.23 399.88 li
1019.98 398.5 li
1028.43 395.6 li
cp
f
1028.43 395.6 mo
1025.69 404.11 li
1024.23 399.88 li
1019.98 398.5 li
1028.43 395.6 li
cp
@
926.57 499.4 mo
929.31 490.89 li
930.77 495.12 li
935.02 496.5 li
926.57 499.4 li
cp
f
926.57 499.4 mo
929.31 490.89 li
930.77 495.12 li
935.02 496.5 li
926.57 499.4 li
cp
@
1134.36 494.785 mo
1136.71 494.785 li
1136.71 512 li
1134.36 512 li
1134.36 494.785 li
cp
1140.71 494.785 mo
1148.45 494.785 li
1149.98 494.785 1151.22 495.217 1152.16 496.08 cv
1153.09 496.943 1153.56 498.156 1153.56 499.719 cv
1153.56 501.063 1153.14 502.232 1152.31 503.229 cv
1151.47 504.225 1150.19 504.723 1148.45 504.723 cv
1143.04 504.723 li
1143.04 512 li
1140.71 512 li
1140.71 494.785 li
cp
1149.8 497.152 mo
1149.29 496.91 1148.58 496.789 1147.68 496.789 cv
1143.04 496.789 li
1143.04 502.754 li
1147.68 502.754 li
1148.73 502.754 1149.58 502.531 1150.23 502.086 cv
1150.88 501.641 1151.21 500.855 1151.21 499.73 cv
1151.21 498.465 1150.74 497.605 1149.8 497.152 cv
cp
1163.14 494.785 mo
1165.89 494.785 li
1174.59 508.73 li
1174.59 494.785 li
1176.8 494.785 li
1176.8 512 li
1174.19 512 li
1165.37 498.066 li
1165.37 512 li
1163.14 512 li
1163.14 494.785 li
cp
1188 499.795 mo
1188.84 500.213 1189.48 500.754 1189.91 501.418 cv
1190.34 502.051 1190.62 502.789 1190.76 503.633 cv
1190.88 504.211 1190.95 505.133 1190.95 506.398 cv
1181.75 506.398 li
1181.79 507.672 1182.09 508.693 1182.65 509.463 cv
1183.21 510.232 1184.08 510.617 1185.26 510.617 cv
1186.36 510.617 1187.24 510.254 1187.9 509.527 cv
1188.27 509.105 1188.54 508.617 1188.7 508.063 cv
1190.77 508.063 li
1190.71 508.523 1190.53 509.037 1190.22 509.604 cv
1189.92 510.17 1189.57 510.633 1189.19 510.992 cv
1188.55 511.617 1187.75 512.039 1186.81 512.258 cv
1186.3 512.383 1185.73 512.445 1185.09 512.445 cv
1183.52 512.445 1182.2 511.877 1181.11 510.74 cv
1180.03 509.604 1179.48 508.012 1179.48 505.965 cv
1179.48 503.949 1180.03 502.313 1181.13 501.055 cv
1182.22 499.797 1183.65 499.168 1185.41 499.168 cv
1186.3 499.168 1187.17 499.377 1188 499.795 cv
cp
1188.78 504.723 mo
1188.69 503.809 1188.49 503.078 1188.18 502.531 cv
1187.6 501.516 1186.64 501.008 1185.29 501.008 cv
1184.32 501.008 1183.5 501.357 1182.85 502.057 cv
1182.19 502.756 1181.84 503.645 1181.8 504.723 cv
1188.78 504.723 li
cp
1193.95 495.945 mo
1196.09 495.945 li
1196.09 499.449 li
1198.09 499.449 li
1198.09 501.172 li
1196.09 501.172 li
1196.09 509.363 li
1196.09 509.801 1196.23 510.094 1196.53 510.242 cv
1196.7 510.328 1196.97 510.371 1197.35 510.371 cv
1197.45 510.371 1197.56 510.369 1197.68 510.365 cv
1197.8 510.361 1197.93 510.352 1198.09 510.336 cv
1198.09 512 li
1197.85 512.07 1197.6 512.121 1197.33 512.152 cv
1197.07 512.184 1196.79 512.199 1196.48 512.199 cv
1195.5 512.199 1194.83 511.947 1194.48 511.443 cv
1194.13 510.939 1193.95 510.285 1193.95 509.48 cv
1193.95 501.172 li
1192.25 501.172 li
1192.25 499.449 li
1193.95 499.449 li
1193.95 495.945 li
cp
1201.16 499.449 mo
1203.57 509.34 li
1206.02 499.449 li
1208.39 499.449 li
1210.85 509.281 li
1213.42 499.449 li
1215.53 499.449 li
1211.88 512 li
1209.69 512 li
1207.14 502.285 li
1204.66 512 li
1202.47 512 li
1198.85 499.449 li
1201.16 499.449 li
cp
1225.37 509.053 mo
1225.89 507.994 1226.15 506.816 1226.15 505.52 cv
1226.15 504.348 1225.96 503.395 1225.59 502.66 cv
1225 501.504 1223.97 500.926 1222.52 500.926 cv
1221.23 500.926 1220.29 501.418 1219.71 502.402 cv
1219.12 503.387 1218.83 504.574 1218.83 505.965 cv
1218.83 507.301 1219.12 508.414 1219.71 509.305 cv
1220.29 510.195 1221.22 510.641 1222.5 510.641 cv
1223.89 510.641 1224.85 510.111 1225.37 509.053 cv
cp
1226.68 500.703 mo
1227.8 501.781 1228.36 503.367 1228.36 505.461 cv
1228.36 507.484 1227.86 509.156 1226.88 510.477 cv
1225.89 511.797 1224.37 512.457 1222.3 512.457 cv
1220.57 512.457 1219.2 511.873 1218.18 510.705 cv
1217.17 509.537 1216.66 507.969 1216.66 506 cv
1216.66 503.891 1217.2 502.211 1218.27 500.961 cv
1219.34 499.711 1220.77 499.086 1222.58 499.086 cv
1224.2 499.086 1225.56 499.625 1226.68 500.703 cv
cp
1230.92 499.449 mo
1232.92 499.449 li
1232.92 501.617 li
1233.09 501.195 1233.49 500.682 1234.13 500.076 cv
1234.77 499.471 1235.51 499.168 1236.34 499.168 cv
1236.38 499.168 1236.45 499.172 1236.54 499.18 cv
1236.64 499.188 1236.8 499.203 1237.02 499.227 cv
1237.02 501.453 li
1236.9 501.43 1236.78 501.414 1236.68 501.406 cv
1236.57 501.398 1236.46 501.395 1236.33 501.395 cv
1235.27 501.395 1234.45 501.736 1233.88 502.42 cv
1233.31 503.104 1233.03 503.891 1233.03 504.781 cv
1233.03 512 li
1230.92 512 li
1230.92 499.449 li
cp
1238.8 494.785 mo
1240.82 494.785 li
1240.82 504.781 li
1246.24 499.449 li
1248.93 499.449 li
1244.13 504.148 li
1249.2 512 li
1246.51 512 li
1242.59 505.672 li
1240.82 507.289 li
1240.82 512 li
1238.8 512 li
1238.8 494.785 li
cp
0 0 0 1 cmyk
f
grestore
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
